# -*- coding: utf-8 -*-
"""Figure 5 TLO plotting // new Figure 5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vcF6sdid0yygCcNF6uGfyVIe-URXp24z
"""

!pip install --quiet scanpy
!pip install --quiet leidenalg
!pip install --quiet squidpy

import csv
import anndata as ad
import gzip
import os
import scipy.io
import scanpy as sc
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import drive
import leidenalg as la
from pathlib import Path
import squidpy as sq
import scipy

adata3= sc.read_h5ad('/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/all_Cosmx_cleaned_neighbored.h5ad')

adata3=adata3[adata3.obs["sample"]=="HK2695"]

print(adata3.obs["immune_cell_update"])

adata3.obs["fov"]=adata3.obs["fov"].astype(int)
adata3.obs["fov"]=adata3.obs["fov"].astype(str)

adata3.obs["fov"]=adata3.obs["fov"].astype(int)

# Commented out IPython magic to ensure Python compatibility.
# %config InlineBackend.figure_format='retina'
plt.style.use('dark_background')

sc.pl.scatter(
    adata3,
    x="CenterX_global_px",
    y="CenterY_global_px",
    color="fov",
    size=4, legend_fontsize=9,
    legend_loc='on data',
    legend_fontoutline=2,
)

#we want to use these FOVs (for the TLO)
fov_include = [1,2,3,11,12,13,22,23,24]

adata3 = adata3[adata3.obs['fov'].isin(fov_include)]

#we want to use these FOVs (for the Microenvironment plotting)
fov_include = [6,7,8,9,10,11,12,13,14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]

adata3 = adata3[adata3.obs['fov'].isin(fov_include)]

adata3

# Commented out IPython magic to ensure Python compatibility.
# %config InlineBackend.figure_format='retina'
plt.style.use('dark_background')

sc.pl.scatter(
    adata3,
    x="CenterX_global_px",
    y="CenterY_global_px",
    color="annotation_post_scanvi70_broad",
    size=4, legend_fontsize=6,
    legend_fontoutline=2,
)

# Commented out IPython magic to ensure Python compatibility.
# %config InlineBackend.figure_format='retina'
plt.style.use('dark_background')

sc.pl.scatter(
    adata3,
    x="CenterX_global_px",
    y="CenterY_global_px",
    color="immune_cell_update",
    size=4, legend_fontsize=6,
    legend_fontoutline=2,
)

adata= sc.read_h5ad('/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/raw_for_plotting/HK2695_raw.h5ad')

# Convert cell_id columns to sets
cell_ids_in_adata = set(adata.obs["cell_id"].to_list())
cell_ids_in_adata3 = set(adata3.obs["cell_id"].to_list())

# Find the intersection of cell IDs present in both objects
common_cell_ids = cell_ids_in_adata.intersection(cell_ids_in_adata3)

# Print the common cell IDs
#print(common_cell_ids)
mask = adata.obs["cell_id"].isin(common_cell_ids)
adata_subset = adata[mask]
adata_subset

palette={
    'Immune ME 1': '#007ABA',
    'Immune ME 2': '#EE7402',
    'Immune ME 3': '#E4051E',
    'Immune ME 4': '#8F65A8',
    'Immune ME 5': '#BBBE09',
    'Immune ME 6': '#00AFC5',
    'iPT ME 1': '#A7C8EB',
    'iPT ME 2': '#8CC47A',
    'iPT ME 3': '#C9AFD5',
    'iPT ME 4': '#F18C93',
    'iTAL ME 1': '#F0B836',
    'iTAL ME 2': '#007ABA',
    'iTAL ME 3':'#8F65A8',
    'iTAL ME 4': '#D975AC',
    'outlier':'#A8A8A7',
    'Fibroblast ME 1':'#00AFC5', #'#007DA7',
    'Fibroblast ME 2':'#E8969D',
    'Fibroblast ME 3':'#8CA251',
    'Fibroblast ME 4':'#E7BA53',#'#8CA251',
    'Fibroblast ME 5':'#D69FC8',
}##'#92D2DF',

adata3.obs['immune_cell_update'] = adata3.obs['immune_cell_update'].cat.add_categories('other').fillna('other')
#adata3.obs['immune_cell_update']=adata3.obs['immune_cell_update'].fillna('other')

adata3.obs['immune_cell_update']

adata_subset

cell_colors = {
    'PC': (0.12156862745098039, 0.4666666666666667, 0.7058823529411765),
    'CNT': (0.6823529411764706, 0.7803921568627451, 0.9098039215686274),
    'DCT': (1.0, 0.4980392156862745, 0.054901960784313725),
    'DTL_ATL': (1.0, 0.7333333333333333, 0.47058823529411764),
    'EC_DVR': (0.17254901960784313, 0.6274509803921569, 0.17254901960784313),
    'EC_Peritub': (0.596078431372549, 0.8745098039215686, 0.5411764705882353),
    'EC_glom': (0.8392156862745098, 0.15294117647058825, 0.1568627450980392),
    'IC A': (1.0, 0.596078431372549, 0.5882352941176471),
    'IC B': (0.5803921568627451, 0.403921568627451, 0.7411764705882353),
    'Immune': (0.7725490196078432, 0.6901960784313725, 0.8352941176470589),
    'Podo': (0.5490196078431373, 0.33725490196078434, 0.29411764705882354),
    'Fibroblast': (0.7686274509803922, 0.611764705882353, 0.5803921568627451),
    'PEC': (0.8901960784313725, 0.4666666666666667, 0.7607843137254902),
    'PT': (0.9686274509803922, 0.7137254901960784, 0.8235294117647058),
    'MC1': (0.4980392156862745, 0.4980392156862745, 0.4980392156862745),
    'iPT': (0.7803921568627451, 0.7803921568627451, 0.7803921568627451),
    'iTAL': (0.8588235294117647, 0.8588235294117647, 0.5529411764705883),
    'TAL': (0.09019607843137255, 0.7450980392156863, 0.8117647058823529),
    'VSMC': (0.6196078431372549, 0.8549019607843137, 0.8980392156862745),
    'CD4+': (0.5529411764705883, 0.8274509803921568, 0.7803921568627451),
    'Baso/Mast': (0.2235, 0.2314, 0.4745),
    'B': (0.7450980392156863, 0.7294117647058823, 0.8549019607843137),
    'CD8+ I': (0.6784, 0.2863, 0.2902),
    'Macro II': (0.9921568627450981, 0.7058823529411765, 0.3843137254901961),
    'Neutrophil': (0.9882352941176471, 0.803921568627451, 0.8980392156862745),
    'Macro I': (0.3, 0.3, 0.3),
    'NK': (0.7372549019607844, 0.5019607843137255, 0.7411764705882353),
    'cDC': (0.9176470588235294, 0.5019607843137255, 0.23529411764705882),
    'mDC': (0.34509803921568627, 0.33725490196078434, 0.6745098039215687),
    'pDC': (0.6509803921568628, 0.4627450980392157, 0.11372549019607843),
    'Macro III': (0.9294117647058824, 0.6941176470588235, 0.12549019607843137),
    'Macro IV': (0.41568627450980394, 0.23921568627450981, 0.6039215686274509),
    'cycling Lymphocytes': (0.8, 0.47058823529411764, 0.7372549019607844),
    'CD8+ II': (0.9921568627450981, 0.7529411764705882, 0.5254901960784314),
    'Plasma': (0.2196078431372549, 0.4235294117647059, 0.6901960784313725),
    'other':(0.5,0.5,0.5,0.5)
    #'cytotox B': (0.4, 0.7607843137254902, 0.6470588235294118)
    }

# Create a dictionary from adata2 mapping cell_id to immune_cell_neighbor_calling
immune_calling_map = adata3.obs.set_index('cell_id')['immune_subcluster_ME'].to_dict()

# Map immune_cell_neighbor_calling values to adata_subset based on cell_id
adata_subset.obs['immune_subcluster_ME'] = adata_subset.obs['cell_id'].map(immune_calling_map)

# Create a dictionary from adata2 mapping cell_id to immune_cell_neighbor_calling
immune_calling_map = adata3.obs.set_index('cell_id')['iTAL_subcluster_ME_20um'].to_dict()

# Map immune_cell_neighbor_calling values to adata_subset based on cell_id
adata_subset.obs['iTAL_subcluster_ME_20um'] = adata_subset.obs['cell_id'].map(immune_calling_map)

# Create a dictionary from adata2 mapping cell_id to immune_cell_neighbor_calling
immune_calling_map = adata3.obs.set_index('cell_id')['immune_subcluster_ME_20um'].to_dict()

# Map immune_cell_neighbor_calling values to adata_subset based on cell_id
adata_subset.obs['immune_subcluster_ME_20um'] = adata_subset.obs['cell_id'].map(immune_calling_map)

# Create a dictionary from adata2 mapping cell_id to immune_cell_neighbor_calling
immune_calling_map = adata3.obs.set_index('cell_id')['Fibroblast_subcluster_ME_20um'].to_dict()

# Map immune_cell_neighbor_calling values to adata_subset based on cell_id
adata_subset.obs['Fibroblast_subcluster_ME_20um'] = adata_subset.obs['cell_id'].map(immune_calling_map)

# Create a dictionary from adata2 mapping cell_id to immune_cell_neighbor_calling
immune_calling_map = adata3.obs.set_index('cell_id')['iPT_subcluster_ME_20um'].to_dict()

# Map immune_cell_neighbor_calling values to adata_subset based on cell_id
adata_subset.obs['iPT_subcluster_ME_20um'] = adata_subset.obs['cell_id'].map(immune_calling_map)

adata_subset.obsm['X_umap']=adata3.obsm['X_umap'].copy()

sc.pl.umap(adata_subset, color = "immune_subcluster_ME", palette=palette)
sc.pl.umap(adata_subset, color = "iPT_subcluster_ME_20um", palette=palette)

sc.pl.umap(adata_subset, color = "Fibroblast_subcluster_ME_20um", palette=palette)
sc.pl.umap(adata_subset, color = "immune_subcluster_ME_20um", palette=palette)

sc.pl.umap(adata_subset, color = "iTAL_subcluster_ME_20um", palette=palette)

sc.pl.umap(adata_subset, color = "iTAL_subcluster_ME_20um")

# Commented out IPython magic to ensure Python compatibility.
# %config InlineBackend.figure_format='retina'
plt.style.use('dark_background')

sc.pl.scatter(
    adata_subset,
    x="CenterX_global_px",
    y="CenterY_global_px",
    color="immune_cell_update",
    size=8, legend_fontsize=6,
    legend_fontoutline=2,
)

adata_subset.obsm['X_umap']=adata3.obsm['X_umap']

sc.pl.umap(adata_subset, color = "immune_cell_update", palette=cell_colors)

adata3



cell_type_order = adata_subset.obs["immune_cell_update"].cat.categories.tolist()

# Directly map categories to colors
colors_mapped = [cell_colors[cell_type] for cell_type in cell_type_order]

# Assign mapped colors to 'annotation_post_scanvi70_broad_colors' in the .uns slot
adata_subset.uns['immune_cell_update_colors'] = colors_mapped

adata_subset.uns['immune_cell_update_colors']

# Commented out IPython magic to ensure Python compatibility.
# %config InlineBackend.figure_format='retina'
plt.style.use('dark_background')

sc.pl.scatter(
    adata_subset,
    x="CenterX_global_px",
    y="CenterY_global_px",
    color="immune_cell_update",
    size=8, legend_fontsize=6,
    legend_fontoutline=2,
)



# Create a dictionary from adata2 mapping cell_id to immune_cell_neighbor_calling
#immune_calling_map = adata3.uns.set_index('cell_id')['immune_cell_update_colors'].to_dict()

# Map immune_cell_neighbor_calling values to adata_subset based on cell_id
#adata_subset.uns['immune_cell_update_colors'] = adata_subset.obs['cell_id'].map(immune_calling_map)

# Create a dictionary from adata2 mapping cell_id to immune_cell_neighbor_calling
immune_calling_map = adata3.obs.set_index('cell_id')['immune_coarse'].to_dict()

# Map immune_cell_neighbor_calling values to adata_subset based on cell_id
adata_subset.obs['immune_coarse'] = adata_subset.obs['cell_id'].map(immune_calling_map)



#adata_subset.obs['immune_cell_update']=adata_subset.obs['immune_cell_update'].fillna('other')



# Create a dictionary from adata2 mapping cell_id to immune_cell_neighbor_calling
#immune_calling_map = adata3.obs.set_index('cell_id')['TNFRSF13C_scaled'].to_dict()

# Map immune_cell_neighbor_calling values to adata_subset based on cell_id
#adata_subset.obs['TNFRSF13C_scaled'] = adata_subset.obs['cell_id'].map(immune_calling_map)

# Create a dictionary from adata2 mapping cell_id to immune_cell_neighbor_calling
#immune_calling_map = adata3.obs.set_index('cell_id')['TNFSF13B_scaled'].to_dict()

# Map immune_cell_neighbor_calling values to adata_subset based on cell_id
#adata_subset.obs['TNFSF13B_scaled'] = adata_subset.obs['cell_id'].map(immune_calling_map)



adata_subset.obs["immune_cell_update"]=adata_subset.obs["immune_cell_update"].astype('category')
adata_subset.obs["immune_coarse"]=adata_subset.obs["immune_coarse"].astype('category')

adata_subset.obs["immune_cell_update"]

# Assuming 'cell_colors' and 'cell_type_order' are defined as before
# Ensure 'cell_type_order' matches the categories in your annotation
cell_type_order = adata_subset.obs["immune_cell_update"].cat.categories.tolist()

# Directly map categories to colors
colors_mapped = [cell_colors[cell_type] for cell_type in cell_type_order]

# Assign mapped colors to 'annotation_post_scanvi70_broad_colors' in the .uns slot
adata_subset.uns['immune_cell_update_colors'] = colors_mapped

# Assuming 'cell_colors' and 'cell_type_order' are defined as before
# Ensure 'cell_type_order' matches the categories in your annotation
#cell_type_order = adata_subset.obs["immune_coarse"].cat.categories.tolist()

# Directly map categories to colors
#colors_mapped = [cell_colors[cell_type] for cell_type in cell_type_order]

# Assign mapped colors to 'annotation_post_scanvi70_broad_colors' in the .uns slot
#adata_subset.uns['immune_coarse_colors'] = colors_mapped

#adata_subset.obs["annotation"]=adata_subset.obs["annotation_post_scanvi70_broad"].copy()
#adata_subset.obs["annotation"]=adata_subset.obs["annotation"].astype('category')

adata_subset.obs["annotation"]=adata_subset.obs["annotation_post_scanvi70_broad"].copy()
adata_subset.obs["annotation"]=adata_subset.obs["annotation"].astype('category')
cell_type_order = adata_subset.obs["annotation"].cat.categories.tolist()

# Directly map categories to colors
colors_mapped = [cell_colors[cell_type] for cell_type in cell_type_order]

# Assign mapped colors to 'annotation_post_scanvi70_broad_colors' in the .uns slot
adata_subset.uns['annotation'] = colors_mapped

cell_type_order = adata_subset.obs["annotation"].cat.categories.tolist()

# Directly map categories to colors
colors_mapped = [cell_colors[cell_type] for cell_type in cell_type_order]

# Assign mapped colors to 'annotation_post_scanvi70_broad_colors' in the .uns slot
adata_subset.uns['annotation'] = colors_mapped

adata_subset.obs["fov"]=adata_subset.obs["fov"].astype(str)

plt.style.use('dark_background')
adata_list = [adata_subset]
for adata in adata_list:
    adata_name = adata.obs["fov"].unique().astype(str)
    for fov in adata.obs['fov'].unique():
        ax = sq.pl.spatial_segment(
            adata,
            color="immune_cell_update",
            library_key="fov",
            library_id=fov,
            seg_cell_id="cell_ID",
            seg_outline=True,
            img=False,
            title='',
            axis_label='',
            return_ax=True,
            frameon=False,
            vmax = 1.3,
            vmin = 0,
            colorbar=False,
            cmap='plasma'
        )

        # Set the visibility of the spines to False
        for spine in ax.spines.values():
            spine.set_visible(False)

        # Remove the legend, if present
        if ax.get_legend():
            ax.get_legend().remove()

        # Corrected filename construction with string formatting
        filename = f'/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/Immune_TLO/Penumbra_TLO/Pictures/immune_cell_update_{fov}_HK2695.png'

        # When saving, also specify the bbox_inches parameter to eliminate any extra white space
        plt.savefig(filename, dpi=900, bbox_inches='tight', pad_inches=0)
        plt.show()

adata_subset.obs['fov']=adata_subset.obs['fov'].astype(str)

# Create a new column where everything except 'Fibroblast ME 3' is labeled 'outlier'
adata_subset.obs['iTAL_subcluster_ME_20um_ME1'] = adata_subset.obs['iTAL_subcluster_ME_20um'].apply(
    lambda x: x if x == 'iTAL ME 1' else 'outlier'
)
# Create a new column where everything except 'Fibroblast ME 3' is labeled 'outlier'
adata_subset.obs['iPT_subcluster_ME_20um_ME4'] = adata_subset.obs['iPT_subcluster_ME_20um'].apply(
    lambda x: x if x == 'iPT ME 4' else 'outlier'
)
# Create a new column where everything except 'Fibroblast ME 3' is labeled 'outlier'
adata_subset.obs['immune_subcluster_ME_20um_ME3'] = adata_subset.obs['immune_subcluster_ME_20um'].apply(
    lambda x: x if x == 'Immune ME 3' else 'outlier'
)
# Create a new column where everything except 'Fibroblast ME 3' is labeled 'outlier'
adata_subset.obs['immune_subcluster_ME_20um_ME4'] = adata_subset.obs['immune_subcluster_ME_20um'].apply(
    lambda x: x if x == 'Immune ME 4' else 'outlier'
)
# Create a new column where everything except 'Fibroblast ME 3' is labeled 'outlier'
adata_subset.obs['Fibroblast_subcluster_ME_20um_ME1'] = adata_subset.obs['Fibroblast_subcluster_ME_20um'].apply(
    lambda x: x if x == 'Fibroblast ME 1' else 'outlier'
)
# Create a new column where everything except 'Fibroblast ME 3' is labeled 'outlier'
adata_subset.obs['Fibroblast_subcluster_ME_20um_ME5'] = adata_subset.obs['Fibroblast_subcluster_ME_20um'].apply(
    lambda x: x if x == 'Fibroblast ME 5' else 'outlier'
)
# Create a new column where everything except 'Fibroblast ME 3' is labeled 'outlier'
adata_subset.obs['Fibroblast_subcluster_ME_20um_ME4'] = adata_subset.obs['Fibroblast_subcluster_ME_20um'].apply(
    lambda x: x if x == 'Fibroblast ME 4' else 'outlier'
)

sc.pl.umap(adata_subset, color = "iTAL_subcluster_ME_20um_ME1", palette=palette)
sc.pl.umap(adata_subset, color = "iPT_subcluster_ME_20um_ME4", palette=palette)
sc.pl.umap(adata_subset, color = "immune_subcluster_ME_20um_ME3", palette=palette)
sc.pl.umap(adata_subset, color = "immune_subcluster_ME_20um_ME4", palette=palette)
sc.pl.umap(adata_subset, color = "Fibroblast_subcluster_ME_20um_ME1", palette=palette)
sc.pl.umap(adata_subset, color = "Fibroblast_subcluster_ME_20um_ME5", palette=palette)
sc.pl.umap(adata_subset, color = "Fibroblast_subcluster_ME_20um_ME4", palette=palette)

plt.style.use('dark_background')
adata_list = [adata_subset]
for adata in adata_list:
    adata_name = adata.obs["fov"].unique().astype(str)
    for fov in adata.obs['fov'].unique():
        ax = sq.pl.spatial_segment(
            adata,
            color="iTAL_subcluster_ME_20um",
            library_key="fov",
            library_id=fov,
            seg_cell_id="cell_ID",
            seg_outline=True,
            img=False,
            title='',
            axis_label='',
            return_ax=True,
            frameon=False,
            vmax = 1.3,
            vmin = 0,
            colorbar=False,
            cmap='plasma'
        )

        # Set the visibility of the spines to False
        for spine in ax.spines.values():
            spine.set_visible(False)

        # Remove the legend, if present
        if ax.get_legend():
            ax.get_legend().remove()

        # Corrected filename construction with string formatting
        filename = f'/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/Figure_5_Fibro/iTAL_subcluster_ME_20um_{fov}_HK2695.png'

        # When saving, also specify the bbox_inches parameter to eliminate any extra white space
        plt.savefig(filename, dpi=450, bbox_inches='tight', pad_inches=0)
        plt.show()

plt.style.use('dark_background')
adata_list = [adata_subset]
for adata in adata_list:
    adata_name = adata.obs["fov"].unique().astype(str)
    for fov in adata.obs['fov'].unique():
        ax = sq.pl.spatial_segment(
            adata,
            color="immune_subcluster_ME_20um",
            library_key="fov",
            library_id=fov,
            seg_cell_id="cell_ID",
            seg_outline=True,
            img=False,
            title='',
            axis_label='',
            return_ax=True,
            frameon=False,
            vmax = 1.3,
            vmin = 0,
            colorbar=False,
            cmap='plasma'
        )

        # Set the visibility of the spines to False
        for spine in ax.spines.values():
            spine.set_visible(False)

        # Remove the legend, if present
        if ax.get_legend():
            ax.get_legend().remove()

        # Corrected filename construction with string formatting
        filename = f'/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/Figure_5_Fibro/immune_subcluster_ME_20um_{fov}_HK2695.png'

        # When saving, also specify the bbox_inches parameter to eliminate any extra white space
        plt.savefig(filename, dpi=450, bbox_inches='tight', pad_inches=0)
        plt.show()

## iTAL_subcluster_ME_20um_ME1
#iPT_subcluster_ME_20um_ME4
#immune_subcluster_ME_20um_ME3
#immune_subcluster_ME_20um_ME4
#Fibroblast_subcluster_ME_20um_ME1
#Fibroblast_subcluster_ME_20um_ME5
#Fibroblast_subcluster_ME_20um_ME4

plt.style.use('dark_background')
adata_list = [adata_subset]
for adata in adata_list:
    adata_name = adata.obs["fov"].unique().astype(str)
    for fov in adata.obs['fov'].unique():
        ax = sq.pl.spatial_segment(
            adata,
            color="iTAL_subcluster_ME_20um_ME1",
            library_key="fov",
            library_id=fov,
            seg_cell_id="cell_ID",
            seg_outline=True,
            img=False,
            title='',
            axis_label='',
            return_ax=True,
            frameon=False,
            vmax = 1.3,
            vmin = 0,
            colorbar=False,
            cmap='plasma'
        )

        # Set the visibility of the spines to False
        for spine in ax.spines.values():
            spine.set_visible(False)

        # Remove the legend, if present
        if ax.get_legend():
            ax.get_legend().remove()

        # Corrected filename construction with string formatting
        filename = f'/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/Figure_5_Fibro/iTAL_subcluster_ME_20um_ME1_{fov}_HK2695.png'

        # When saving, also specify the bbox_inches parameter to eliminate any extra white space
        plt.savefig(filename, dpi=450, bbox_inches='tight', pad_inches=0)
        plt.show()

## iTAL_subcluster_ME_20um_ME1
#iPT_subcluster_ME_20um_ME4
#immune_subcluster_ME_20um_ME3
#immune_subcluster_ME_20um_ME4
#Fibroblast_subcluster_ME_20um_ME1
#Fibroblast_subcluster_ME_20um_ME5
#Fibroblast_subcluster_ME_20um_ME4

plt.style.use('dark_background')
adata_list = [adata_subset]
for adata in adata_list:
    adata_name = adata.obs["fov"].unique().astype(str)
    for fov in adata.obs['fov'].unique():
        ax = sq.pl.spatial_segment(
            adata,
            color="iPT_subcluster_ME_20um_ME4",
            library_key="fov",
            library_id=fov,
            seg_cell_id="cell_ID",
            seg_outline=True,
            img=False,
            title='',
            axis_label='',
            return_ax=True,
            frameon=False,
            vmax = 1.3,
            vmin = 0,
            colorbar=False,
            cmap='plasma'
        )

        # Set the visibility of the spines to False
        for spine in ax.spines.values():
            spine.set_visible(False)

        # Remove the legend, if present
        if ax.get_legend():
            ax.get_legend().remove()

        # Corrected filename construction with string formatting
        filename = f'/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/Figure_5_Fibro/iPT_subcluster_ME_20um_ME4_{fov}_HK2695.png'

        # When saving, also specify the bbox_inches parameter to eliminate any extra white space
        plt.savefig(filename, dpi=450, bbox_inches='tight', pad_inches=0)
        plt.show()

## iTAL_subcluster_ME_20um_ME1
#iPT_subcluster_ME_20um_ME4
#immune_subcluster_ME_20um_ME3
#immune_subcluster_ME_20um_ME4
#Fibroblast_subcluster_ME_20um_ME1
#Fibroblast_subcluster_ME_20um_ME5
#Fibroblast_subcluster_ME_20um_ME4

plt.style.use('dark_background')
adata_list = [adata_subset]
for adata in adata_list:
    adata_name = adata.obs["fov"].unique().astype(str)
    for fov in adata.obs['fov'].unique():
        ax = sq.pl.spatial_segment(
            adata,
            color="immune_subcluster_ME_20um_ME3",
            library_key="fov",
            library_id=fov,
            seg_cell_id="cell_ID",
            seg_outline=True,
            img=False,
            title='',
            axis_label='',
            return_ax=True,
            frameon=False,
            vmax = 1.3,
            vmin = 0,
            colorbar=False,
            cmap='plasma'
        )

        # Set the visibility of the spines to False
        for spine in ax.spines.values():
            spine.set_visible(False)

        # Remove the legend, if present
        if ax.get_legend():
            ax.get_legend().remove()

        # Corrected filename construction with string formatting
        filename = f'/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/Figure_5_Fibro/immune_subcluster_ME_20um_ME3_{fov}_HK2695.png'

        # When saving, also specify the bbox_inches parameter to eliminate any extra white space
        plt.savefig(filename, dpi=450, bbox_inches='tight', pad_inches=0)
        plt.show()

## iTAL_subcluster_ME_20um_ME1
#iPT_subcluster_ME_20um_ME4
#immune_subcluster_ME_20um_ME3
#immune_subcluster_ME_20um_ME4
#Fibroblast_subcluster_ME_20um_ME1
#Fibroblast_subcluster_ME_20um_ME5
#Fibroblast_subcluster_ME_20um_ME4

plt.style.use('dark_background')
adata_list = [adata_subset]
for adata in adata_list:
    adata_name = adata.obs["fov"].unique().astype(str)
    for fov in adata.obs['fov'].unique():
        ax = sq.pl.spatial_segment(
            adata,
            color="immune_subcluster_ME_20um_ME4",
            library_key="fov",
            library_id=fov,
            seg_cell_id="cell_ID",
            seg_outline=True,
            img=False,
            title='',
            axis_label='',
            return_ax=True,
            frameon=False,
            vmax = 1.3,
            vmin = 0,
            colorbar=False,
            cmap='plasma'
        )

        # Set the visibility of the spines to False
        for spine in ax.spines.values():
            spine.set_visible(False)

        # Remove the legend, if present
        if ax.get_legend():
            ax.get_legend().remove()

        # Corrected filename construction with string formatting
        filename = f'/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/Figure_5_Fibro/immune_subcluster_ME_20um_ME4_{fov}_HK2695.png'

        # When saving, also specify the bbox_inches parameter to eliminate any extra white space
        plt.savefig(filename, dpi=450, bbox_inches='tight', pad_inches=0)
        plt.show()

## iTAL_subcluster_ME_20um_ME1
#iPT_subcluster_ME_20um_ME4
#immune_subcluster_ME_20um_ME3
#immune_subcluster_ME_20um_ME4
#Fibroblast_subcluster_ME_20um_ME1
#Fibroblast_subcluster_ME_20um_ME5
#Fibroblast_subcluster_ME_20um_ME4

plt.style.use('dark_background')
adata_list = [adata_subset]
for adata in adata_list:
    adata_name = adata.obs["fov"].unique().astype(str)
    for fov in adata.obs['fov'].unique():
        ax = sq.pl.spatial_segment(
            adata,
            color="Fibroblast_subcluster_ME_20um_ME1",
            library_key="fov",
            library_id=fov,
            seg_cell_id="cell_ID",
            seg_outline=True,
            img=False,
            title='',
            axis_label='',
            return_ax=True,
            frameon=False,
            vmax = 1.3,
            vmin = 0,
            colorbar=False,
            cmap='plasma'
        )

        # Set the visibility of the spines to False
        for spine in ax.spines.values():
            spine.set_visible(False)

        # Remove the legend, if present
        if ax.get_legend():
            ax.get_legend().remove()

        # Corrected filename construction with string formatting
        filename = f'/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/Figure_5_Fibro/Fibroblast_subcluster_ME_20um_ME1_{fov}_HK2695.png'

        # When saving, also specify the bbox_inches parameter to eliminate any extra white space
        plt.savefig(filename, dpi=450, bbox_inches='tight', pad_inches=0)
        plt.show()

## iTAL_subcluster_ME_20um_ME1
#iPT_subcluster_ME_20um_ME4
#immune_subcluster_ME_20um_ME3
#immune_subcluster_ME_20um_ME4
#Fibroblast_subcluster_ME_20um_ME1
#Fibroblast_subcluster_ME_20um_ME5
#Fibroblast_subcluster_ME_20um_ME4

plt.style.use('dark_background')
adata_list = [adata_subset]
for adata in adata_list:
    adata_name = adata.obs["fov"].unique().astype(str)
    for fov in adata.obs['fov'].unique():
        ax = sq.pl.spatial_segment(
            adata,
            color="Fibroblast_subcluster_ME_20um_ME5",
            library_key="fov",
            library_id=fov,
            seg_cell_id="cell_ID",
            seg_outline=True,
            img=False,
            title='',
            axis_label='',
            return_ax=True,
            frameon=False,
            vmax = 1.3,
            vmin = 0,
            colorbar=False,
            cmap='plasma'
        )

        # Set the visibility of the spines to False
        for spine in ax.spines.values():
            spine.set_visible(False)

        # Remove the legend, if present
        if ax.get_legend():
            ax.get_legend().remove()

        # Corrected filename construction with string formatting
        filename = f'/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/Figure_5_Fibro/Fibroblast_subcluster_ME_20um_ME5_{fov}_HK2695.png'

        # When saving, also specify the bbox_inches parameter to eliminate any extra white space
        plt.savefig(filename, dpi=450, bbox_inches='tight', pad_inches=0)
        plt.show()

## iTAL_subcluster_ME_20um_ME1
#iPT_subcluster_ME_20um_ME4
#immune_subcluster_ME_20um_ME3
#immune_subcluster_ME_20um_ME4
#Fibroblast_subcluster_ME_20um_ME1
#Fibroblast_subcluster_ME_20um_ME5
#Fibroblast_subcluster_ME_20um_ME4

plt.style.use('dark_background')
adata_list = [adata_subset]
for adata in adata_list:
    adata_name = adata.obs["fov"].unique().astype(str)
    for fov in adata.obs['fov'].unique():
        ax = sq.pl.spatial_segment(
            adata,
            color="Fibroblast_subcluster_ME_20um_ME4",
            library_key="fov",
            library_id=fov,
            seg_cell_id="cell_ID",
            seg_outline=True,
            img=False,
            title='',
            axis_label='',
            return_ax=True,
            frameon=False,
            vmax = 1.3,
            vmin = 0,
            colorbar=False,
            cmap='plasma'
        )

        # Set the visibility of the spines to False
        for spine in ax.spines.values():
            spine.set_visible(False)

        # Remove the legend, if present
        if ax.get_legend():
            ax.get_legend().remove()

        # Corrected filename construction with string formatting
        filename = f'/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/Figure_5_Fibro/Fibroblast_subcluster_ME_20um_ME4_{fov}_HK2695.png'

        # When saving, also specify the bbox_inches parameter to eliminate any extra white space
        plt.savefig(filename, dpi=450, bbox_inches='tight', pad_inches=0)
        plt.show()

plt.style.use('dark_background')
adata_list = [adata_subset]
for adata in adata_list:
    adata_name = adata.obs["fov"].unique().astype(str)
    for fov in adata.obs['fov'].unique():
        ax = sq.pl.spatial_segment(
            adata,
            color="Fibroblast_subcluster_ME_20um",
            library_key="fov",
            library_id=fov,
            seg_cell_id="cell_ID",
            seg_outline=True,
            img=False,
            title='',
            axis_label='',
            return_ax=True,
            frameon=False,
            vmax = 1.3,
            vmin = 0,
            colorbar=False,
            cmap='plasma'
        )

        # Set the visibility of the spines to False
        for spine in ax.spines.values():
            spine.set_visible(False)

        # Remove the legend, if present
        if ax.get_legend():
            ax.get_legend().remove()

        # Corrected filename construction with string formatting
        filename = f'/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/Figure_5_Fibro/immune_subcluster_ME_20um_{fov}_HK2695.png'

        # When saving, also specify the bbox_inches parameter to eliminate any extra white space
        plt.savefig(filename, dpi=450, bbox_inches='tight', pad_inches=0)
        plt.show()

adata_subset.obs['fov']=adata_subset.obs['fov'].astype(str)

print(adata_subset.obs['immune_subcluster_ME'])

['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd',  ]

color_dict = {
    'outlier': '#A9A9A9',   # Dark Grey
    'Immune ME 1': '#1f77b4',  # Blue
    'Immune ME 2': '#ff7f0e',  # Orange
    'Immune ME 3': '#2ca02c',  # Green
    'Immune ME 4': '#d62728',   # Red
    'Immune ME 5':'#e377c2',
    'Immune ME 6':'#8c564b',
}

print(color_dict)

sc.pl.umap(adata_subset, color = "immune_subcluster_ME", palette=color_dict)

plt.style.use('dark_background')
adata_list = [adata_subset]
for adata in adata_list:
    adata_name = adata.obs["fov"].unique().astype(str)
    for fov in adata.obs['fov'].unique():
        ax = sq.pl.spatial_segment(
            adata,
            color="immune_subcluster_ME",
            library_key="fov",
            library_id=fov,
            seg_cell_id="cell_ID",
            seg_outline=True,
            img=False,
            title='',
            axis_label='',
            return_ax=True,
            frameon=False,
            vmax = 1.3,
            vmin = 0,
            colorbar=False,
            cmap='plasma'
        )

        # Set the visibility of the spines to False
        for spine in ax.spines.values():
            spine.set_visible(False)

        # Remove the legend, if present
        if ax.get_legend():
            ax.get_legend().remove()

        # Corrected filename construction with string formatting
        filename = f'/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/Immune_TLO/Penumbra_TLO/Pictures/immune_cell_ME_{fov}_HK2695.png'

        # When saving, also specify the bbox_inches parameter to eliminate any extra white space
        plt.savefig(filename, dpi=450, bbox_inches='tight', pad_inches=0)
        plt.show()

adata_subset.obs['iTAL_subcluster_ME_20um'].value_counts()

color_dict = {
    'outlier': '#A9A9A9',  # Dark Grey
    'iTAL ME 1': '#FFB6C1',  # Pastel Red
    'iTAL ME 2': '#87CEFA',  # Light Blue
    'iTAL ME 3': '#98FB98',  # Light Green
    'iTAL ME 4': '#FFD700'  # Gold
}

adata_subset

print(adata_subset.uns['immune_subcluster_ME_colors'])

sc.pl.umap(adata_subset, color = "iTAL_subcluster_ME_20um", palette=color_dict)

plt.style.use('dark_background')
adata_list = [adata_subset]
for adata in adata_list:
    adata_name = adata.obs["fov"].unique().astype(str)
    for fov in adata.obs['fov'].unique():
        ax = sq.pl.spatial_segment(
            adata,
            color="iTAL_subcluster_ME_20um",
            library_key="fov",
            library_id=fov,
            seg_cell_id="cell_ID",
            seg_outline=True,
            img=False,
            title='',
            axis_label='',
            return_ax=True,
            frameon=False,
            vmax = 1.3,
            vmin = 0,
            colorbar=False,
            cmap='plasma'
        )

        # Set the visibility of the spines to False
        for spine in ax.spines.values():
            spine.set_visible(False)

        # Remove the legend, if present
        if ax.get_legend():
            ax.get_legend().remove()

        # Corrected filename construction with string formatting
        filename = f'/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/Immune_TLO/Penumbra_TLO/Pictures/iTAL_ME_{fov}_HK2695.png'

        # When saving, also specify the bbox_inches parameter to eliminate any extra white space
        plt.savefig(filename, dpi=450, bbox_inches='tight', pad_inches=0)
        plt.show()

adata_subset.obs['CenterX_global_px']

import numpy as np

# Center coordinates of the ellipse in pixels
x0 = 54400
y0 = 113500

# Conversion factor from pixels to microns
px_to_microns = 0.12

# Convert center coordinates from pixels to microns
x0_microns = x0 * px_to_microns
y0_microns = y0 * px_to_microns

# Convert cell coordinates from pixels to microns
x_microns = adata_subset.obs['CenterX_global_px'] * px_to_microns
y_microns = adata_subset.obs['CenterY_global_px'] * px_to_microns

# Calculate Euclidean distance from each cell to the center of the ellipse in microns
adata_subset.obs['distance_to_center_microns'] = np.sqrt((x_microns - x0_microns) ** 2 + (y_microns - y0_microns) ** 2)

# Find the minimum distance for the entire dataset
min_distance_to_center = adata_subset.obs['distance_to_center_microns'].min()

print("Minimum distance from any cell to the center of the ellipse in microns:", min_distance_to_center)

max_distance_to_center = adata_subset.obs['distance_to_center_microns'].max()

print("Max distance from any cell to the center of the ellipse in microns:", max_distance_to_center)

adata_subset.obs['distance_to_center_microns_inverse']=-adata_subset.obs['distance_to_center_microns']

print(adata_subset.obs['distance_to_center_microns_inverse'])



plt.style.use('dark_background')
adata_list = [adata_subset]
for adata in adata_list:
    adata_name = adata.obs["fov"].unique().astype(str)
    for fov in adata.obs['fov'].unique():
        ax = sq.pl.spatial_segment(
            adata,
            color="distance_to_center_microns_inverse",
            library_key="fov",
            library_id=fov,
            seg_cell_id="cell_ID",
            seg_outline=True,
            img=False,
            title='',
            axis_label='',
            return_ax=True,
            frameon=False,
            vmax = 0,
            vmin = -1200,
            colorbar=False,
            cmap='plasma'
        )

        # Set the visibility of the spines to False
        for spine in ax.spines.values():
            spine.set_visible(False)

        # Remove the legend, if present
        if ax.get_legend():
            ax.get_legend().remove()

        # Corrected filename construction with string formatting
        filename = f'/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/Immune_TLO/Penumbra_TLO/Pictures/distance_from_tlo_{fov}_HK2695.png'

        # When saving, also specify the bbox_inches parameter to eliminate any extra white space
        plt.savefig(filename, dpi=900, bbox_inches='tight', pad_inches=0)
        plt.show()













import matplotlib.pyplot as plt
import squidpy as sq

# Apply dark background style
plt.style.use('dark_background')

# Manually adjust the background color to be transparent for subsequent plots
plt.rcParams['figure.facecolor'] = 'none'  # For the figure background
plt.rcParams['axes.facecolor'] = 'none'  # For the axes background
plt.rcParams['savefig.facecolor'] = 'none'  # For the saved figures

adata_list = [adata_subset]
fov_include_2 = ['1','2','3','11','12','13','22','23','24']

for adata in adata_list:
    adata_name=adata.obs["fov"].unique().astype(str)
    for fov in adata.obs['fov'].unique():
        ax = sq.pl.spatial_segment(
            adata,
            color="immune_cell_update",
            library_key="fov",
            library_id=fov,
            seg_cell_id="cell_ID",
            seg_outline=True,
            img=False,
            title='',
            axis_label='',
            return_ax=True,
            frameon=False,
            vmax = 2,
            vmin = 0,
            na_color=(0.5,0.5,0.5,0.5),
            colorbar=False,
            cmap='plasma'
        )

        # Remove the legend, if present
        if ax.get_legend():
            ax.get_legend().remove()

        # Corrected filename construction with string formatting
        filename = f'/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/Immune_TLO/Penumbra_TLO/Pictures/immune_cell_update_{fov}_HK2695.png'
        plt.savefig(filename, dpi=900, transparent=True)
        plt.show()

import matplotlib.pyplot as plt
import squidpy as sq

# Apply dark background style
plt.style.use('dark_background')

# Manually adjust the background color to be transparent for subsequent plots
plt.rcParams['figure.facecolor'] = 'none'  # For the figure background
plt.rcParams['axes.facecolor'] = 'none'  # For the axes background
plt.rcParams['savefig.facecolor'] = 'none'  # For the saved figures

adata_list = [adata_subset]
fov_include_2 = ['1','2','3','11','12','13','22','23','24']

for adata in adata_list:
    adata_name=adata.obs["fov"].unique().astype(str)
    for fov in adata.obs['fov'].unique():
        ax = sq.pl.spatial_segment(
            adata,
            color="immune_organization_score",
            library_key="fov",
            library_id=fov,
            seg_cell_id="cell_ID",
            seg_outline=True,
            img=False,
            title='',
            axis_label='',
            return_ax=True,
            frameon=False,
            vmax = 2,
            vmin = 0,
            colorbar=False,
            cmap='plasma'
        )

        # Remove the legend, if present
        if ax.get_legend():
            ax.get_legend().remove()

        # Corrected filename construction with string formatting
        filename = f'/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/Immune_TLO/Penumbra_TLO/Pictures/immune_organization_{fov}_HK2695.png'
        plt.savefig(filename, dpi=900, transparent=True)
        plt.show()

import matplotlib.pyplot as plt
import squidpy as sq

# Apply dark background style
plt.style.use('dark_background')

# Manually adjust the background color to be transparent for subsequent plots
plt.rcParams['figure.facecolor'] = 'none'  # For the figure background
plt.rcParams['axes.facecolor'] = 'none'  # For the axes background
plt.rcParams['savefig.facecolor'] = 'none'  # For the saved figures

adata_list = [adata_subset]
fov_include_2 = ['1','2','3','11','12','13','22','23','24']

for adata in adata_list:
    adata_name=adata.obs["fov"].unique().astype(str)
    for fov in adata.obs['fov'].unique():
        ax = sq.pl.spatial_segment(
            adata,
            color="distance_to_center_microns_inverse",
            library_key="fov",
            library_id=fov,
            seg_cell_id="cell_ID",
            seg_outline=True,
            img=False,
            title='',
            axis_label='',
            return_ax=True,
            frameon=False,
            cmap='plasma',
            vmax = 0,
            vmin = -1200,
            #na_color=(0.2000000000001, 0.2000000000001, 0.2000000000001),
            scalebar_dx=0.12,
            scalebar_kwargs={"scale_loc": "bottom", "location": "upper right"},
        )

        # Remove the legend, if present
        if ax.get_legend():
            ax.get_legend().remove()

        # Corrected filename construction with string formatting
        filename = f'scale.png'
        plt.savefig(filename, dpi=900, transparent=True)
        plt.show()



adata_subset.obs["fov"]=adata_subset.obs["fov"].astype(str)

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import squidpy as sq

# %config InlineBackend.figure_format='retina'
plt.style.use('dark_background')

# Create your spatial segment plot
ax = sq.pl.spatial_segment(
    adata_subset,
    color="immune_coarse",
    library_key="fov",
    library_id=['1'],
    seg_cell_id="cell_ID",
    seg_outline=True,
    img=False,
    scalebar_dx=0.12,
    scalebar_kwargs={"scale_loc": "bottom", "location": "upper right"},
    legend_fontsize='small',
    return_ax=True
)

# Adjust the current figure to make space for the legend below
plt.gcf().subplots_adjust(bottom=1.2)  # You may need to adjust this value

# Get the handles and labels from the plot
handles, labels = ax.get_legend_handles_labels()

# Create the legend under the plot
ax.legend(handles, labels, loc='upper center', bbox_to_anchor=(0.5, -0.05),
          fancybox=True, shadow=True, ncol=4, frameon=False)  # Adjust ncol as needed
plt.savefig('TLO_legend_immune.png', dpi=600)
plt.show()

sc.pp.normalize_total(adata_subset, inplace=True)
sc.pp.log1p(adata_subset)

from scipy.sparse import issparse
markers = ["LTB"]
markers = [gene for gene in markers if gene in adata_subset.var_names]

# Subset the .X matrix for the markers and convert to a DataFrame
gene_expression_df = pd.DataFrame(
    adata_subset[:, markers].X.toarray() if issparse(adata_subset.X) else adata_subset[:, markers].X,
    index=adata_subset.obs_names,
    columns=markers
)
print(gene_expression_df.head(20))

from sklearn.preprocessing import MinMaxScaler

# Initialize the MinMaxScaler with the desired feature range
scaler = MinMaxScaler(feature_range=(0, 1))

# Select the 'PC' column and scale it
# Note: .values.reshape(-1, 1) converts it from 1D array to 2D array as expected by the scaler
pc_scaled = scaler.fit_transform(gene_expression_df[['LTB']].values.reshape(-1, 1))

# Replace the original 'PC' column with the scaled values
gene_expression_df['LTB_scaled'] = pc_scaled.flatten()
print(gene_expression_df.head(20))

adata_subset.obs["LTB_scaled"]=gene_expression_df['LTB_scaled']

adata_subset.obs["fov"]=adata_subset.obs["fov"].astype(str)

TNFSF13B_scaled

import matplotlib.pyplot as plt
import squidpy as sq

# Apply dark background style
plt.style.use('dark_background')

# Manually adjust the background color to be transparent for subsequent plots
plt.rcParams['figure.facecolor'] = 'none'  # For the figure background
plt.rcParams['axes.facecolor'] = 'none'  # For the axes background
plt.rcParams['savefig.facecolor'] = 'none'  # For the saved figures

adata_list = [adata_subset]
fov_include_2 = ['1','2','3','11','12','13','22','23','24']

for adata in adata_list:
    adata_name=adata.obs["fov"].unique().astype(str)
    for fov in adata.obs['fov'].unique():
        ax = sq.pl.spatial_segment(
            adata,
            color="TNFSF13B_scaled",
            library_key="fov",
            library_id=fov,
            seg_cell_id="cell_ID",
            seg_outline=True,
            img=False,
            title='',
            axis_label='',
            return_ax=True,
            frameon=False,
            na_color=(0.2000000000001, 0.2000000000001, 0.2000000000001),
            cmap='plasma',
            colorbar=False,

        )

        # Remove the legend, if present
        if ax.get_legend():
            ax.get_legend().remove()

        # Corrected filename construction with string formatting
        filename = f'/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/Immune_TLO/Penumbra_TLO/Pictures/TNFSF13B_{fov}_HK2695.png'
        plt.savefig(filename, dpi=900, transparent=True)
        plt.show()

import matplotlib.pyplot as plt
import squidpy as sq

# Apply dark background style
plt.style.use('dark_background')

# Manually adjust the background color to be transparent for subsequent plots
plt.rcParams['figure.facecolor'] = 'none'  # For the figure background
plt.rcParams['axes.facecolor'] = 'none'  # For the axes background
plt.rcParams['savefig.facecolor'] = 'none'  # For the saved figures

adata_list = [adata_subset]
fov_include_2 = ['1','2','3','11','12','13','22','23','24']

for adata in adata_list:
    adata_name=adata.obs["fov"].unique().astype(str)
    for fov in adata.obs['fov'].unique():
        ax = sq.pl.spatial_segment(
            adata,
            color="TNFRSF13C_scaled",
            library_key="fov",
            library_id=fov,
            seg_cell_id="cell_ID",
            seg_outline=True,
            img=False,
            title='',
            axis_label='',
            return_ax=True,
            frameon=False,
            na_color=(0.2000000000001, 0.2000000000001, 0.2000000000001),
            cmap='plasma',
            colorbar=False,

        )

        # Remove the legend, if present
        if ax.get_legend():
            ax.get_legend().remove()

        # Corrected filename construction with string formatting
        filename = f'/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/Immune_TLO/Penumbra_TLO/Pictures/TNFRSF13C_{fov}_HK2695.png'
        plt.savefig(filename, dpi=900, transparent=True)
        plt.show()

from scipy.sparse import issparse
markers = ["CCL21"]
markers = [gene for gene in markers if gene in adata_subset.var_names]

# Subset the .X matrix for the markers and convert to a DataFrame
gene_expression_df = pd.DataFrame(
    adata_subset[:, markers].X.toarray() if issparse(adata_subset.X) else adata_subset[:, markers].X,
    index=adata_subset.obs_names,
    columns=markers
)
print(gene_expression_df.head(20))

from sklearn.preprocessing import MinMaxScaler

# Initialize the MinMaxScaler with the desired feature range
scaler = MinMaxScaler(feature_range=(0, 1))

# Select the 'PC' column and scale it
# Note: .values.reshape(-1, 1) converts it from 1D array to 2D array as expected by the scaler
pc_scaled = scaler.fit_transform(gene_expression_df[['CCL21']].values.reshape(-1, 1))

# Replace the original 'PC' column with the scaled values
gene_expression_df['CCL21_scaled'] = pc_scaled.flatten()
print(gene_expression_df.head(20))

adata_subset.obs["CCL21_scaled"]=gene_expression_df['CCL21_scaled']

import matplotlib.pyplot as plt
import squidpy as sq

# Apply dark background style
plt.style.use('dark_background')

# Manually adjust the background color to be transparent for subsequent plots
plt.rcParams['figure.facecolor'] = 'none'  # For the figure background
plt.rcParams['axes.facecolor'] = 'none'  # For the axes background
plt.rcParams['savefig.facecolor'] = 'none'  # For the saved figures

adata_list = [adata_subset]
fov_include_2 = ['1','2','3','11','12','13','22','23','24']

for adata in adata_list:
    adata_name=adata.obs["fov"].unique().astype(str)
    for fov in adata.obs['fov'].unique():
        ax = sq.pl.spatial_segment(
            adata,
            color="CCL21_scaled",
            library_key="fov",
            library_id=fov,
            seg_cell_id="cell_ID",
            seg_outline=True,
            img=False,
            title='',
            axis_label='',
            return_ax=True,
            frameon=False,
            na_color=(0.2000000000001, 0.2000000000001, 0.2000000000001),
            cmap='plasma',
            colorbar=False,

        )

        # Remove the legend, if present
        if ax.get_legend():
            ax.get_legend().remove()

        # Corrected filename construction with string formatting
        filename = f'/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/Immune_TLO/Penumbra_TLO/Pictures/CCL21_{fov}_HK2695.png'
        plt.savefig(filename, dpi=900, transparent=True)
        plt.show()





import matplotlib.pyplot as plt
import squidpy as sq
import gc

# Apply dark background style
plt.style.use('dark_background')

# Manually adjust the background color to be transparent for subsequent plots
plt.rcParams['figure.facecolor'] = 'none'  # For the figure background
plt.rcParams['axes.facecolor'] = 'none'  # For the axes background
plt.rcParams['savefig.facecolor'] = 'none'  # For the saved figures


for library_id in adata_subset.obs["fov"].unique():
    print(library_id)
    ax = sq.pl.spatial_segment(
        adata_subset,
        color="CCL19_scaled",
        library_key="fov",
        library_id=[library_id],
        seg_cell_id="cell_ID",
        seg_outline=True,
        img=False,
        title='',
        axis_label='',
        return_ax=True,
        frameon=False,
        na_color=(0.2000000000001, 0.2000000000001, 0.2000000000001),
        cmap='plasma',
        colorbar=False
    )

    # Remove the legend, if present
    if ax.get_legend():
        ax.get_legend().remove()
    plt.savefig(f'/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/Spatial_Neighborhoods/ACSM2B_scaled_{library_id}', dpi=600)
    plt.show()
    gc.collect()



adata_subset.obs["fov"]

