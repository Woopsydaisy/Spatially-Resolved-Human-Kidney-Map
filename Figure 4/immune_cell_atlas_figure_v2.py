# -*- coding: utf-8 -*-
"""Immune Cell Atlas Figure V2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1keHcvwp1HvEoENOMaaDyoJQM8JooHN1l
"""

!pip install --quiet scanpy
!pip install --quiet leidenalg

import csv
import anndata as ad
import gzip
import os
import scipy.io
import scanpy as sc
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import drive
import leidenalg as la
from pathlib import Path

from google.colab import drive
drive.mount('/content/drive')

"""this is just for mapping the annotations back in the original cosmx object"""

adata=sc.read_h5ad('/content/drive/MyDrive/Bernhard/Immune_Cell_Atlas/Immune_Cell_Atlas_final.h5ad')

sc.pl.umap(adata, color = "annotations_after_scanvi")

adata.obs['annotations_after_scanvi'].value_counts()

##cytotox B has expression of T and B Cell markers, probably doublets
adata=adata[adata.obs["annotations_after_scanvi"]!="cytotox B"]
adata

adata.obs['annotations_after_scanvi'].value_counts()

cell_colors = {
    'PC': (0.12156862745098039, 0.4666666666666667, 0.7058823529411765),
    'CNT': (0.6823529411764706, 0.7803921568627451, 0.9098039215686274),
    'DCT': (1.0, 0.4980392156862745, 0.054901960784313725),
    'DTL_ATL': (1.0, 0.7333333333333333, 0.47058823529411764),
    'EC_DVR': (0.17254901960784313, 0.6274509803921569, 0.17254901960784313),
    'EC_Peritub': (0.596078431372549, 0.8745098039215686, 0.5411764705882353),
    'EC_glom': (0.8392156862745098, 0.15294117647058825, 0.1568627450980392),
    'IC A': (1.0, 0.596078431372549, 0.5882352941176471),
    'IC B': (0.5803921568627451, 0.403921568627451, 0.7411764705882353),
    'Immune': (0.7725490196078432, 0.6901960784313725, 0.8352941176470589),
    'Podo': (0.5490196078431373, 0.33725490196078434, 0.29411764705882354),
    'Fibroblast': (0.7686274509803922, 0.611764705882353, 0.5803921568627451),
    'PEC': (0.8901960784313725, 0.4666666666666667, 0.7607843137254902),
    'PT': (0.9686274509803922, 0.7137254901960784, 0.8235294117647058),
    'MC1': (0.4980392156862745, 0.4980392156862745, 0.4980392156862745),
    'iPT': (0.7803921568627451, 0.7803921568627451, 0.7803921568627451),
    'iTAL': (0.8588235294117647, 0.8588235294117647, 0.5529411764705883),
    'TAL': (0.09019607843137255, 0.7450980392156863, 0.8117647058823529),
    'VSMC': (0.6196078431372549, 0.8549019607843137, 0.8980392156862745),
    'CD4+': (0.5529411764705883, 0.8274509803921568, 0.7803921568627451),
    'Baso/Mast': (0.2235, 0.2314, 0.4745),
    'B': (0.7450980392156863, 0.7294117647058823, 0.8549019607843137),
    'CD8+ I': (0.6784, 0.2863, 0.2902),
    'Macro II': (0.9921568627450981, 0.7058823529411765, 0.3843137254901961),
    'Neutro': (0.9882352941176471, 0.803921568627451, 0.8980392156862745),
    'Macro I': (0.3, 0.3, 0.3),
    'NK': (0.7372549019607844, 0.5019607843137255, 0.7411764705882353),
    'cDC': (0.9176470588235294, 0.5019607843137255, 0.23529411764705882),
    'mDC': (0.34509803921568627, 0.33725490196078434, 0.6745098039215687),
    'pDC': (0.6509803921568628, 0.4627450980392157, 0.11372549019607843),
    'Macro III': (0.9294117647058824, 0.6941176470588235, 0.12549019607843137),
    'Macro IV': (0.41568627450980394, 0.23921568627450981, 0.6039215686274509),
    'cycling Lymphocytes': (0.8, 0.47058823529411764, 0.7372549019607844),
    'CD8+ II': (0.9921568627450981, 0.7529411764705882, 0.5254901960784314),
    'Plasma': (0.2196078431372549, 0.4235294117647059, 0.6901960784313725),
    #'cytotox B': (0.4, 0.7607843137254902, 0.6470588235294118)
    }

#order = ['Baso/Mast', 'M2', 'Macro','Neutrophil',  'mDC', 'pDC', 'cDC', 'B',  'Plasma', 'CD4+', 'CD8+ 1', 'CD8+ 2', 'NK']
cell_colors = {
    'Baso/Mast': (0.2235, 0.2314, 0.4745),
    'Macro I': (0.3, 0.3, 0.3),
    'Macro II': (0.9921568627450981, 0.7058823529411765, 0.3843137254901961),
    'Macro III': (0.9294117647058824, 0.6941176470588235, 0.12549019607843137),
    'Macro IV': (0.41568627450980394, 0.23921568627450981, 0.6039215686274509),
    'Neutro': (0.9882352941176471, 0.803921568627451, 0.8980392156862745),
    'cDC': (0.9176470588235294, 0.5019607843137255, 0.23529411764705882),
    'mDC': (0.34509803921568627, 0.33725490196078434, 0.6745098039215687),
    'pDC': (0.6509803921568628, 0.4627450980392157, 0.11372549019607843),
    'B': (0.7450980392156863, 0.7294117647058823, 0.8549019607843137),
    'Plasma': (0.2196078431372549, 0.4235294117647059, 0.6901960784313725),
    'CD4+': (0.5529411764705883, 0.8274509803921568, 0.7803921568627451),
    'CD8+ I': (0.6784, 0.2863, 0.2902),
    'CD8+ II': (0.9921568627450981, 0.7529411764705882, 0.5254901960784314),
    'NK': (0.7372549019607844, 0.5019607843137255, 0.7411764705882353),
    'Cycling': (0.8, 0.47058823529411764, 0.7372549019607844),
    #'cytotox B': (0.4, 0.7607843137254902, 0.6470588235294118)
    }

adata.obs['annotations_after_scanvi'].value_counts()
cell_identities = {'M2': 'Macro I', 'CD4+': 'CD4+', 'Macro': 'Macro II', 'CD16+ Mono': 'Macro IV', 'CD14+ Mono': 'Macro III',
                   'CD8+ 1': 'CD8+ I', 'CD8+ 2': 'CD8+ II', 'B': 'B', 'NK': 'NK', 'cDC': 'cDC', 'Neutrophil': 'Neutro',
                   'Plasma': 'Plasma', 'Baso/Mast': 'Baso/Mast', 'pDC': 'pDC', 'cycling Lymphocytes': 'Cycling',
                   'mDC':'mDC'}
adata.obs["annotations_after_scanvi_simple"] = adata.obs['annotations_after_scanvi'].map(cell_identities).astype('category')

sc.pl.umap(adata, color = "annotations_after_scanvi_simple",palette=cell_colors, frameon = False)
sc.pl.umap(adata, color = "annotations_after_scanvi_simple", legend_loc='on data', legend_fontsize=10, legend_fontoutline=2, frameon = False)

adata2=sc.read_h5ad('/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/all_Cosmx_cleaned_neighbored.h5ad')

adata2

desired_order = [
    "Pediatric1", "HK2753", "HK3039", "HK3106", "HK3531", "HK3531_2",
    "HK3063", "HK3542", "HK2874", "HK2695", "HK3035", "HK3035_2",
     "HK2841", "HK2873","HK2844", "HK2844_2"
]
obs_df2 = pd.DataFrame(adata2.obs[['sample', 'annotation_post_scanvi70_coarse']])
sample_counts_2 = obs_df2.groupby('sample').size()
sample_counts_2 = sample_counts_2.reindex(desired_order)
sample_counts_2

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import scanpy as sc
from matplotlib.colors import ListedColormap

desired_order = [
    "Pediatric1", "HK2753", "HK3039", "HK3106", "HK3531", "HK3531_2",
    "HK3063", "HK3542", "HK2874", "HK2695", "HK3035", "HK3035_2",
     "HK2841", "HK2873","HK2844", "HK2844_2"
]

# Create a figure with three subplots, stacked vertically
fig, axs = plt.subplots(3, 1, figsize=(7, 12))  # Adjust figure size as needed

# First subplot: UMAP
sc.pl.umap(adata, color="annotations_after_scanvi_simple", palette=cell_colors, ax=axs[0], show=False)
axs[0].set_title('UMAP')
axs[0].set_xlabel('')
axs[0].set_ylabel('')
axs[0].set_xticks([])
axs[0].set_yticks([])
for spine in axs[0].spines.values():
    spine.set_visible(True)
    spine.set_color('black')
axs[0].get_legend().remove()  # Remove the legend from the first subplot

obs_df = pd.DataFrame(adata.obs[['sample', 'annotations_after_scanvi_simple']])
sample_counts = obs_df.groupby('sample').size()
sample_counts = sample_counts.reindex(desired_order)

# Plot the adjusted counts as a bar graph in the second subplot
sample_counts.plot(kind='bar', color='black', ax=axs[1])
axs[1].set_title('Immune Cells per Sample')
axs[1].set_xlabel('')
axs[1].set_ylabel('')
axs[1].tick_params(axis='x', rotation=45)
axs[1].set_xticklabels([])  # This will remove the x-axis labels
axs[1].tick_params(axis='x', which='both', length=0)

# Second subplot (now third in order): Bar Plot for Celltype Composition
obs_df = pd.DataFrame(adata.obs[['sample', 'annotations_after_scanvi_simple']])
count_df = obs_df.groupby(['sample', 'annotations_after_scanvi_simple']).size().unstack(fill_value=0)
sample_totals = obs_df['sample'].value_counts()
sample_totals = sample_totals.reindex(desired_order)
normalized_count_df = count_df.div(sample_totals, axis='index')
normalized_count_df = normalized_count_df.reindex(desired_order)
colors = [cell_colors.get(x, '#333333') for x in normalized_count_df.columns]
normalized_count_df.plot(kind='bar', stacked=True, color=colors, ax=axs[2])
axs[2].set_title('Celltype Composition')
axs[2].set_xlabel('')
axs[2].set_ylabel('Proportion of Cells')
axs[2].tick_params(axis='x', rotation=45)
axs[2].get_legend().remove()  # Remove the legend from the third subplot
# Create the legend on the figure using the handles and labels from the UMAP plot
handles, labels = axs[0].get_legend_handles_labels()  # Assuming your UMAP plot is in the first axis
fig.legend(handles, labels, loc='center left', bbox_to_anchor=(1, 0.5), fontsize=12, frameon=False, markerscale=2)

# Adjust the layout of the figure to make space for the legend and ensure no overlap
plt.tight_layout(rect=[0, 0, 0.75, 1])  # Adjust the rect parameter as needed to fit the legend

# Save the plot
#plt.savefig('figure_with_three_plots.png', dpi=900, bbox_inches='tight')

# Show the plot
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import scanpy as sc
from matplotlib.colors import ListedColormap
from matplotlib import gridspec

desired_order = [
    "Pediatric1", "HK2753", "HK3039", "HK3106", "HK3531", "HK3531_2",
    "HK3063", "HK3542", "HK2874", "HK2695", "HK3035", "HK3035_2",
    "HK2841", "HK2873", "HK2844", "HK2844_2"
]
width_mm = 140  # Example for 7 inches
height_mm = 220  # Example for 9 inches
width_in = width_mm / 25.4
height_in = height_mm / 25.4
# Create a figure with a gridspec layout to control the vertical sizes of subplots
fig = plt.figure(figsize=(width_in, height_in), facecolor='#C6C6C6')  # Adjust figure size as needed
gs = gridspec.GridSpec(3, 1, height_ratios=[2.2, 0.9, 1.8])  # Adjust height ratios to control the subplot heights



# First subplot: UMAP
ax0 = plt.subplot(gs[0])
sc.pl.umap(adata, color="annotations_after_scanvi_simple", palette=cell_colors, ax=ax0, show=False)
ax0.set_title('')
ax0.set_xticks([])
ax0.set_yticks([])
for spine in ax0.spines.values():
    spine.set_visible(True)
    spine.set_color('black')
ax0.get_legend().remove()  # Remove the legend from the first subplot
ax0.set_facecolor('#C6C6C6')

# Second subplot: Immune Cells per Sample - Make it smaller in height
ax1 = plt.subplot(gs[1])
sample_counts = obs_df.groupby('sample').size().reindex(desired_order)
division_result = sample_counts/ sample_counts_2
division_result.plot(kind='bar', color='black', ax=ax1)
ax1.set_title('')
ax1.set_xlabel('')
ax1.set_ylabel('Immune Cell Fraction')
ax1.tick_params(axis='x', rotation=45)
ax1.set_xticklabels([])  # This will remove the x-axis labels
ax1.tick_params(axis='x', which='both', length=0)
ax1.tick_params(axis='x', rotation=90)
ax1.set_facecolor('#DADADA')
# Third subplot: Celltype Composition
ax2 = plt.subplot(gs[2])
count_df = obs_df.groupby(['sample', 'annotations_after_scanvi_simple']).size().unstack(fill_value=0)
sample_totals = obs_df['sample'].value_counts().reindex(desired_order)
normalized_count_df = count_df.div(sample_totals, axis='index').reindex(desired_order)
colors = [cell_colors.get(x, '#333333') for x in normalized_count_df.columns]
normalized_count_df.plot(kind='bar', stacked=True, color=colors, ax=ax2)
ax2.set_title('')
ax2.set_xlabel('')
ax2.set_ylabel('Proportion of Cells')
ax2.tick_params(axis='x', rotation=90)
ax2.get_legend().remove()  # Remove the legend from the third subplot
ax2.tick_params(axis='x', which='both', length=0)
ax2.set_xticklabels([])
ax2.set_facecolor('#DADADA')
# Create the legend on the figure using the handles and labels from the UMAP plot
handles, labels = ax0.get_legend_handles_labels()
#fig.legend(handles, labels, loc='center left', bbox_to_anchor=(1, 0.5), fontsize=12, frameon=False, markerscale=2)
# For the first subplot
ax0.spines['top'].set_visible(False)
ax0.spines['right'].set_visible(False)
# For the second subplot
ax1.spines['top'].set_visible(False)
ax1.spines['right'].set_visible(False)

# For the third subplot
ax2.spines['top'].set_visible(False)
ax2.spines['right'].set_visible(False)

# Adjust the layout of the figure to make space for the legend and ensure no overlap
plt.tight_layout(rect=[0, 0, 0.75, 1])

# Save the plot
plt.savefig('figure_with_three_plots.png', dpi=900, bbox_inches='tight',facecolor='#DADADA', edgecolor='#DADADA')

# Show the plot
plt.show()

cell_colors = {
    'Baso/Mast': (0.2235, 0.2314, 0.4745),
    'Macro I': (0.3, 0.3, 0.3),
    'Macro II': (0.9921568627450981, 0.7058823529411765, 0.3843137254901961),
    #'Macro III': (0.9294117647058824, 0.6941176470588235, 0.12549019607843137),
    #'Macro IV': (0.41568627450980394, 0.23921568627450981, 0.6039215686274509),
    'Neutro': (0.9882352941176471, 0.803921568627451, 0.8980392156862745),
    'cDC': (0.9176470588235294, 0.5019607843137255, 0.23529411764705882),
    'mDC': (0.34509803921568627, 0.33725490196078434, 0.6745098039215687),
    'pDC': (0.6509803921568628, 0.4627450980392157, 0.11372549019607843),
    'B': (0.7450980392156863, 0.7294117647058823, 0.8549019607843137),
    'Plasma': (0.2196078431372549, 0.4235294117647059, 0.6901960784313725),
    'CD4+': (0.5529411764705883, 0.8274509803921568, 0.7803921568627451),
    'CD8+ I': (0.6784, 0.2863, 0.2902),
    'CD8+ II': (0.9921568627450981, 0.7529411764705882, 0.5254901960784314),
    'NK': (0.7372549019607844, 0.5019607843137255, 0.7411764705882353),
    #'Cycling': (0.8, 0.47058823529411764, 0.7372549019607844),
    #'cytotox B': (0.4, 0.7607843137254902, 0.6470588235294118)
    }

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import scanpy as sc
from matplotlib.colors import ListedColormap

# Assuming 'obs_df' and 'cell_colors' are already defined as in your previous script

# Create a figure and axis for the plot
fig, ax2 = plt.subplots(figsize=(10, 6))  # Adjust figure size as needed

# Third subplot: Celltype Composition simplified as a standalone plot
count_df = obs_df.groupby(['sample', 'annotations_after_scanvi_simple']).size().unstack(fill_value=0)
sample_totals = obs_df['sample'].value_counts().reindex(desired_order)
normalized_count_df = count_df.div(sample_totals, axis='index').reindex(desired_order)
colors = [cell_colors.get(x, '#333333') for x in normalized_count_df.columns]
normalized_count_df.plot(kind='bar', stacked=True, color=colors, ax=ax2)
ax2.set_title('Proportion of Cells')  # You can add a title if you wish
ax2.set_xlabel('Sample')
ax2.set_ylabel('Proportion of Cells')
ax2.tick_params(axis='x', rotation=90)

# Handling legend
# Create a custom legend from the colors dictionary
import matplotlib.patches as mpatches
legend_patches = [mpatches.Patch(color=color, label=label) for label, color in cell_colors.items()]
ax2.legend(handles=legend_patches, title="", bbox_to_anchor=(1.05, 1), loc='upper left', frameon=False, ncol=4)

# Hide the top and right spines
ax2.spines['top'].set_visible(False)
ax2.spines['right'].set_visible(False)

plt.tight_layout()  # Adjust the layout

# Save the plot
plt.savefig('celltype_composition_cosmx.png', dpi=900, bbox_inches='tight')

# Show the plot
plt.show()

cell_colors = {
    'Baso/Mast': (0.2235, 0.2314, 0.4745),
    'Macro I': (0.3, 0.3, 0.3),
    'Macro II': (0.9921568627450981, 0.7058823529411765, 0.3843137254901961),
    #'Macro III': (0.9294117647058824, 0.6941176470588235, 0.12549019607843137),
    #'Macro IV': (0.41568627450980394, 0.23921568627450981, 0.6039215686274509),
    'Neutro': (0.9882352941176471, 0.803921568627451, 0.8980392156862745),
    'cDC': (0.9176470588235294, 0.5019607843137255, 0.23529411764705882),
    'mDC': (0.34509803921568627, 0.33725490196078434, 0.6745098039215687),
    'pDC': (0.6509803921568628, 0.4627450980392157, 0.11372549019607843),
    'B': (0.7450980392156863, 0.7294117647058823, 0.8549019607843137),
    'Plasma': (0.2196078431372549, 0.4235294117647059, 0.6901960784313725),
    'CD4+': (0.5529411764705883, 0.8274509803921568, 0.7803921568627451),
    'CD8+ I': (0.6784, 0.2863, 0.2902),
    'CD8+ II': (0.9921568627450981, 0.7529411764705882, 0.5254901960784314),
    'NK': (0.7372549019607844, 0.5019607843137255, 0.7411764705882353),
    #'Cycling': (0.8, 0.47058823529411764, 0.7372549019607844),
    #'cytotox B': (0.4, 0.7607843137254902, 0.6470588235294118)
    }

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import scanpy as sc
from matplotlib.colors import ListedColormap
import matplotlib.patches as mpatches

# Assuming 'obs_df' and 'cell_colors' are already defined as in your previous script

# Create a figure and axis for the plot
#fig, ax2 = plt.subplots(figsize=(10, 6))  # Adjust figure size as needed

fig, ax2 = plt.subplots(figsize=(10, 6))  # Adjust figure size as needed

# Third subplot: Celltype Composition simplified as a standalone plot
count_df = obs_df.groupby(['sample', 'annotations_after_scanvi_simple']).size().unstack(fill_value=0)
sample_totals = obs_df['sample'].value_counts().reindex(desired_order)
normalized_count_df = count_df.div(sample_totals, axis='index').reindex(desired_order)
colors = [cell_colors.get(x, '#333333') for x in normalized_count_df.columns]
normalized_count_df.plot(kind='bar', stacked=True, color=colors, ax=ax2)
ax2.set_title('Proportion of Cells')  # You can add a title if you wish
ax2.set_xlabel('Sample')
ax2.set_ylabel('Proportion of Cells')
ax2.tick_params(axis='x', rotation=90)


legend_patches = [mpatches.Patch(color=color, label=label) for label, color in cell_colors.items()]
legend = ax2.legend(handles=legend_patches, title="", bbox_to_anchor=(1.05, 1), loc='upper left', frameon=False, facecolor='white', ncol=4)

# Change the color of the text in the legend to white (or any other color you prefer)
for text in legend.get_texts():
    text.set_color('black')  # Change 'white' to any color that suits your needs

# Adjust the layout
plt.tight_layout()

# Save the plot with a transparent background
plt.savefig('celltype_composition.png', dpi=900,facecolor='#DADADA', edgecolor='#DADADA', bbox_inches='tight', transparent=False,)

# Show the plot
plt.show()

normalized_count_df

normalized_count_df

count_df

sample_counts

adata_2=sc.read_h5ad('/content/drive/MyDrive/Bernhard/Cosmx/SCVI/All_Runs/allCosmx_allGenes.h5ad')

cell_ids_adata1 = set(adata_2.obs_names)
cell_ids_adata2 = set(adata.obs_names)

# Compute the intersection of cell IDs
common_cell_ids = cell_ids_adata1.intersection(cell_ids_adata2)

# If you need the result as a list
common_cell_ids_list = list(common_cell_ids)
cosmx_all_counts=adata_2[common_cell_ids_list]

cosmx_all_counts

cosmx_all_counts.obs['annotations_after_scanvi_simple']=adata.obs['annotations_after_scanvi_simple']

cosmx_all_counts.obs['annotations_after_scanvi_simple'].value_counts()

cosmx_all_counts=cosmx_all_counts[cosmx_all_counts.obs['annotations_after_scanvi_simple']!='Macro IV']
cosmx_all_counts=cosmx_all_counts[cosmx_all_counts.obs['annotations_after_scanvi_simple']!='Macro III']
cosmx_all_counts=cosmx_all_counts[cosmx_all_counts.obs['annotations_after_scanvi_simple']!='Cycling']

'Baso/Mast': (0.2235, 0.2314, 0.4745),
    'Macro I': (0.3, 0.3, 0.3),
    'Macro II': (0.9921568627450981, 0.7058823529411765, 0.3843137254901961),
    'Macro III': (0.9294117647058824, 0.6941176470588235, 0.12549019607843137),
    'Macro IV': (0.41568627450980394, 0.23921568627450981, 0.6039215686274509),
    'Neutro': (0.9882352941176471, 0.803921568627451, 0.8980392156862745),
    'cDC': (0.9176470588235294, 0.5019607843137255, 0.23529411764705882),
    'mDC': (0.34509803921568627, 0.33725490196078434, 0.6745098039215687),
    'pDC': (0.6509803921568628, 0.4627450980392157, 0.11372549019607843),
    'B': (0.7450980392156863, 0.7294117647058823, 0.8549019607843137),
    'Plasma': (0.2196078431372549, 0.4235294117647059, 0.6901960784313725),
    'CD4+': (0.5529411764705883, 0.8274509803921568, 0.7803921568627451),
    'CD8+ I': (0.6784, 0.2863, 0.2902),
    'CD8+ II': (0.9921568627450981, 0.7529411764705882, 0.5254901960784314),
    'NK': (0.7372549019607844, 0.5019607843137255, 0.7411764705882353),

order = ['Baso/Mast', 'Macro I', 'Macro II','Neutro',  'cDC', 'mDC', 'pDC', 'B',  'Plasma', 'CD4+', 'CD8+ I', 'CD8+ II', 'NK']


# Define your markers
markers = ["CPA3", "KIT", "HPGDS", "CD163", "MRC1", "C1QC","C1QA","C1QB","IFITM3","CXCL10", "SAT1",  "COTL1", "LYZ", "S100A8", "S100A9","AIF1",
           "HLA-DQA1", "LAMP3", "CD83", "CSF2RA", "CIITA", "PLAC8", "IL3RA",
           "IRF4","HLA-DRA", "HLA-DPA1", "CLEC10A","ITGAX", "MS4A1", "CD79A",  "MZB1", "XBP1", "CD38",  "IL7R",
           "LTB","IL32","CCL5" ,"CD8A", "NKG7",  "GZMA", "GZMH", "GNLY"]

# Create the dotplot using the filtered list of groups
sc.pl.dotplot(cosmx_all_counts, markers, groupby='annotations_after_scanvi_simple', categories_order=order, cmap='Blues', log=False)

import pandas as pd
from scipy.sparse import issparse



# Assuming 'adata' is your AnnData object
markers = ["CPA3", "KIT", "HPGDS", "CD163", "MRC1", "C1QC","C1QA","C1QB","SAT1",  "COTL1", "LYZ", "S100A8", "S100A9","AIF1",
           "HLA-DRA", "HLA-DPA1", "CLEC10A", "HLA-DQA1", "LAMP3", "CD83", "CSF2RA", "CIITA", "PLAC8", "IL3RA",
           "IRF4","MS4A1", "CD79A",  "MZB1", "XBP1", "CD38",  "IL7R",
           "LTB","IL32","CCL5" ,"CD8A", "NKG7",  "GZMA", "GZMH", "GNLY"]

# Ensure markers list only includes valid gene names
markers = [gene for gene in markers if gene in cosmx_all_counts.var_names]

# Subset the .X matrix for the markers and convert to a DataFrame
gene_expression_df = pd.DataFrame(
    cosmx_all_counts[:, markers].X.toarray() if issparse(cosmx_all_counts.X) else cosmx_all_counts[:, markers].X,
    index=cosmx_all_counts.obs_names,
    columns=markers
)
 # Display the first few rows of the DataFrame



gene_expression_df['immune_coarse'] = cosmx_all_counts.obs['annotations_after_scanvi_simple'].values
mean_expression_per_cluster = gene_expression_df.groupby('immune_coarse').mean()
print(mean_expression_per_cluster)

from sklearn.preprocessing import MinMaxScaler

# Create a MinMaxScaler object
scaler = MinMaxScaler()

# Scale each column individually
gene_expression_scaled = scaler.fit_transform(mean_expression_per_cluster)

# Convert the scaled array back to a DataFrame
gene_expression_scaled_df = pd.DataFrame(gene_expression_scaled, index=mean_expression_per_cluster.index, columns=mean_expression_per_cluster.columns)

gene_expression_scaled_df



order = ['Baso/Mast', 'Macro I', 'Macro II','Neutro',  'cDC', 'mDC', 'pDC', 'B',  'Plasma', 'CD4+', 'CD8+ I', 'CD8+ II', 'NK']


# Reindex the DataFrame according to the specified order
grouped_expression = gene_expression_scaled_df.reindex(order)

# Create the heatmap
plt.figure(figsize=(13, 3))  # Adjust the figure size as needed
ax = sns.heatmap(grouped_expression, cmap='plasma')

# Remove ticks
ax.tick_params(axis='x', length=0)  # Remove x-axis ticks
ax.tick_params(axis='y', length=0)  # Remove y-axis ticks
ax.set_ylabel('')
#plt.savefig('heatmap_immune_cosmx.png', dpi=900, bbox_inches='tight')
# Show the plot
plt.show()

order = ['Baso/Mast', 'Macro I', 'Macro II','Neutro',  'cDC', 'mDC', 'pDC', 'B',  'Plasma', 'CD4+', 'CD8+ I', 'CD8+ II', 'NK']


# Reindex the DataFrame according to the specified order
grouped_expression = gene_expression_scaled_df.reindex(order)
grouped_expression=grouped_expression.T
# Create the heatmap
width_mm = 120  # Example for 7 inches
height_mm = 185  # Example for 9 inches
width_in = width_mm / 25.4
height_in = height_mm / 25.4
plt.figure(figsize=(width_in, height_in))

ax = sns.heatmap(grouped_expression, cmap='plasma', cbar=False)

# Remove ticks
ax.tick_params(axis='x', length=0)  # Remove x-axis ticks
ax.tick_params(axis='y', length=0)  # Remove y-axis ticks
ax.set_ylabel('')
ax.set_xlabel('')
plt.savefig('heatmap_immune_cosmx_standing.png', facecolor='#DADADA', edgecolor='#DADADA',dpi=900, bbox_inches='tight')
# Show the plot
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

# Assuming 'gene_expression_scaled_df' and 'order' are defined
# Reindex the DataFrame according to the specified order
grouped_expression = gene_expression_scaled_df.reindex(order)
grouped_expression = grouped_expression.T

# Create the heatmap figure with specified size
fig, ax = plt.subplots(figsize=(width_in, height_in))

# Create the heatmap with cbar=False
sns.heatmap(grouped_expression, cmap='plasma', cbar=False, ax=ax)

# Remove ticks
ax.tick_params(axis='x', length=0)  # Remove x-axis ticks
ax.tick_params(axis='y', length=0)  # Remove y-axis ticks
ax.set_ylabel('')
ax.set_xlabel('')

# Create a new Axes for the colorbar, specifying its position
cbar_ax = fig.add_axes([0.15, -0.05, 0.7, 0.02])  # x, y, width, height, adjust as needed

# Create the colorbar in the new Axes
# `mappable` is the Image, ContourSet, etc. to which the colorbar applies; this can typically be retrieved
# from the object returned by the sns.heatmap function.
mappable = ax.collections[0]  # This gets the mappable object (the heatmap) from the Axes
plt.colorbar(mappable, cax=cbar_ax, orientation='horizontal')

# Adjust layout
plt.tight_layout()

# Save the plot
plt.savefig('heatmap_immune_cosmx_standing.png', facecolor='#DADADA', edgecolor='#DADADA', dpi=900, bbox_inches='tight')

# Show the plot
plt.show()



