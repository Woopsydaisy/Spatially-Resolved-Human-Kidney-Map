# -*- coding: utf-8 -*-
"""Prepare SCVI SCANVI Immune Cells for Imputation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-DVlf_WKjtKW3QKJTzii_RFx8raPEirh
"""

!pip install --quiet scanpy
!pip install --quiet leidenalg

import csv
import anndata as ad
import gzip
import os
import scipy.io
import scanpy as sc
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import drive
import leidenalg as la
from pathlib import Path

adata_2=sc.read_h5ad('/content/drive/MyDrive/Bernhard/Cosmx/SCVI/All_Runs/allCosmx_allGenes.h5ad')

immune_atlas_final=sc.read_h5ad('/content/drive/MyDrive/Bernhard/Immune_Cell_Atlas/Immune_Cell_Atlas_final.h5ad')

sc.pl.umap(immune_atlas_final, color = "annotations_after_scanvi")

cell_ids_adata1 = set(adata_2.obs_names)
cell_ids_adata2 = set(immune_atlas_final.obs_names)

# Compute the intersection of cell IDs
common_cell_ids = cell_ids_adata1.intersection(cell_ids_adata2)

# If you need the result as a list
common_cell_ids_list = list(common_cell_ids)

cosmx_all_counts=adata_2[common_cell_ids_list]
#cosmx_annotated=immune_atlas_final[common_cell_ids_list]

immune_atlas_final

#cosmx_all_counts.obsm['X_umap']=cosmx_annotated.obsm['X_umap']
#cosmx_all_counts.obs['annotations_after_scanvi']=cosmx_annotated.obs['annotations_after_scanvi']

#sc.pl.umap(cosmx_all_counts, color = "annotations_after_scanvi")

#sc.pl.umap(cosmx_all_counts, color = "IRF5")

cosmx_all_counts.obs['Count_percentile'] = cosmx_all_counts.obs['nCount_RNA'].rank(pct=True) * 100

sc.pl.umap(cosmx_all_counts, color = "Count_percentile")

#atlas_sn_cells=immune_atlas_final[immune_atlas_final.obs["tech"]=="SN_SEQ"]
#sc.pl.umap(atlas_sn_cells, color = "annotations_after_scanvi")

#sc.pl.umap(atlas_sn_cells, color = "annotations_after_scanvi")

sn_sc_prescvi=sc.read_h5ad('/content/drive/MyDrive/Bernhard/Immune_Cell_Atlas/SN_SC_Immune_preSCVI.h5ad')

sn_prescvi=sn_sc_prescvi[sn_sc_prescvi.obs['tech']=="SN_SEQ"]

cell_ids_adata1 = set(sn_prescvi.obs_names)
cell_ids_adata2 = set(immune_atlas_final.obs_names)

# Compute the intersection of cell IDs
common_cell_ids = cell_ids_adata1.intersection(cell_ids_adata2)

# If you need the result as a list
common_cell_ids_list = list(common_cell_ids)

len(common_cell_ids_list)

sn_prescvi=sn_prescvi[common_cell_ids_list]
sn_prescvi

sn_prescvi.obs['Count_percentile'] = sn_prescvi.obs['nCount_RNA'].rank(pct=True) * 100





sn_prescvi.obs['annotations_after_scanvi'] = atlas_sn_cells.obs['annotations_after_scanvi'].copy()
sn_prescvi.obsm['X_umap'] = atlas_sn_cells.obsm['X_umap'].copy()


#sn_prescvi.obs = sn_prescvi.obs.sort_index()
#atlas_sn_cells.obs = atlas_sn_cells.obs.sort_index()

print(sn_prescvi.obs['annotations_after_scanvi'])

print(atlas_sn_cells.obs['annotations_after_scanvi'])

sn_prescvi.obs = sn_prescvi.obs.sort_index()
atlas_sn_cells.obs = atlas_sn_cells.obs.sort_index()

print(sn_prescvi.obs['annotations_after_scanvi'])

print(atlas_sn_cells.obs['annotations_after_scanvi'])



sc.pl.umap(sn_prescvi, color = "annotations_after_scanvi")

sc.pl.umap(atlas_sn_cells, color = "annotations_after_scanvi")





print(sn_prescvi.obs['annotations_after_scanvi'])

print(atlas_sn_cells.obs['annotations_after_scanvi'])

sn_prescvi.obs['Count_percentile'] = sn_prescvi.obs['nCount_RNA'].rank(pct=True) * 100

sc.pl.umap(sn_prescvi, color = "Count_percentile")

cosmx_all_counts.obs["percent_mt"]=0

cosmx_all_counts.obs["tech"]="Cosmx"

cosmx_all_counts.obs["proj"]="Cosmx"

cosmx_all_counts.obs["orig_ident"]=cosmx_all_counts.obs["sample"]

combined_adata= sn_prescvi.concatenate(cosmx_all_counts, join='inner', index_unique=None, batch_key=None)
combined_adata

genes_to_remove = ['MALAT1', 'SRY', 'XIST']

# Check if the genes to remove exist in the .var names
genes_exist = [gene for gene in genes_to_remove if gene in combined_adata.var_names]

# Drop the genes from the AnnData object
if genes_exist:
    combined_adata = combined_adata[:, ~combined_adata.var_names.isin(genes_exist)].copy()
combined_adata

sc.pl.umap(immune_atlas_final, color = "annotations_after_scanvi")

sorted_indices = immune_atlas_final.obs.index.argsort()

immune_atlas_final.obs = immune_atlas_final.obs.iloc[sorted_indices]
immune_atlas_final.obsm['X_umap'] = np.array(immune_atlas_final.obsm['X_umap'])[sorted_indices]

sc.pl.umap(immune_atlas_final, color = "annotations_after_scanvi")

immune_atlas_final_subset=immune_atlas_final[immune_atlas_final.obs['tech']!='SC_SEQ']

sorted_indices = combined_adata.obs.index.argsort()

combined_adata.obs = combined_adata.obs.iloc[sorted_indices]
combined_adata.obsm['X_umap'] = np.array(combined_adata.obsm['X_umap'])[sorted_indices]

combined_adata

combined_adata.obs['annotations_after_scanvi']=immune_atlas_final_subset.obs['annotations_after_scanvi']
combined_adata.obsm['X_umap']=immune_atlas_final_subset.obsm['X_umap']

sc.pl.umap(combined_adata, color = "annotations_after_scanvi")

combined_adata.obs['annotations_after_scanvi'].unique()

print(combined_adata.obs['annotations_after_scanvi'])

sc.pl.umap(combined_adata, color = "tech")



combined_adata.obs['annotations_after_scanvi'].value_counts()

sc.pl.umap(combined_adata, color = "Count_percentile")



combined_adata.write('/content/drive/MyDrive/Bernhard/Immune_Cell_Atlas/B_Cell/Cosmx_SN_Immune_preSCVI_annotated.h5ad')

combined_adata

print(combined_adata.obsm['X_umap'])