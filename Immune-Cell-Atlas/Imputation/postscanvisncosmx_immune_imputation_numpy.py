# -*- coding: utf-8 -*-
"""PostScanviSNCosmx Immune Imputation Numpy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C-60PlBemGuOk6qn2yWn1sr6SgiuUtNj
"""

!pip install --quiet scanpy
!pip install --quiet leidenalg

import csv
import anndata as ad
import gzip
import os
import scipy.io
import scanpy as sc
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import drive
import leidenalg as la
from pathlib import Path
import scipy
from sklearn.neighbors import NearestNeighbors

neighbors = 15

adata=sc.read_h5ad('/content/drive/MyDrive/Bernhard/Immune_Cell_Atlas/B_Cell/Cosmx_SN_Immune_annotated_V1_SCANVI_V1.h5ad')

adata

SN = sc.read_h5ad('/content/drive/MyDrive/Bernhard/Immune_Cell_Atlas/SN_SC_Immune_preSCVI_low_samples_removed.h5ad')

cell_ids_in_adata = adata.obs.index
cell_ids_in_sn = SN.obs.index

common_cell_ids = cell_ids_in_adata.intersection(cell_ids_in_sn)
single_nuc = SN[common_cell_ids].copy()

single_nuc

sc.pp.filter_genes(single_nuc, min_cells=10)
single_nuc

del single_nuc.obs['leiden_immune_postscanvi_sub']
del single_nuc.obs['leiden_immune_postscanvi_b_subtypes']
del single_nuc.obs['Sex']
del single_nuc.obs['Gender']
del single_nuc.obs['Hypertension']
del single_nuc.obs['leiden_immune_postscanvi']
del single_nuc.obs['combined_annotation']
del single_nuc.obs['Disease_level1']
del single_nuc.obs['Race']
del single_nuc.obs['Age']
del single_nuc.obs['GFR (ml/min/1.73m2)']
del single_nuc.obs['Disease_level2']
del single_nuc.obs['Diabetes']
del single_nuc.obs['Project/Dataset']

single_nuc

adata_cosmx= adata[adata.obs["tech"]=="Cosmx"]
adata_cosmx

del adata_cosmx.obsm["X_scANVI"]
del adata_cosmx.obsm["X_scVI"]
del adata_cosmx.obsm["X_umap"]
del adata_cosmx.obsm["_scvi_extra_categorical_covs"]
del adata_cosmx.obsm["_scvi_extra_continuous_covs"]
del adata_cosmx.layers["scvi_normalized"]
del adata_cosmx.obs['immune_coarse']
del adata_cosmx.obs['batch']
del adata_cosmx.obs['_scvi_batch']
del adata_cosmx.obs['_scvi_labels']
del adata_cosmx.obs['leiden_scVI_0_5']
del adata_cosmx.obs['leiden_scVI_0_3']
del adata_cosmx.obs['leiden_scVI_0_1']
del adata_cosmx.obs['C_scANVI']
del adata_cosmx.obs['leiden_scanvi_0_1']
del adata_cosmx.obs['leiden_scanvi_0_3']
del adata_cosmx.obs['leiden_scanvi_0_5']
del adata_cosmx.obs['mean_distance']
adata_cosmx

adata_combined_var = ad.concat([adata_cosmx,single_nuc], join = "outer")

adata_combined_var

adata_combined_var.obs['orig_ident']=adata_combined_var.obs['orig_ident'].astype('str')
adata_combined_var.obs['tech']=adata_combined_var.obs['tech'].astype('str')
adata_combined_var.obs['Cluster_Idents']=adata_combined_var.obs['Cluster_Idents'].astype('str')
adata_combined_var.obs['annotations_after_scanvi']=adata_combined_var.obs['annotations_after_scanvi'].astype('str')
adata_combined_var.obs['sample']=adata_combined_var.obs['sample'].astype('str')
adata_combined_var.obs['type']=adata_combined_var.obs['type'].astype('str')
adata_combined_var.obs['original_barcode']=adata_combined_var.obs['original_barcode'].astype('str')
adata_combined_var.obs['subclass.l2']=adata_combined_var.obs['subclass.l2'].astype('str')
adata_combined_var.obs['Status']=adata_combined_var.obs['Status'].astype('str')

adata_combined_var.obs['orig_ident']=adata_combined_var.obs['orig_ident'].astype('category')
adata_combined_var.obs['tech']=adata_combined_var.obs['tech'].astype('category')
adata_combined_var.obs['Cluster_Idents']=adata_combined_var.obs['Cluster_Idents'].astype('category')
adata_combined_var.obs['annotations_after_scanvi']=adata_combined_var.obs['annotations_after_scanvi'].astype('category')
adata_combined_var.obs['sample']=adata_combined_var.obs['sample'].astype('category')
adata_combined_var.obs['type']=adata_combined_var.obs['type'].astype('category')
adata_combined_var.obs['original_barcode']=adata_combined_var.obs['original_barcode'].astype('category')
adata_combined_var.obs['subclass.l2']=adata_combined_var.obs['subclass.l2'].astype('category')
adata_combined_var.obs['Status']=adata_combined_var.obs['Status'].astype('category')

adata_combined_var.obs['nCount_RNA']=adata_combined_var.obs['nCount_RNA'].astype('float')
adata_combined_var.obs['nFeature_RNA']=adata_combined_var.obs['nFeature_RNA'].astype('float')
adata_combined_var.obs['percent_mt']=adata_combined_var.obs['percent_mt'].astype('float')

from google.colab import drive
drive.mount('/content/drive')

order = adata.obs_names
adata_combined_var = adata_combined_var[order, :]

print(adata_combined_var.obs['percent_mt'])

adata_combined_var.obs_names

adata_combined_var.obsm['X_umap']=adata.obsm['X_umap']
adata_combined_var.obsm['X_scANVI']=adata.obsm['X_scANVI']
adata_combined_var.obs['annotations_after_scanvi']=adata.obs['annotations_after_scanvi']

print(adata_combined_var.obsm['X_scANVI'])

print(adata.obsm['X_scANVI'])

adata

adata_CosMx = adata_combined_var[adata_combined_var.obs["tech"]=="Cosmx"]

from sklearn.neighbors import NearestNeighbors
Cosmx_cells_mask = (adata_combined_var.obs['tech'] == 'Cosmx')
snRNA_cells_mask = (adata_combined_var.obs['tech'] != 'Cosmx')

CosMx_index = np.where(Cosmx_cells_mask)[0]
snRNA_index = np.where(snRNA_cells_mask)[0]

nn = NearestNeighbors(n_neighbors=15, metric='euclidean')
nn.fit(adata_combined_var.obsm["X_scANVI"][snRNA_cells_mask])

distances_all_to_non_Cosmx, indices_all_to_non_Cosmx = nn.kneighbors(adata_combined_var.obsm["X_scANVI"][Cosmx_cells_mask])

del adata

adata_combined_var.X = adata_combined_var.layers["counts"].copy()

expression_df = adata_combined_var.to_df()
snRNA_df = expression_df.iloc[snRNA_index].T

expression_df = adata_combined_var.to_df()
CosMx_df = expression_df.iloc[CosMx_index]
CosMx_df.loc[:] = np.nan

adj = (distances_all_to_non_Cosmx ** -2.0).sum(axis=1)
affinity_array = (distances_all_to_non_Cosmx ** -2)

rows, cols = expression_df.shape
result_array = np.zeros((len(CosMx_index), cols))

# Assuming snRNA_df and CosMx_df are already created and are Pandas DataFrames
snRNA_array = snRNA_df.values
CosMx_array = CosMx_df.values

# Convert distances and indices to NumPy arrays
distances_array = np.array(distances_all_to_non_Cosmx)
indices_array = np.array(indices_all_to_non_Cosmx)

# Calculate affinity and adjacency arrays
affinity_array = distances_array ** -2
adj_array = affinity_array.sum(axis=1, keepdims=True)

expanded_affinity_array = affinity_array[:,:,np.newaxis]
relevant_snRNA_expression = snRNA_array[:, indices_array.T].T
relevant_snRNA_expression = np.transpose(relevant_snRNA_expression, (0, 2, 1))
relevant_snRNA_expression = np.transpose(relevant_snRNA_expression, (0, 2, 1))

import gc
batch_size = 50000
num_cells = relevant_snRNA_expression.shape[0]
num_batches = np.ceil(num_cells / batch_size).astype(int)
batched_results = []

for batch in range(num_batches):
    start_index = batch * batch_size
    end_index = min((batch + 1) * batch_size, num_cells)

    # Slicing the arrays for the current batch
    batch_relevant_snRNA = relevant_snRNA_expression[start_index:end_index]
    batch_affinity_array = expanded_affinity_array[start_index:end_index]

    # Perform the operation for the batch
    batch_weighted_sums = (batch_relevant_snRNA * batch_affinity_array).sum(axis=1)
    batch_normalized_expression = batch_weighted_sums / adj_array[start_index:end_index]

    # Append the result
    batched_results.append(batch_normalized_expression)

    # Free up memory by overwriting processed data
    relevant_snRNA_expression[start_index:end_index] = None

    # Force garbage collection
    gc.collect()

final_result = np.concatenate(batched_results, axis=0)

final_result[final_result < 0.001] = 0
final_result = np.round(final_result, 3)

from scipy.sparse import csr_matrix

# Assuming 'final_result' is your NumPy array from the batch processing
sparse_matrix = csr_matrix(final_result)

adata_CosMx.layers["imputed_scanvi"] = sparse_matrix
adata_CosMx.X = sparse_matrix

adata_CosMx

sc.pl.umap(adata_CosMx, color = "annotations_after_scanvi")

pops=['cytotox B', 'CD14+ Mono', 'CD16+ Mono', 'cycling Lymphocytes']
mask=adata_CosMx.obs['annotations_after_scanvi'].isin(pops)
subset=adata_CosMx[~mask]

subset



#order = ['Baso/Mast', 'M2', 'Macro','Neutrophil',  'mDC', 'pDC', 'cDC', 'B',  'Plasma', 'CD4+', 'CD8+ 1', 'CD8+ 2', 'NK']
cell_colors = {
    'Baso/Mast': (0.2235, 0.2314, 0.4745),
    'Macro I': (0.3, 0.3, 0.3),
    'Macro II': (0.9921568627450981, 0.7058823529411765, 0.3843137254901961),
    'Macro III': (0.9294117647058824, 0.6941176470588235, 0.12549019607843137),
    'Macro IV': (0.41568627450980394, 0.23921568627450981, 0.6039215686274509),
    'Neutro': (0.9882352941176471, 0.803921568627451, 0.8980392156862745),
    'cDC': (0.9176470588235294, 0.5019607843137255, 0.23529411764705882),
    'mDC': (0.34509803921568627, 0.33725490196078434, 0.6745098039215687),
    'pDC': (0.6509803921568628, 0.4627450980392157, 0.11372549019607843),
    'B': (0.7450980392156863, 0.7294117647058823, 0.8549019607843137),
    'Plasma': (0.2196078431372549, 0.4235294117647059, 0.6901960784313725),
    'CD4+': (0.5529411764705883, 0.8274509803921568, 0.7803921568627451),
    'CD8+ I': (0.6784, 0.2863, 0.2902),
    'CD8+ II': (0.9921568627450981, 0.7529411764705882, 0.5254901960784314),
    'NK': (0.7372549019607844, 0.5019607843137255, 0.7411764705882353),
    'Cycling': (0.8, 0.47058823529411764, 0.7372549019607844),
    #'cytotox B': (0.4, 0.7607843137254902, 0.6470588235294118)
    }

adata_CosMx.obs['annotations_after_scanvi'].value_counts()

adata_CosMx.obs['annotations_after_scanvi'].value_counts()
cell_identities = {'M2': 'Macro I', 'CD4+': 'CD4+', 'Macro': 'Macro II', 'CD16+ Mono': 'Macro IV', 'CD14+ Mono': 'Macro III',
                   'CD8+ 1': 'CD8+ I', 'CD8+ 2': 'CD8+ II', 'B': 'B', 'NK': 'NK', 'cDC': 'cDC', 'Neutrophil': 'Neutro',
                   'Plasma': 'Plasma', 'Baso/Mast': 'Baso/Mast', 'pDC': 'pDC', 'cycling Lymphocytes': 'Cycling', 'cytotox B':'B',
                   'mDC':'mDC'}
adata_CosMx.obs["annotations_after_scanvi_simple"] = adata_CosMx.obs['annotations_after_scanvi'].map(cell_identities).astype('category')

sc.pl.umap(adata_CosMx, color = "annotations_after_scanvi_simple",palette=cell_colors, frameon = False)
sc.pl.umap(adata_CosMx, color = "annotations_after_scanvi_simple", legend_loc='on data', legend_fontsize=10, legend_fontoutline=2, frameon = False)

adata_CosMx.write('/content/drive/MyDrive/Bernhard/Immune_Cell_Atlas/Cosmx_immune_imputed_from_SN_np.h5ad')

adata_CosMx.obs['annotations_after_scanvi_simple'].value_counts()

pops=['Macro III', 'Macro IV', 'Cycling']
mask=adata_CosMx.obs['annotations_after_scanvi_simple'].isin(pops)
subset=adata_CosMx[~mask]

sc.tl.rank_genes_groups(subset, groupby='annotations_after_scanvi_simple', method='wilcoxon', pts = True)
sc.pl.rank_genes_groups(subset, n_genes=25, sharey=False)
de_results = subset.uns['rank_genes_groups']

  # Extract the names of the genes, scores, logfold changes, and p-values
gene_names = de_results['names']
gene_scores = de_results['scores']
gene_logfoldchanges = de_results['logfoldchanges']
gene_pvals = de_results['pvals']
gene_pvals_adj = de_results['pvals_adj']
  # Assuming you want to print the results for all groups
for group in gene_names.dtype.names:
    print(f"Group {group} - Top 25 genes")
    # Create a DataFrame for easy handling
    df = pd.DataFrame({
        'Gene': gene_names[group],
        'Score': gene_scores[group],
        'LogFoldChange': gene_logfoldchanges[group],
        'pValue': gene_pvals[group],
        'pValue_adj': gene_pvals_adj[group]
    })

    # Print the top 25 genes for the group
    df=df[df['pValue_adj']<0.01]
    print(df.head(60))
    #print(df.tail())
    print("\n")

gene_list_baso = ['KIT', 'SLC24A3', 'MS4A2', 'SLC18A2',  'GATA2', 'CPA3', 'HDC',  'IL18R1', 'NTM', 'PBX1',   'SLC8A3']
gene_list_b = ['BANK1', 'BLK', 'FCRL1', 'EBF1', 'PAX5', 'RALGPS2', 'BACH2', 'CD22', 'LINC00926', 'BCL11A', 'GNG7',  'COL19A1', 'MS4A1',  'AFF3',  'HVCN1']
gene_list_cd4 = ['IL7R', 'LEF1',  'INPP4B', 'CAMK4',  'CDC14A', 'TCF7', 'ETS1', 'PDE3B', 'ITK', 'TTC39C', 'OXNAD1', 'BCL11B', 'TESPA1', 'SERINC5', 'CD247', 'SCML4', 'FAAH2', 'TNIK', 'CD6']
gene_list_cd8_1 = ['SAMD3', 'CD6', 'THEMIS', 'BCL11B', 'PYHIN1', 'TC2N', 'CD247', 'PITPNC1', 'CD96', 'PRKCQ', 'SKAP1', 'CAMK4', 'LCK', 'ZFYVE28', 'TTC39C', 'FYN', 'ITK', 'PPP2R2B', 'GRAP2', 'INPP4B', 'CD2']
gene_list_cd8_2 = ['DTHD1', 'TOX', 'SAMD3', 'PPP2R2B', 'THEMIS', 'ITGAL', 'PITPNC1', 'CD96', 'PYHIN1', 'SKAP1', 'PRKCH', 'PARP8', 'FYN', 'RUNX3', 'GRAP2', 'CBLB', 'PTGDR', 'PIP4K2A', 'CD2', 'ARAP2', 'TC2N']
gene_list_macro_1 = ['F13A1', 'CD163L1', 'STAB1', 'MRC1', 'CD163', 'SLCO2B1', 'STARD13', 'FRMD4B', 'RGL1', 'FMN1', 'ITSN1', 'ME1', 'NRP1', 'IGSF21', 'FRMD4A', 'MERTK', 'PID1', 'COLEC12', 'SLC1A3', 'CSF1R', 'LGMN']
gene_list_macro_2 = ['ERBB4', 'PLXDC2', 'PRAM1', 'ST18', 'OLR1', 'PLAUR', 'RASSF4', 'SLC11A1', 'RASAL2', 'KCNIP4', 'FMNL2', 'TMEM163', 'DOCK4', 'KCNMA1', 'TYMP', 'ALOX5', 'TANC2', 'ITGAX', 'PALLD', 'NHSL1', 'RTN1']
gene_list_nk = ['TXK','NCALD', 'KLRF1', 'SAMD3', 'GNLY', 'PDGFD', 'CD247', 'SYNE1', 'MCTP2', 'MYBL1', 'KLRD1', 'TGFBR3', 'NCAM1', 'PYHIN1', 'LINC00299', 'C1orf21', 'PRKCH', 'SYTL3', 'RABGAP1L', 'RUNX3', 'ITGAL', 'PTGDR']
gene_list_neutro = ['S100A8', 'CSF3R', 'S100A9', 'LRRK2', 'GLT1D1', 'DGAT2', 'TAGLN2', 'RNF24', 'AQP9', 'MNDA', 'APOBEC3A', 'MBOAT7', 'IFITM2', 'KCNJ15', 'EPHB1', 'CXCR2', 'MXD1', 'CLEC12A', 'CSF2RB', 'IFIT2', 'VASP']
gene_list_plasma = ['CREB3L2', 'FCRL5', 'MEI1', 'POU2AF1', 'BMP6', 'GLCCI1', 'PDK1', 'DENND5B', 'FBXW7', 'WNT5B', 'TRAM2', 'FNDC3B', 'CD38', 'GNG7', 'MZB1', 'MYO1D', 'HSH2D', 'NUGGC', 'RAB30', 'C11orf80', 'IFNG-AS1']
gene_list_cdc = ['CLNK', 'WDFY4', 'SLC24A4', 'ZNF366', 'IRF8', 'KCND3', 'ZBTB46', 'FLT3', 'ANPEP', 'VAC14', 'ENOX1', 'BCL6', 'CBFA2T3', 'CCSER1', 'CCDC26', 'CPVL', 'SLCO5A1', 'CLEC9A', 'KCNK6', 'OSBP2', 'ACTN1']
gene_list_mdc = ['ANKRD33B', 'SLCO5A1', 'BIRC3', 'NDE1', 'FLT3', 'CERS6', 'LAMP3', 'TBC1D8', 'WNT5B', 'GPR157', 'MOB1B', 'DLGAP2', 'ADAM12', 'KDM2B', 'DOCK10', 'ABCC4', 'LYST', 'RFTN1', 'ABTB2', 'ENOX1', 'ARHGAP22']
gene_list_pdc = ['BCL11A', 'CUX2', 'FAM160A1', 'PLXNA4', 'IL3RA', 'PTPRS', 'RGS7', 'COL24A1', 'APP', 'PLAC8', 'SULF2', 'TCF4', 'CLEC4C', 'IRF8', 'AC023590.1', 'ZFAT', 'CCDC50', 'KCNK10', 'SPIB', 'SETBP1', 'SLC35F3']

order = ['Baso/Mast', 'Macro I', 'Macro II','Neutro',  'cDC', 'mDC', 'pDC', 'B',  'Plasma', 'CD4+', 'CD8+ I', 'CD8+ II', 'NK']


# Define your markers
markers = gene_list_baso+gene_list_macro_1+gene_list_macro_2+gene_list_neutro+gene_list_cdc+gene_list_mdc+gene_list_pdc+gene_list_b+gene_list_plasma+gene_list_cd4+gene_list_cd8_1+gene_list_cd8_2+gene_list_nk

# Create the dotplot using the filtered list of groups
sc.pl.dotplot(subset, markers, groupby='annotations_after_scanvi_simple', categories_order=order, cmap='Blues', log=False)

import pandas as pd
from scipy.sparse import issparse

# Ensure markers list only includes valid gene names
markers = [gene for gene in markers if gene in subset.var_names]

# Subset the .X matrix for the markers and convert to a DataFrame
gene_expression_df = pd.DataFrame(
    subset[:, markers].X.toarray() if issparse(subset.X) else subset[:, markers].X,
    index=subset.obs_names,
    columns=markers
)
 # Display the first few rows of the DataFrame

gene_expression_df['immune_coarse'] = subset.obs['annotations_after_scanvi_simple'].values
mean_expression_per_cluster = gene_expression_df.groupby('immune_coarse').mean()
print(mean_expression_per_cluster)

from sklearn.preprocessing import MinMaxScaler

# Create a MinMaxScaler object
scaler = MinMaxScaler()

# Scale each column individually
gene_expression_scaled = scaler.fit_transform(mean_expression_per_cluster)

# Convert the scaled array back to a DataFrame
gene_expression_scaled_df = pd.DataFrame(gene_expression_scaled, index=mean_expression_per_cluster.index, columns=mean_expression_per_cluster.columns)

order = ['Baso/Mast', 'Macro I', 'Macro II','Neutro',  'cDC', 'mDC', 'pDC', 'B',  'Plasma', 'CD4+', 'CD8+ I', 'CD8+ II', 'NK']


# Reindex the DataFrame according to the specified order
grouped_expression = gene_expression_scaled_df.reindex(order)
grouped_expression=grouped_expression.T
# Create the heatmap
width_mm = 120  # Example for 7 inches
height_mm = 185  # Example for 9 inches
width_in = width_mm / 25.4
height_in = height_mm / 25.4
plt.figure(figsize=(6, 50))

ax = sns.heatmap(grouped_expression, cmap='plasma', cbar=False)

# Remove ticks
ax.tick_params(axis='x', length=0)  # Remove x-axis ticks
ax.tick_params(axis='y', length=0)  # Remove y-axis ticks
ax.set_ylabel('')
ax.set_xlabel('')
plt.savefig('heatmap_immune_cosmx_standing.png', facecolor='#DADADA', edgecolor='#DADADA',dpi=900, bbox_inches='tight')
# Show the plot
plt.show()