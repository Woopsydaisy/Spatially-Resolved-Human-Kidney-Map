# -*- coding: utf-8 -*-
"""Triple Cosmx Immune Integration Check SC.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AtbzJQJ6nIrIgtXHd0TdA0-PMbJuxIS5
"""

!pip install --quiet scanpy
!pip install --quiet leidenalg

from google.colab import drive
drive.mount('/content/drive')

import csv
import anndata as ad
import gzip
import os
import scipy.io
import scanpy as sc
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import drive
import leidenalg as la
from pathlib import Path

adata = sc.read_h5ad('/content/drive/MyDrive/Bernhard/Immune_Cell_Atlas/SN_SC_Cosmx_Immune_SCVI_V1_SCANVI.h5ad')

seed=10
sc.tl.leiden(adata, key_added="leiden_scanvi_0_5", resolution=0.5, random_state=seed)

sc.tl.leiden(adata, key_added="leiden_scanvi_0_3", resolution=0.3, random_state=seed)

adata

sc.pl.umap(adata, color = "annotations_after_scanvi")
sc.pl.umap(adata, color = "leiden_scanvi_0_3")
sc.pl.umap(adata, color = "leiden_scanvi_0_5")

adata_cosmx=adata[adata.obs["tech"]=="Cosmx"]

sc.pl.umap(adata_cosmx, color = "leiden_scanvi_0_3")

adata_cosmx.obs["leiden_scanvi_0_3"].value_counts()
cell_identities = {'0': 'Unknown', '1': 'Unknown', '2': 'Macro', '3': 'Macro', '4': 'B', '5': 'T', '6': 'NK', '7': 'T',
                   '8': 'Neutrophil', '9': 'Unknown', '10': 'Plasma', '11':'Baso/Mast', '12':'Unknown', '13':'pDC', '14':'cycling Lymphocytes'}
adata_cosmx.obs["annotations_after_scanvi"] = adata_cosmx.obs['leiden_scanvi_0_3'].map(cell_identities).astype('category')

sc.pl.umap(adata_cosmx, color = "annotations_after_scanvi", frameon = False)
sc.pl.umap(adata_cosmx, color = "annotations_after_scanvi", legend_loc='on data', legend_fontsize=10, legend_fontoutline=2, frameon = False)

df = pd.DataFrame({'annotation': adata_cosmx.obs["annotations_after_scanvi"]})

print(df)

# Convert df['annotation'] to match the exact Categorical type of adata.obs['annotations_after_scanvi']
df['annotation'] = pd.Categorical(df['annotation'],
                                  categories=adata.obs['annotations_after_scanvi'].cat.categories)

# Then, attempt the assignment
adata.obs.loc[df.index, 'annotations_after_scanvi'] = df['annotation']

sc.pl.umap(adata, color = "annotations_after_scanvi")

adata.write('/content/drive/MyDrive/Bernhard/Immune_Cell_Atlas/SN_SC_Cosmx_Immune_SCVI_V1_SCANVI.h5ad')

adata_non_cosmx=adata[adata.obs["tech"]!="Cosmx"]

sc.pl.umap(adata_non_cosmx, color = "annotations_after_scanvi")
sc.pl.umap(adata_non_cosmx, color = "leiden_scanvi_0_3")

adata=sc.read_h5ad('/content/drive/MyDrive/Bernhard/Immune_Cell_Atlas/SN_SC_Cosmx_Immune_SCVI_V1_SCANVI_V2.h5ad')

sc.pl.umap(adata, color = "annotations_after_scanvi")
sc.pl.umap(adata, color = "leiden_scanvi_0_1")
sc.pl.umap(adata, color = "leiden_scanvi_0_3")
sc.pl.umap(adata, color = "leiden_scanvi_0_5")

adata_cosmx=adata[adata.obs["tech"]=="Cosmx"]
sc.pl.umap(adata_cosmx, color = "annotations_after_scanvi")
sc.pl.umap(adata_cosmx, color = "leiden_scanvi_0_1")
sc.pl.umap(adata_cosmx, color = "leiden_scanvi_0_3")
sc.pl.umap(adata_cosmx, color = "leiden_scanvi_0_5")

adata_sc=adata[adata.obs["tech"]!="Cosmx"]
sc.pl.umap(adata_sc, color = "annotations_after_scanvi")
sc.pl.umap(adata_sc, color = "leiden_scanvi_0_1")
sc.pl.umap(adata_sc, color = "leiden_scanvi_0_3")
sc.pl.umap(adata_sc, color = "leiden_scanvi_0_5")

adata_cosmx.obs["leiden_scanvi_0_5"].value_counts()
cell_identities = {'0': 'M2', '1': 'T', '2': 'Unknown', '3': 'Macro', '4': 'M2', '5': 'T', '6': 'Macro', '7': 'Unknown',
                   '8': 'B', '9': 'Macro', '10': 'T', '11':'NK', '12':'T', '13':'Neutrophil', '14':'Unknown',
                   '15':'Plasma','16':'T','17':'Baso/Mast','18':'pDC','19':'cycling Lymphocytes',
                   '20':'cDC','21':'Neutrophil','22':'mDC'}
adata_cosmx.obs["annotations_after_scanvi"] = adata_cosmx.obs['leiden_scanvi_0_5'].map(cell_identities).astype('category')

sc.pl.umap(adata_cosmx, color = "annotations_after_scanvi", frameon = False)
sc.pl.umap(adata_cosmx, color = "annotations_after_scanvi", legend_loc='on data', legend_fontsize=10, legend_fontoutline=2, frameon = False)

sc.pl.umap(adata_sc, color = 'leiden_scanvi_0_5', groups='16')

sc.pl.umap(adata, color = "annotations_after_scanvi")

sc.pl.umap(adata, color = ['MRC1','CD163'], vmax=2)

df = pd.DataFrame({'annotation': adata_cosmx.obs["annotations_after_scanvi"]})

print(df)

# Convert df['annotation'] to match the exact Categorical type of adata.obs['annotations_after_scanvi']
df['annotation'] = pd.Categorical(df['annotation'],
                                  categories=adata.obs['annotations_after_scanvi'].cat.categories)

# Then, attempt the assignment
adata.obs.loc[df.index, 'annotations_after_scanvi'] = df['annotation']

sc.pl.umap(adata, color = "annotations_after_scanvi")

adata.obs['annotations_after_scanvi'] = adata.obs['annotations_after_scanvi'].cat.add_categories(['M2'])
condition = (adata.obs['leiden_scanvi_0_5'] == '0')

# Update 'annotations_after_scanvi' to 'M2' based on the condition
adata.obs.loc[condition, 'annotations_after_scanvi'] = 'M2'
condition = (adata.obs['leiden_scanvi_0_5'] == '4')
adata.obs.loc[condition, 'annotations_after_scanvi'] = 'M2'

sc.pl.umap(adata, color = "annotations_after_scanvi")

adata.obs["annotations_after_scanvi"].value_counts()

adata.write('/content/drive/MyDrive/Bernhard/Immune_Cell_Atlas/SN_SC_Cosmx_Immune_SCVI_V1_SCANVI_V2.h5ad')

adata=sc.read_h5ad('/content/drive/MyDrive/Bernhard/Immune_Cell_Atlas/SN_SC_Cosmx_Immune_SCVI_V1_SCANVI_V3.h5ad')

sc.pl.umap(adata, color = "annotations_after_scanvi")

sc.pl.umap(adata, color = "Cluster_Idents")

###now we used the joint labels from sn/sc for this scanvi model
adata=sc.read_h5ad('/content/drive/MyDrive/Bernhard/Immune_Cell_Atlas/SN_SC_Cosmx_Immune_SCVI_V1_SCANVI_annotated_V2.h5ad')

sc.pl.umap(adata, color = "annotations_after_scanvi")

sc.pl.umap(adata, color = "proj")

# Assuming adata is your AnnData object
adata.obs["annotations_after_scanvi"] = adata.obs["annotations_after_scanvi"].replace({'M2': 'Macro'})

sc.pl.umap(adata, color = "annotations_after_scanvi")

adata.write('/content/drive/MyDrive/Bernhard/Immune_Cell_Atlas/SN_SC_Cosmx_Immune_SCVI_V1_SCANVI_annotated_V2.h5ad')

sc.pl.umap(adata, color = "leiden_scanvi_0_1")
sc.pl.umap(adata, color = "leiden_scanvi_0_3")

sc.pl.umap(adata, color = "tech")
sc.pl.umap(adata, color = "tech", groups="SC_SEQ")
sc.pl.umap(adata, color = "tech", groups="SN_SEQ")
sc.pl.umap(adata, color = "tech", groups="Cosmx")
sc.pl.umap(adata, color = "Cluster_Idents")

###misannotation, so repeat

adata=sc.read_h5ad('/content/drive/MyDrive/Bernhard/Immune_Cell_Atlas/SN_SC_Cosmx_Immune_SCVI_V1_SCANVI_annotated_V2.h5ad')

sc.pl.umap(adata, color = "leiden_scanvi_0_1")
sc.pl.umap(adata, color = "leiden_scanvi_0_3")
sc.pl.umap(adata, color = "leiden_scanvi_0_5")
sc.pl.umap(adata, color = "annotations_after_scanvi")

sc.pl.umap(adata, color = "tech")
sc.pl.umap(adata, color = "tech", groups="SC_SEQ")
sc.pl.umap(adata, color = "tech", groups="SN_SEQ")
sc.pl.umap(adata, color = "tech", groups="Cosmx")
sc.pl.umap(adata, color = "Cluster_Idents")

adata_cosmx=adata[adata.obs["tech"]=="Cosmx"]
sc.pl.umap(adata_cosmx, color = "leiden_scanvi_0_3")

sc.pl.umap(adata_cosmx, color = "leiden_scanvi_0_3",groups='5')

sc.pl.umap(adata_cosmx, color = "MRC1",vmax=1)

sc.pl.umap(adata_cosmx, color = "leiden_scanvi_0_3",groups='19')

adata_cosmx.obs["leiden_scanvi_0_3"].value_counts()
cell_identities = {'0': 'CD4+', '1': 'CD8+', '2': 'CD8+', '3': 'B', '4': 'Macro', '5': 'M2', '6': 'Unknown', '7': 'Unknown',
                   '8': 'Unknown', '9': 'NK', '10': 'M2', '11': 'Neutrophil', '12': 'Plasma', '13':'Neutrophil', '14':'Baso/Mast',
                   '15':'pDC','16':'cycling Lymphocytes','17':'cDC', '18':'mDC', '19':'Plasma'}
adata_cosmx.obs["annotations_after_scanvi"] = adata_cosmx.obs['leiden_scanvi_0_3'].map(cell_identities).astype('category')

sc.pl.umap(adata_cosmx, color = "annotations_after_scanvi", frameon = False)
sc.pl.umap(adata_cosmx, color = "annotations_after_scanvi", legend_loc='on data', legend_fontsize=10, legend_fontoutline=2, frameon = False)



sc.pl.umap(adata_cosmx, color = "annotations_after_scanvi", groups='Macro')

sc.pl.umap(adata_sn, color = "leiden_scanvi_0_3", groups='19')

adata.obs["leiden_scanvi_0_3"].value_counts()

adata_cosmx.obs["leiden_scanvi_0_3"].value_counts()

adata_sn=adata[adata.obs["tech"]!="Cosmx"]

sc.pl.umap(adata_sn, color = "leiden_scanvi_0_3", groups='8')

adata_sn=adata[adata.obs["tech"]!="Cosmx"]
sc.pl.umap(adata_sn, color = "leiden_scanvi_0_3")
sc.pl.umap(adata_sn, color = "annotations_after_scanvi")

#lets introduce a cd4, cd8, m2 cluster

# Add 'CD4+' as a new category to the 'annotations_after_scanvi' column
adata.obs["annotations_after_scanvi"] = adata.obs["annotations_after_scanvi"].cat.add_categories(['CD4+'])

# Now you can safely assign 'CD4+' to the specified cells
adata.obs.loc[adata.obs["leiden_scanvi_0_3"] == '0', "annotations_after_scanvi"] = 'CD4+'

adata.obs["annotations_after_scanvi"] = adata.obs["annotations_after_scanvi"].cat.add_categories(['CD8+'])

adata.obs.loc[adata.obs["leiden_scanvi_0_3"].isin(['1', '2']), "annotations_after_scanvi"] = 'CD8+'

adata.obs["annotations_after_scanvi"] = adata.obs["annotations_after_scanvi"].cat.add_categories(['M2'])

adata.obs.loc[adata.obs["leiden_scanvi_0_3"].isin(['10', '5']), "annotations_after_scanvi"] = 'M2'

sc.pl.umap(adata, color = "annotations_after_scanvi")

df = pd.DataFrame({'annotation': adata_cosmx.obs["annotations_after_scanvi"]})

print(df)

# Convert df['annotation'] to match the exact Categorical type of adata.obs['annotations_after_scanvi']
df['annotation'] = pd.Categorical(df['annotation'],
                                  categories=adata.obs['annotations_after_scanvi'].cat.categories)

# Then, attempt the assignment
adata.obs.loc[df.index, 'annotations_after_scanvi'] = df['annotation']

sc.pl.umap(adata, color = "annotations_after_scanvi")

adata.obs["annotations_after_scanvi"].value_counts()

adata.write('/content/drive/MyDrive/Bernhard/Immune_Cell_Atlas/SN_SC_Cosmx_Immune_SCVI_V1_SCANVI_annotated_V2.h5ad')

adata = sc.read_h5ad('/content/drive/MyDrive/Bernhard/Immune_Cell_Atlas/SN_SC_Cosmx_Immune_SCVI_V1_SCANVI_annotated_V3.h5ad')

sc.pl.umap(adata, color = "tech")
sc.pl.umap(adata, color = "tech", groups="SC_SEQ")
sc.pl.umap(adata, color = "tech", groups="SN_SEQ")
sc.pl.umap(adata, color = "tech", groups="Cosmx")
sc.pl.umap(adata, color = "Cluster_Idents")

sc.pl.umap(adata, color = "leiden_scanvi_0_1")
sc.pl.umap(adata, color = "leiden_scanvi_0_3")
sc.pl.umap(adata, color = "leiden_scanvi_0_5")
sc.pl.umap(adata, color = "annotations_after_scanvi")

adata_cosmx=adata[adata.obs["tech"]=="Cosmx"]
sc.pl.umap(adata_cosmx, color = "leiden_scanvi_0_3")
sc.pl.umap(adata_cosmx, color = "leiden_scanvi_0_5")

sc.pl.umap(adata_cosmx, color = "leiden_scanvi_0_3")

adata_cosmx.obs["leiden_scanvi_0_3"].value_counts()

adata_sn=adata[adata.obs["tech"]!="Cosmx"]
sc.pl.umap(adata_sn, color = "leiden_scanvi_0_3")
sc.pl.umap(adata_sn, color = "leiden_scanvi_0_5")

sc.pl.umap(adata_sn, color = "leiden_scanvi_0_5", groups='9')

adata_sn.obs["leiden_scanvi_0_5"].value_counts()

adata_sn.X = adata_sn.layers["counts"].copy()
sc.pp.log1p(adata_sn)
sc.tl.rank_genes_groups(adata_sn, groupby='leiden_scanvi_0_5', method='wilcoxon', pts = True)
sc.pl.rank_genes_groups(adata_sn, n_genes=25, sharey=False)

adata.obs["annotations_after_scanvi"].value_counts()



sc.pl.umap(adata_sn, color = "leiden_scanvi_0_3")
sc.pl.umap(adata_sn, color = "annotations_after_scanvi")

sc.pl.umap(adata_sn, color = "leiden_scanvi_0_3", groups='0')

adata_cosmx.obs["leiden_scanvi_0_3"].value_counts()
cell_identities = {'0': 'M2', '1': 'CD8+', '2': 'CD4+', '3': 'B', '4': 'Macro', '5': 'Unknown', '6': 'CD8+', '7': 'NK',
                   '8': 'Unknown', '9': 'Neutrophil', '10': 'Plasma', '11': 'Neutrophil', '12': 'CD4+', '13':'Baso/Mast', '14':'pDC',
                   '15':'cycling Lymphocytes','16':'cDC','17':'B', '18':'mDC'}
adata_cosmx.obs["annotations_after_scanvi"] = adata_cosmx.obs['leiden_scanvi_0_3'].map(cell_identities).astype('category')

sc.pl.umap(adata_cosmx, color = "annotations_after_scanvi", frameon = False)
sc.pl.umap(adata_cosmx, color = "annotations_after_scanvi", legend_loc='on data', legend_fontsize=10, legend_fontoutline=2, frameon = False)

sc.pl.umap(adata_sn, color = "annotations_after_scanvi")

df1=pd.read_csv('/content/drive/MyDrive/Bernhard/Immune_Cell_Atlas/SC_Cosmx_annotations.csv')
df2=pd.read_csv('/content/drive/MyDrive/Bernhard/Immune_Cell_Atlas/SN_Cosmx_annotations.csv')

df1 = df1.set_index('Unnamed: 0')
df1.index.name = None
df2 = df2.set_index('Unnamed: 0')
df2.index.name = None

print(df1)

df3 = pd.DataFrame({'annotation': adata_cosmx.obs["annotations_after_scanvi"]})
print(df3)

# Rename the 'annotation' column in each DataFrame
df1_renamed = df1.rename(columns={'annotation': 'annotation_sc'})
df2_renamed = df2.rename(columns={'annotation': 'annotation_sn'})
df3_renamed = df3.rename(columns={'annotation': 'annotation_integration'})

# Merge the DataFrames on their indices
merged_df = df1_renamed.join([df2_renamed, df3_renamed])

print(merged_df)

# Filter the merged DataFrame
filtered_df = merged_df[(merged_df['annotation_sc'] == 'Macro') & (merged_df['annotation_sn'] == 'Macro')]

print(filtered_df)

filtered_df_2 = filtered_df[(filtered_df['annotation_integration'] != 'M2')]

print(filtered_df_2)

df3['annotation'] = pd.Categorical(df3['annotation'],
                                  categories=adata.obs['annotations_after_scanvi'].cat.categories)

# Then, attempt the assignment
adata.obs.loc[df3.index, 'annotations_after_scanvi'] = df3['annotation']

filtered_df_2['annotation_sn'] = pd.Categorical(filtered_df_2['annotation_sn'],
                                  categories=adata.obs['annotations_after_scanvi'].cat.categories)

# Then, attempt the assignment
adata.obs.loc[filtered_df_2.index, 'annotations_after_scanvi'] = filtered_df_2['annotation_sn']

sc.pl.umap(adata, color = "annotations_after_scanvi")

# Assuming adata is your AnnData object

# Replace 'T' with 'CD8+' in 'annotations_after_scanvi'
adata.obs.loc[adata.obs["annotations_after_scanvi"] == 'T', "annotations_after_scanvi"] = 'CD8+'

sc.pl.umap(adata, color = "annotations_after_scanvi")

adata.obs["annotations_after_scanvi"].value_counts()

adata.obs["annotations_after_scanvi"] = adata.obs["annotations_after_scanvi"].cat.remove_categories(['T'])

sc.pl.umap(adata, color = "annotations_after_scanvi")

adata.write('/content/drive/MyDrive/Bernhard/Immune_Cell_Atlas/SN_SC_Cosmx_Immune_SCVI_V1_SCANVI_annotated_V3.h5ad')

print(adata.obs["annotations_after_scanvi"].value_counts())

adata= sc.read_h5ad('/content/drive/MyDrive/Bernhard/Immune_Cell_Atlas/SN_SC_Cosmx_Immune_SCVI_V1_SCANVI_annotated_V4.h5ad')

sc.pl.umap(adata, color = "tech")

sc.pl.umap(adata, color = "leiden_scanvi_0_1")
sc.pl.umap(adata, color = "leiden_scanvi_0_3")
sc.pl.umap(adata, color = "leiden_scanvi_0_5")
sc.pl.umap(adata, color = "annotations_after_scanvi")

adata_cosmx=adata[adata.obs["tech"]=="Cosmx"]

sc.pl.umap(adata_cosmx, color = "leiden_scanvi_0_3", groups='18')

adata_cosmx.obs["leiden_scanvi_0_3"].value_counts()
cell_identities = {'0': 'CD8+', '1': 'M2', '2': 'CD4+', '3': 'Macro', '4': 'B', '5': 'NK', '6': 'Unknown', '7': 'cDC',
                   '8': 'Neutrophil', '9': 'Neutrophil', '10': 'CD8+', '11': 'Neutrophil', '12': 'Plasma', '13':'Baso/Mast', '14':'B',
                   '15':'pDC','16':'cycling Lymphocytes','17':'mDC'}
adata_cosmx.obs["annotations_after_scanvi"] = adata_cosmx.obs['leiden_scanvi_0_3'].map(cell_identities).astype('category')

sc.pl.umap(adata_cosmx, color = "annotations_after_scanvi", frameon = False)
sc.pl.umap(adata_cosmx, color = "annotations_after_scanvi", legend_loc='on data', legend_fontsize=10, legend_fontoutline=2, frameon = False)

adata_cosmx.obs["annotations_after_scanvi"].value_counts()

adata_sn=adata[adata.obs["tech"]!="Cosmx"]

sc.pl.umap(adata_sn, color = "leiden_scanvi_0_3", groups='18')
sc.pl.umap(adata_sn, color = "annotations_after_scanvi")

sc.pl.umap(adata_sn, color = "tech")

adata_sn.X = adata_sn.layers["counts"].copy()
sc.pp.log1p(adata_sn)
sc.tl.rank_genes_groups(adata_sn, groupby='leiden_scanvi_0_3', method='wilcoxon', pts = True)
sc.pl.rank_genes_groups(adata_sn, n_genes=25, sharey=False)

df = pd.DataFrame({'annotation': adata_cosmx.obs["annotations_after_scanvi"]})
print(df)

# Then, attempt the assignment
adata.obs.loc[df.index, 'annotations_after_scanvi'] = df['annotation']

sc.pl.umap(adata, color = "annotations_after_scanvi")

adata.write('/content/drive/MyDrive/Bernhard/Immune_Cell_Atlas/SN_SC_Cosmx_Immune_SCVI_V1_SCANVI_annotated_V4.h5ad')

print(adata.obs["annotations_after_scanvi"].value_counts())

adata_2=sc.read_h5ad('/content/drive/MyDrive/Bernhard/Immune_Cell_Atlas/SN_SC_Cosmx_Immune_SCVI_V1_SCANVI_annotated_V3.h5ad')
print(adata_2.obs["annotations_after_scanvi"].value_counts())

adata=sc.read_h5ad('/content/drive/MyDrive/Bernhard/Immune_Cell_Atlas/SN_SC_Cosmx_Immune_SCVI_V1_SCANVI_annotated_V5.h5ad')

sc.pl.umap(adata, color = "annotations_after_scanvi")

sc.pl.umap(adata, color = "tech")

sc.pl.umap(adata, color = "leiden_scanvi_0_1")
sc.pl.umap(adata, color = "leiden_scanvi_0_3")
sc.pl.umap(adata, color = "leiden_scanvi_0_5")

sc.pl.umap(adata, color = "leiden_scanvi_0_5", groups='8')

adata_sn=adata[adata.obs["tech"]!="Cosmx"]
adata_cosmx=adata[adata.obs["tech"]=="Cosmx"]



sc.pl.umap(adata_sn, color = "leiden_scanvi_0_1")
sc.pl.umap(adata_sn, color = "leiden_scanvi_0_3")
sc.pl.umap(adata_sn, color = "leiden_scanvi_0_5")

sc.pl.umap(adata, color = "IFNG", vmax=1)

adata.X = adata.layers["counts"].copy()
sc.pp.log1p(adata)
sc.tl.rank_genes_groups(adata, groupby='leiden_scanvi_0_3', method='wilcoxon', pts = True)
sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False)

sc.pl.umap(adata, color = "Cluster_Idents")

adata.X = adata.layers["counts"].copy()
sc.pp.log1p(adata)
sc.tl.rank_genes_groups(adata, groupby='leiden_scanvi_0_5', method='wilcoxon', pts = True)
sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False)

adata_sn.X = adata_sn.layers["counts"].copy()
sc.pp.log1p(adata_sn)
sc.tl.rank_genes_groups(adata_sn, groupby='leiden_scanvi_0_5', method='wilcoxon', pts = True)
sc.pl.rank_genes_groups(adata_sn, n_genes=25, sharey=False)

sc.pl.umap(adata_sn, color = "leiden_scanvi_0_3", groups='12')

sc.pl.umap(adata_cosmx, color = "leiden_scanvi_0_3", groups='9')

adata_cosmx.X = adata_cosmx.layers["counts"].copy()
sc.pp.log1p(adata_cosmx)

# Identify all unique groups
all_groups = adata_cosmx.obs['leiden_scanvi_0_3'].unique()

# Convert groups to strings, exclude groups '15' and '16'
groups_to_analyze = [str(group) for group in all_groups if group not in ['15', '16']]

# Perform differential expression analysis excluding groups '15' and '16'
sc.tl.rank_genes_groups(adata_cosmx, groupby='leiden_scanvi_0_3', groups=groups_to_analyze, reference='rest', method='wilcoxon', pts=True)

# Visualize the results
sc.pl.rank_genes_groups(adata_cosmx, n_genes=25, sharey=False)

adata_cosmx.obs["leiden_scanvi_0_3"].value_counts()

from sklearn.neighbors import NearestNeighbors
# Specify the number of neighbors (e.g., 15)
n_neighbors = 10
# Filter cells where ["tech"] is 'Cosmx'
Cosmx_cells_mask = (adata.obs['tech'] == 'Cosmx')
scRNA_cells_mask = (adata.obs['tech'] != 'Cosmx')
CosMx_index = np.where(Cosmx_cells_mask)[0]
scRNA_index = np.where(scRNA_cells_mask)[0]
nn = NearestNeighbors(n_neighbors=n_neighbors, metric='euclidean')
nn.fit(adata.obsm["X_scANVI"][scRNA_cells_mask])
distances_all_to_non_Cosmx, indices_all_to_non_Cosmx = nn.kneighbors(adata.obsm["X_scVI"][Cosmx_cells_mask])
print(len(indices_all_to_non_Cosmx))

mean_distance = (distances_all_to_non_Cosmx).sum(axis=1)/10
print(mean_distance.shape)

adata.obs['mean_distance'] = np.nan
adata.obs.loc[Cosmx_cells_mask, 'mean_distance'] = mean_distance

sc.pl.umap(adata, color = "mean_distance")

sc.pl.umap(adata_cosmx, color = "leiden_scanvi_0_3", groups='16')

adata_cosmx.obs["leiden_scanvi_0_3"].value_counts()

adata_cosmx.obs["leiden_scanvi_0_3"].value_counts()
cell_identities = {'0': 'M2', '1': 'Macro', '2': 'CD4+', '3': 'CD8+ 1', '4': 'CD8+ 2', '5': 'B', '6': 'NK', '7': 'CD16+ Mono',
                   '8': 'cDC', '9': 'CD4+', '10': 'CD14+ Mono', '11': 'Neutrophil', '12': 'Plasma', '13':'Baso/Mast', '14':'pDC',
                   '15':'cycling Lymphocytes','16':'B'}
adata_cosmx.obs["annotations_after_scanvi"] = adata_cosmx.obs['leiden_scanvi_0_3'].map(cell_identities).astype('category')

sc.pl.umap(adata_cosmx, color = "annotations_after_scanvi", frameon = False)
sc.pl.umap(adata_cosmx, color = "annotations_after_scanvi", legend_loc='on data', legend_fontsize=10, legend_fontoutline=2, frameon = False)

sc.pl.umap(adata_sn, color = "leiden_scanvi_0_3", groups='17')

sc.pl.umap(adata_sn, color = "annotations_after_scanvi")

sc.pl.umap(adata_sn, color = "leiden_scanvi_0_3", groups='16')

sc.pl.umap(adata_sn, color = "leiden_scanvi_0_5")

sc.pl.umap(adata_sn, color = "tech")

#1 we need to designate CD8 1 and 2
#we need to annotated the monocyte sn/sc specific clusters
#we need to map the cosmx back
#we need to make sure those mDC stay thats leiden_scanvi 5

adata.obs['annotations_after_scanvi'] = adata.obs['annotations_after_scanvi'].cat.add_categories(['CD8+ 1'])
adata.obs['annotations_after_scanvi'] = adata.obs['annotations_after_scanvi'].cat.add_categories(['CD8+ 2'])
adata.obs.loc[adata.obs['leiden_scanvi_0_3'] == '3', 'annotations_after_scanvi'] = 'CD8+ 1'
adata.obs.loc[adata.obs['leiden_scanvi_0_3'] == '4', 'annotations_after_scanvi'] = 'CD8+ 2'

sc.pl.umap(adata, color = "annotations_after_scanvi", groups="CD8+")

adata.obs["annotations_after_scanvi"].value_counts()

adata.obs["leiden_scanvi_0_3"].value_counts()
cell_identities = {'0': 'M2', '1': 'Macro', '2': 'CD4+', '3': 'CD8+ 1', '4': 'CD8+ 2', '5': 'B', '6': 'NK', '7': 'CD16+ Mono',
                   '8': 'cDC', '9': 'CD4+', '10': 'CD14+ Mono', '11': 'Neutrophil', '12': 'Plasma', '13':'Baso/Mast', '14':'pDC',
                   '15':'cycling Lymphocytes','16':'cytotox B'}
adata.obs["annotations_after_scanvi"] = adata.obs['leiden_scanvi_0_3'].map(cell_identities).astype('category')

sc.pl.umap(adata, color = "annotations_after_scanvi", frameon = False)
sc.pl.umap(adata, color = "annotations_after_scanvi", legend_loc='on data', legend_fontsize=10, legend_fontoutline=2, frameon = False)

adata.obs["annotations_after_scanvi"].value_counts()

sc.pl.umap(adata, color = "leiden_scanvi_0_5", groups='24')

adata.obs['annotations_after_scanvi'] = adata.obs['annotations_after_scanvi'].cat.add_categories(['mDC'])
adata.obs.loc[adata.obs['leiden_scanvi_0_5'] == '24', 'annotations_after_scanvi'] = 'mDC'

sc.pl.umap(adata, color = "annotations_after_scanvi", frameon = False)

adata.obs["annotations_after_scanvi"].value_counts()

adata.write('/content/drive/MyDrive/Bernhard/Immune_Cell_Atlas/SN_SC_Cosmx_Immune_SCVI_V1_SCANVI_annotated_V5.h5ad')

adata=sc.read_h5ad('/content/drive/MyDrive/Bernhard/Immune_Cell_Atlas/SN_SC_Cosmx_Immune_SCVI_V1_SCANVI_annotated_V6.h5ad')

sc.pl.umap(adata, color = "annotations_after_scanvi")

sc.pl.umap(adata, color = "leiden_scanvi_0_1")
sc.pl.umap(adata, color = "leiden_scanvi_0_3")
sc.pl.umap(adata, color = "leiden_scanvi_0_5")

sc.pl.umap(adata, color = "proj")
sc.pl.umap(adata, color = "tech", groups='SN_SEQ')
sc.pl.umap(adata, color = "proj", groups='Cosmx')
sc.pl.umap(adata, color = "proj", groups='SC_Susztak')
sc.pl.umap(adata, color = "proj", groups='h_KPMP')
sc.pl.umap(adata, color = "proj", groups='h_Susztak')
sc.pl.umap(adata, color = "proj", groups='humphreys_ADPKD')
sc.pl.umap(adata, color = "proj", groups='multiome_CKD')

sc.pl.umap(adata, color = "leiden_scanvi_0_3")

adata.X = adata.layers["counts"].copy()
sc.pp.log1p(adata)
sc.tl.rank_genes_groups(adata, groupby='leiden_scanvi_0_3', method='wilcoxon', pts = True)
sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False)

adata.X = adata.layers["counts"].copy()
sc.pp.log1p(adata)
sc.tl.rank_genes_groups(adata, groupby='leiden_scanvi_0_3', groups=['4'], reference='3', method='wilcoxon', pts = True)
sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False)

sc.pl.umap(adata, color = "leiden_scanvi_0_3", groups='16')

adata.obs["leiden_scanvi_0_3"].value_counts()
cell_identities = {'0': 'M2', '1': 'Macro', '2': 'CD4+', '3': 'CD8+ 1', '4': 'CD8+ 2', '5': 'B', '6': 'NK', '7': 'CD16+ Mono',
                   '8': 'cDC', '9': 'CD4+', '10': 'CD14+ Mono', '11': 'Neutrophil', '12': 'Plasma', '13':'Baso/Mast', '14':'pDC',
                   '15':'cycling Lymphocytes','16':'cytotox B'}
adata.obs["annotations_after_scanvi"] = adata.obs['leiden_scanvi_0_3'].map(cell_identities).astype('category')

sc.pl.umap(adata, color = "annotations_after_scanvi", frameon = False)
sc.pl.umap(adata, color = "annotations_after_scanvi", legend_loc='on data', legend_fontsize=10, legend_fontoutline=2, frameon = False)

sc.pl.umap(adata, color = "leiden_scanvi_0_5")

adata.obs['annotations_after_scanvi'] = adata.obs['annotations_after_scanvi'].cat.add_categories(['mDC'])
adata.obs.loc[adata.obs['leiden_scanvi_0_5'] == '24', 'annotations_after_scanvi'] = 'mDC'

sc.pl.umap(adata, color = "annotations_after_scanvi", frameon=False, title='Immune Cell Atlas')

adata.write('/content/drive/MyDrive/Bernhard/Immune_Cell_Atlas/Immune_Cell_Atlas_final.h5ad')