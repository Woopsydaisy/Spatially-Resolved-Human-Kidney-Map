# -*- coding: utf-8 -*-
"""Limma.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bIgHPRhccnmaAoUsgiDcvJGO0N3Wcxcb
"""

# Load necessary libraries
if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")
BiocManager::install("limma")

library(limma)

"""first the Tubules"""

# Read the data
data <- read.csv("/content/expression_matrix_cleaned_tubules_cluster_iTAL_b_cell.csv")
data <- data[, colSums(is.na(data)) == 0]
data

# Load the limma package
library(limma)

# Assuming 'data' is your dataframe and 'b_cluster' is the column with cluster information
# Create a binary variable for the high cluster against the rest
data$high_vs_rest <- ifelse(data$b_cluster == "high", "high", "rest")

# Exclude the first column (sample names) and 'iTAL_cluster' column from the expression matrix
expression_matrix <- data[, -which(names(data) %in% c("b_cluster", "iTAL_cluster", "high_vs_rest"))]
expression_matrix <- expression_matrix[, -1]  # Assuming the first column is the sample names

# Transpose the expression matrix
expression_matrix <- t(expression_matrix)

# Create a design matrix for the comparison of high vs the rest
design <- model.matrix(~ factor(data$high_vs_rest))

# Fit the linear model
fit <- lmFit(expression_matrix, design)

# Apply empirical Bayes smoothing
fit <- eBayes(fit)

# Get the results for the comparison (high vs rest)
results_high_vs_rest <- topTable(fit, coef = 2, number = nrow(expression_matrix))

# Save the results to CSV files
write.csv(results_high_vs_rest, "differential_expression_results_tubule_b_high_vs_rest.csv")

# Since the comparison of rest vs high is essentially the same but with swapped labels, we don't need a separate analysis
# If you specifically need rest vs high, you can relevel the factor and repeat the analysis

# Relevel the factor for rest vs high comparison (if needed)
data$high_vs_rest <- factor(data$high_vs_rest, levels = c("rest", "high"))
design <- model.matrix(~ factor(data$high_vs_rest))

# Fit the linear model again
fit <- lmFit(expression_matrix, design)

# Apply empirical Bayes smoothing
fit <- eBayes(fit)

# Get the results for the comparison (rest vs high)
results_rest_vs_high <- topTable(fit, coef = 2, number = nrow(expression_matrix))

# Save the results to CSV files
write.csv(results_rest_vs_high, "differential_expression_results_tubule_b_rest_vs_high.csv")

data$high_vs_rest <- NULL

# Load the limma package
library(limma)

# Assuming 'data' is your dataframe and 'b_cluster' is the column with cluster information
# Create a binary variable for the high cluster against the rest
data$high_vs_rest <- ifelse(data$iTAL_cluster == "high", "high", "rest")

# Exclude the first column (sample names) and 'iTAL_cluster' column from the expression matrix
expression_matrix <- data[, -which(names(data) %in% c("b_cluster", "iTAL_cluster", "high_vs_rest"))]
expression_matrix <- expression_matrix[, -1]  # Assuming the first column is the sample names

# Transpose the expression matrix
expression_matrix <- t(expression_matrix)

# Create a design matrix for the comparison of high vs the rest
design <- model.matrix(~ factor(data$high_vs_rest))

# Fit the linear model
fit <- lmFit(expression_matrix, design)

# Apply empirical Bayes smoothing
fit <- eBayes(fit)

# Get the results for the comparison (high vs rest)
results_high_vs_rest <- topTable(fit, coef = 2, number = nrow(expression_matrix))

# Save the results to CSV files
write.csv(results_high_vs_rest, "differential_expression_results_tubule_ital_high_vs_rest.csv")

# Since the comparison of rest vs high is essentially the same but with swapped labels, we don't need a separate analysis
# If you specifically need rest vs high, you can relevel the factor and repeat the analysis

# Relevel the factor for rest vs high comparison (if needed)
data$high_vs_rest <- factor(data$high_vs_rest, levels = c("rest", "high"))
design <- model.matrix(~ factor(data$high_vs_rest))

# Fit the linear model again
fit <- lmFit(expression_matrix, design)

# Apply empirical Bayes smoothing
fit <- eBayes(fit)

# Get the results for the comparison (rest vs high)
results_rest_vs_high <- topTable(fit, coef = 2, number = nrow(expression_matrix))

# Save the results to CSV files
write.csv(results_rest_vs_high, "differential_expression_results_tubule_ital_rest_vs_high.csv")

"""Cortex"""

# Read the data
data <- read.csv("/content/expression_matrix_cleaned_cortex_cluster_iTAL_b_cell.csv")
data <- data[, colSums(is.na(data)) == 0]
data

# Load the limma package
library(limma)

# Assuming 'data' is your dataframe and 'b_cluster' is the column with cluster information
# Create a binary variable for the high cluster against the rest
data$high_vs_rest <- ifelse(data$b_cluster == "high", "high", "rest")

# Exclude the first column (sample names) and 'iTAL_cluster' column from the expression matrix
expression_matrix <- data[, -which(names(data) %in% c("b_cluster", "iTAL_cluster", "high_vs_rest"))]
expression_matrix <- expression_matrix[, -1]  # Assuming the first column is the sample names

# Transpose the expression matrix
expression_matrix <- t(expression_matrix)

# Create a design matrix for the comparison of high vs the rest
design <- model.matrix(~ factor(data$high_vs_rest))

# Fit the linear model
fit <- lmFit(expression_matrix, design)

# Apply empirical Bayes smoothing
fit <- eBayes(fit)

# Get the results for the comparison (high vs rest)
results_high_vs_rest <- topTable(fit, coef = 2, number = nrow(expression_matrix))

# Save the results to CSV files
write.csv(results_high_vs_rest, "differential_expression_results_cortex_b_high_vs_rest.csv")

# Since the comparison of rest vs high is essentially the same but with swapped labels, we don't need a separate analysis
# If you specifically need rest vs high, you can relevel the factor and repeat the analysis

# Relevel the factor for rest vs high comparison (if needed)
data$high_vs_rest <- factor(data$high_vs_rest, levels = c("rest", "high"))
design <- model.matrix(~ factor(data$high_vs_rest))

# Fit the linear model again
fit <- lmFit(expression_matrix, design)

# Apply empirical Bayes smoothing
fit <- eBayes(fit)

# Get the results for the comparison (rest vs high)
results_rest_vs_high <- topTable(fit, coef = 2, number = nrow(expression_matrix))

# Save the results to CSV files
write.csv(results_rest_vs_high, "differential_expression_results_cortex_b_rest_vs_high.csv")

data$high_vs_rest <- NULL

# Load the limma package
library(limma)

# Assuming 'data' is your dataframe and 'b_cluster' is the column with cluster information
# Create a binary variable for the high cluster against the rest
data$high_vs_rest <- ifelse(data$iTAL_cluster == "high", "high", "rest")

# Exclude the first column (sample names) and 'iTAL_cluster' column from the expression matrix
expression_matrix <- data[, -which(names(data) %in% c("b_cluster", "iTAL_cluster", "high_vs_rest"))]
expression_matrix <- expression_matrix[, -1]  # Assuming the first column is the sample names

# Transpose the expression matrix
expression_matrix <- t(expression_matrix)

# Create a design matrix for the comparison of high vs the rest
design <- model.matrix(~ factor(data$high_vs_rest))

# Fit the linear model
fit <- lmFit(expression_matrix, design)

# Apply empirical Bayes smoothing
fit <- eBayes(fit)

# Get the results for the comparison (high vs rest)
results_high_vs_rest <- topTable(fit, coef = 2, number = nrow(expression_matrix))

# Save the results to CSV files
write.csv(results_high_vs_rest, "differential_expression_results_cortex_ital_high_vs_rest.csv")

# Since the comparison of rest vs high is essentially the same but with swapped labels, we don't need a separate analysis
# If you specifically need rest vs high, you can relevel the factor and repeat the analysis

# Relevel the factor for rest vs high comparison (if needed)
data$high_vs_rest <- factor(data$high_vs_rest, levels = c("rest", "high"))
design <- model.matrix(~ factor(data$high_vs_rest))

# Fit the linear model again
fit <- lmFit(expression_matrix, design)

# Apply empirical Bayes smoothing
fit <- eBayes(fit)

# Get the results for the comparison (rest vs high)
results_rest_vs_high <- topTable(fit, coef = 2, number = nrow(expression_matrix))

# Save the results to CSV files
write.csv(results_rest_vs_high, "differential_expression_results_cortex_ital_rest_vs_high.csv")

"""TRIDENT"""

# Read the data
data <- read.csv("/content/expression_matrix_cleaned_TRIDENT_cluster_iTAL_b_cell.csv")
data <- data[, colSums(is.na(data)) == 0]
data

# Load the limma package
library(limma)

# Assuming 'data' is your dataframe and 'b_cluster' is the column with cluster information
# Create a binary variable for the high cluster against the rest
data$high_vs_rest <- ifelse(data$b_cluster == "high", "high", "rest")

# Exclude the first column (sample names) and 'iTAL_cluster' column from the expression matrix
expression_matrix <- data[, -which(names(data) %in% c("b_cluster", "iTAL_cluster", "high_vs_rest"))]
expression_matrix <- expression_matrix[, -1]  # Assuming the first column is the sample names

# Transpose the expression matrix
expression_matrix <- t(expression_matrix)

# Create a design matrix for the comparison of high vs the rest
design <- model.matrix(~ factor(data$high_vs_rest))

# Fit the linear model
fit <- lmFit(expression_matrix, design)

# Apply empirical Bayes smoothing
fit <- eBayes(fit)

# Get the results for the comparison (high vs rest)
results_high_vs_rest <- topTable(fit, coef = 2, number = nrow(expression_matrix))

# Save the results to CSV files
write.csv(results_high_vs_rest, "differential_expression_results_TRIDENT_b_high_vs_rest.csv")

# Since the comparison of rest vs high is essentially the same but with swapped labels, we don't need a separate analysis
# If you specifically need rest vs high, you can relevel the factor and repeat the analysis

# Relevel the factor for rest vs high comparison (if needed)
data$high_vs_rest <- factor(data$high_vs_rest, levels = c("rest", "high"))
design <- model.matrix(~ factor(data$high_vs_rest))

# Fit the linear model again
fit <- lmFit(expression_matrix, design)

# Apply empirical Bayes smoothing
fit <- eBayes(fit)

# Get the results for the comparison (rest vs high)
results_rest_vs_high <- topTable(fit, coef = 2, number = nrow(expression_matrix))

# Save the results to CSV files
write.csv(results_rest_vs_high, "differential_expression_results_TRIDENT_b_rest_vs_high.csv")

data$high_vs_rest <- NULL

# Load the limma package
library(limma)

# Assuming 'data' is your dataframe and 'b_cluster' is the column with cluster information
# Create a binary variable for the high cluster against the rest
data$high_vs_rest <- ifelse(data$iTAL_cluster == "high", "high", "rest")

# Exclude the first column (sample names) and 'iTAL_cluster' column from the expression matrix
expression_matrix <- data[, -which(names(data) %in% c("b_cluster", "iTAL_cluster", "high_vs_rest"))]
expression_matrix <- expression_matrix[, -1]  # Assuming the first column is the sample names

# Transpose the expression matrix
expression_matrix <- t(expression_matrix)

# Create a design matrix for the comparison of high vs the rest
design <- model.matrix(~ factor(data$high_vs_rest))

# Fit the linear model
fit <- lmFit(expression_matrix, design)

# Apply empirical Bayes smoothing
fit <- eBayes(fit)

# Get the results for the comparison (high vs rest)
results_high_vs_rest <- topTable(fit, coef = 2, number = nrow(expression_matrix))

# Save the results to CSV files
write.csv(results_high_vs_rest, "differential_expression_results_TRIDENT_ital_high_vs_rest.csv")

# Since the comparison of rest vs high is essentially the same but with swapped labels, we don't need a separate analysis
# If you specifically need rest vs high, you can relevel the factor and repeat the analysis

# Relevel the factor for rest vs high comparison (if needed)
data$high_vs_rest <- factor(data$high_vs_rest, levels = c("rest", "high"))
design <- model.matrix(~ factor(data$high_vs_rest))

# Fit the linear model again
fit <- lmFit(expression_matrix, design)

# Apply empirical Bayes smoothing
fit <- eBayes(fit)

# Get the results for the comparison (rest vs high)
results_rest_vs_high <- topTable(fit, coef = 2, number = nrow(expression_matrix))

# Save the results to CSV files
write.csv(results_rest_vs_high, "differential_expression_results_TRIDENT_ital_rest_vs_high.csv")





"""different version where first iTAL is subclustered and from the high iTAL group the B Cell group"""

# Read the data
data <- read.csv("/content/subsetexpression_matrix_cleaned_tubules_cluster_iTAL_b_cell.csv")
data <- data[, colSums(is.na(data)) == 0]

data

# Load the limma package
library(limma)

# Assuming 'data' is your dataframe and 'b_cluster' is the column with cluster information
# Create a binary variable for the high cluster against the rest
data$high_vs_rest <- ifelse(data$b_cluster == "high", "high", "rest")

# Exclude the first column (sample names) and 'iTAL_cluster' column from the expression matrix
expression_matrix <- data[, -which(names(data) %in% c("b_cluster", "iTAL_cluster", "high_vs_rest"))]
expression_matrix <- expression_matrix[, -1]  # Assuming the first column is the sample names

# Transpose the expression matrix
expression_matrix <- t(expression_matrix)

# Create a design matrix for the comparison of high vs the rest
design <- model.matrix(~ factor(data$high_vs_rest))

# Fit the linear model
fit <- lmFit(expression_matrix, design)

# Apply empirical Bayes smoothing
fit <- eBayes(fit)

# Get the results for the comparison (high vs rest)
results_high_vs_rest <- topTable(fit, coef = 2, number = nrow(expression_matrix))

# Save the results to CSV files
write.csv(results_high_vs_rest, "differential_expression_results_tubule_b_high_vs_rest_subset.csv")

# Since the comparison of rest vs high is essentially the same but with swapped labels, we don't need a separate analysis
# If you specifically need rest vs high, you can relevel the factor and repeat the analysis

# Relevel the factor for rest vs high comparison (if needed)
data$high_vs_rest <- factor(data$high_vs_rest, levels = c("rest", "high"))
design <- model.matrix(~ factor(data$high_vs_rest))

# Fit the linear model again
fit <- lmFit(expression_matrix, design)

# Apply empirical Bayes smoothing
fit <- eBayes(fit)

# Get the results for the comparison (rest vs high)
results_rest_vs_high <- topTable(fit, coef = 2, number = nrow(expression_matrix))

# Save the results to CSV files
write.csv(results_rest_vs_high, "differential_expression_results_tubule_b_rest_vs_high_subset.csv")





# Read the data
data <- read.csv("/content/subsetexpression_matrixv2_cleaned_tubules_cluster_iTAL_b_cell.csv")
data <- data[, colSums(is.na(data)) == 0]

data

# Load the limma package
library(limma)

# Assuming 'data' is your dataframe and 'b_cluster' is the column with cluster information
# Create a binary variable for the high cluster against the rest
data$high_vs_rest <- ifelse(data$b_cluster == "high", "high", "rest")

# Exclude the first column (sample names) and 'iTAL_cluster' column from the expression matrix
expression_matrix <- data[, -which(names(data) %in% c("b_cluster", "iTAL_cluster", "high_vs_rest"))]
expression_matrix <- expression_matrix[, -1]  # Assuming the first column is the sample names

# Transpose the expression matrix
expression_matrix <- t(expression_matrix)

# Create a design matrix for the comparison of high vs the rest
design <- model.matrix(~ factor(data$high_vs_rest))

# Fit the linear model
fit <- lmFit(expression_matrix, design)

# Apply empirical Bayes smoothing
fit <- eBayes(fit)

# Get the results for the comparison (high vs rest)
results_high_vs_rest <- topTable(fit, coef = 2, number = nrow(expression_matrix))

# Save the results to CSV files
write.csv(results_high_vs_rest, "differential_expression_results_tubule_b_high_vs_rest_subset.csv")

# Since the comparison of rest vs high is essentially the same but with swapped labels, we don't need a separate analysis
# If you specifically need rest vs high, you can relevel the factor and repeat the analysis

# Relevel the factor for rest vs high comparison (if needed)
data$high_vs_rest <- factor(data$high_vs_rest, levels = c("rest", "high"))
design <- model.matrix(~ factor(data$high_vs_rest))

# Fit the linear model again
fit <- lmFit(expression_matrix, design)

# Apply empirical Bayes smoothing
fit <- eBayes(fit)

# Get the results for the comparison (rest vs high)
results_rest_vs_high <- topTable(fit, coef = 2, number = nrow(expression_matrix))

# Save the results to CSV files
write.csv(results_rest_vs_high, "differential_expression_results_tubule_b_rest_vs_high_subset.csv")





# Read the data
data <- read.csv("/content/subsetexpression_matrixv3_cleaned_tubules_cluster_iTAL_b_cell.csv")
data <- data[, colSums(is.na(data)) == 0]

data

# Load the limma package
library(limma)

# Assuming 'data' is your dataframe and 'b_cluster' is the column with cluster information
# Create a binary variable for the high cluster against the rest
data$high_vs_rest <- ifelse(data$b_cluster == "high", "high", "rest")

# Exclude the first column (sample names) and 'iTAL_cluster' column from the expression matrix
expression_matrix <- data[, -which(names(data) %in% c("b_cluster", "iTAL_cluster", "high_vs_rest"))]
expression_matrix <- expression_matrix[, -1]  # Assuming the first column is the sample names

# Transpose the expression matrix
expression_matrix <- t(expression_matrix)

# Create a design matrix for the comparison of high vs the rest
design <- model.matrix(~ factor(data$high_vs_rest))

# Fit the linear model
fit <- lmFit(expression_matrix, design)

# Apply empirical Bayes smoothing
fit <- eBayes(fit)

# Get the results for the comparison (high vs rest)
results_high_vs_rest <- topTable(fit, coef = 2, number = nrow(expression_matrix))

# Save the results to CSV files
write.csv(results_high_vs_rest, "differential_expression_results_tubule_b_high_vs_rest_subset.csv")

# Since the comparison of rest vs high is essentially the same but with swapped labels, we don't need a separate analysis
# If you specifically need rest vs high, you can relevel the factor and repeat the analysis

# Relevel the factor for rest vs high comparison (if needed)
data$high_vs_rest <- factor(data$high_vs_rest, levels = c("rest", "high"))
design <- model.matrix(~ factor(data$high_vs_rest))

# Fit the linear model again
fit <- lmFit(expression_matrix, design)

# Apply empirical Bayes smoothing
fit <- eBayes(fit)

# Get the results for the comparison (rest vs high)
results_rest_vs_high <- topTable(fit, coef = 2, number = nrow(expression_matrix))

# Save the results to CSV files
write.csv(results_rest_vs_high, "differential_expression_results_tubule_b_rest_vs_high_subset.csv")











"""redid the clustering first iTAL --> then B

first the Tubules
"""

# Read the data
data <- read.csv("/content/expressionmatrix_cleaned_tubules_cluster_iTAL_clustering_then_b_cell.csv")
data <- data[, colSums(is.na(data)) == 0]
data

# Load the limma package
library(limma)

# Assuming 'data' is your dataframe and 'b_cluster' is the column with cluster information
# Create a binary variable for the high cluster against the rest
data$high_vs_rest <- ifelse(data$iTAL_cluster == "high", "high", "rest")

# Exclude the first column (sample names) and 'iTAL_cluster' column from the expression matrix
expression_matrix <- data[, -which(names(data) %in% c("b_cluster", "iTAL_cluster", "high_vs_rest"))]
expression_matrix <- expression_matrix[, -1]  # Assuming the first column is the sample names

# Transpose the expression matrix
expression_matrix <- t(expression_matrix)

# Create a design matrix for the comparison of high vs the rest
design <- model.matrix(~ factor(data$high_vs_rest))

# Fit the linear model
fit <- lmFit(expression_matrix, design)

# Apply empirical Bayes smoothing
fit <- eBayes(fit)

# Get the results for the comparison (high vs rest)
results_high_vs_rest <- topTable(fit, coef = 2, number = nrow(expression_matrix))

# Save the results to CSV files
write.csv(results_high_vs_rest, "differential_expression_results_tubule_ital_rest_vs_high.csv")

# Since the comparison of rest vs high is essentially the same but with swapped labels, we don't need a separate analysis
# If you specifically need rest vs high, you can relevel the factor and repeat the analysis

# Relevel the factor for rest vs high comparison (if needed)
data$high_vs_rest <- factor(data$high_vs_rest, levels = c("rest", "high"))
design <- model.matrix(~ factor(data$high_vs_rest))

# Fit the linear model again
fit <- lmFit(expression_matrix, design)

# Apply empirical Bayes smoothing
fit <- eBayes(fit)

# Get the results for the comparison (rest vs high)
results_rest_vs_high <- topTable(fit, coef = 2, number = nrow(expression_matrix))

# Save the results to CSV files
write.csv(results_rest_vs_high, "differential_expression_results_tubule_ital_high_vs_rest.csv")

data$high_vs_rest <- NULL

# Assuming your dataframe is named 'data'
data <- subset(data, iTAL_cluster == 'high')

# Load the limma package
library(limma)

# Assuming 'data' is your dataframe and 'b_cluster' is the column with cluster information
# Create a binary variable for the high cluster against the rest
data$high_vs_rest <- ifelse(data$b_cluster == "high", "high", "rest")

# Exclude the first column (sample names) and 'iTAL_cluster' column from the expression matrix
expression_matrix <- data[, -which(names(data) %in% c("b_cluster", "iTAL_cluster", "high_vs_rest"))]
expression_matrix <- expression_matrix[, -1]  # Assuming the first column is the sample names

# Transpose the expression matrix
expression_matrix <- t(expression_matrix)

# Create a design matrix for the comparison of high vs the rest
design <- model.matrix(~ factor(data$high_vs_rest))

# Fit the linear model
fit <- lmFit(expression_matrix, design)

# Apply empirical Bayes smoothing
fit <- eBayes(fit)

# Get the results for the comparison (high vs rest)
results_high_vs_rest <- topTable(fit, coef = 2, number = nrow(expression_matrix))

# Save the results to CSV files
write.csv(results_high_vs_rest, "differential_expression_results_tubule_b_rest_vs_high.csv")

# Since the comparison of rest vs high is essentially the same but with swapped labels, we don't need a separate analysis
# If you specifically need rest vs high, you can relevel the factor and repeat the analysis

# Relevel the factor for rest vs high comparison (if needed)
data$high_vs_rest <- factor(data$high_vs_rest, levels = c("rest", "high"))
design <- model.matrix(~ factor(data$high_vs_rest))

# Fit the linear model again
fit <- lmFit(expression_matrix, design)

# Apply empirical Bayes smoothing
fit <- eBayes(fit)

# Get the results for the comparison (rest vs high)
results_rest_vs_high <- topTable(fit, coef = 2, number = nrow(expression_matrix))

# Save the results to CSV files
write.csv(results_rest_vs_high, "differential_expression_results_tubule_b_high_vs_rest.csv")

"""Cortex"""

# Read the data
data <- read.csv("/content/expressionmatrix_cleaned_cortex_cluster_iTAL_clustering_then_b_cell.csv")
data <- data[, colSums(is.na(data)) == 0]
data

# Load the limma package
library(limma)

# Assuming 'data' is your dataframe and 'b_cluster' is the column with cluster information
# Create a binary variable for the high cluster against the rest
data$high_vs_rest <- ifelse(data$iTAL_cluster == "high", "high", "rest")

# Exclude the first column (sample names) and 'iTAL_cluster' column from the expression matrix
expression_matrix <- data[, -which(names(data) %in% c("b_cluster", "iTAL_cluster", "high_vs_rest"))]
expression_matrix <- expression_matrix[, -1]  # Assuming the first column is the sample names

# Transpose the expression matrix
expression_matrix <- t(expression_matrix)

# Create a design matrix for the comparison of high vs the rest
design <- model.matrix(~ factor(data$high_vs_rest))

# Fit the linear model
fit <- lmFit(expression_matrix, design)

# Apply empirical Bayes smoothing
fit <- eBayes(fit)

# Get the results for the comparison (high vs rest)
results_high_vs_rest <- topTable(fit, coef = 2, number = nrow(expression_matrix))

# Save the results to CSV files
write.csv(results_high_vs_rest, "differential_expression_results_cortex_ital_rest_vs_high.csv")

# Since the comparison of rest vs high is essentially the same but with swapped labels, we don't need a separate analysis
# If you specifically need rest vs high, you can relevel the factor and repeat the analysis

# Relevel the factor for rest vs high comparison (if needed)
data$high_vs_rest <- factor(data$high_vs_rest, levels = c("rest", "high"))
design <- model.matrix(~ factor(data$high_vs_rest))

# Fit the linear model again
fit <- lmFit(expression_matrix, design)

# Apply empirical Bayes smoothing
fit <- eBayes(fit)

# Get the results for the comparison (rest vs high)
results_rest_vs_high <- topTable(fit, coef = 2, number = nrow(expression_matrix))

# Save the results to CSV files
write.csv(results_rest_vs_high, "differential_expression_results_cortex_ital_high_vs_rest.csv")

data$high_vs_rest <- NULL

# Assuming your dataframe is named 'data'
data <- subset(data, iTAL_cluster == 'high')

data

# Load the limma package
library(limma)

# Assuming 'data' is your dataframe and 'b_cluster' is the column with cluster information
# Create a binary variable for the high cluster against the rest
data$high_vs_rest <- ifelse(data$b_cluster == "high", "high", "rest")

# Exclude the first column (sample names) and 'iTAL_cluster' column from the expression matrix
expression_matrix <- data[, -which(names(data) %in% c("b_cluster", "iTAL_cluster", "high_vs_rest"))]
expression_matrix <- expression_matrix[, -1]  # Assuming the first column is the sample names

# Transpose the expression matrix
expression_matrix <- t(expression_matrix)

# Create a design matrix for the comparison of high vs the rest
design <- model.matrix(~ factor(data$high_vs_rest))

# Fit the linear model
fit <- lmFit(expression_matrix, design)

# Apply empirical Bayes smoothing
fit <- eBayes(fit)

# Get the results for the comparison (high vs rest)
results_high_vs_rest <- topTable(fit, coef = 2, number = nrow(expression_matrix))

# Save the results to CSV files
write.csv(results_high_vs_rest, "differential_expression_results_cortex_b_rest_vs_high.csv")

# Since the comparison of rest vs high is essentially the same but with swapped labels, we don't need a separate analysis
# If you specifically need rest vs high, you can relevel the factor and repeat the analysis

# Relevel the factor for rest vs high comparison (if needed)
data$high_vs_rest <- factor(data$high_vs_rest, levels = c("rest", "high"))
design <- model.matrix(~ factor(data$high_vs_rest))

# Fit the linear model again
fit <- lmFit(expression_matrix, design)

# Apply empirical Bayes smoothing
fit <- eBayes(fit)

# Get the results for the comparison (rest vs high)
results_rest_vs_high <- topTable(fit, coef = 2, number = nrow(expression_matrix))

# Save the results to CSV files
write.csv(results_rest_vs_high, "differential_expression_results_cortex_b_high_vs_rest.csv")

"""TRIDENT"""

# Read the data
data <- read.csv("/content/expressionmatrix_cleaned_TRIDENT_cluster_iTAL_clustering_then_b_cell.csv")
data <- data[, colSums(is.na(data)) == 0]
data

# Load the limma package
library(limma)

# Assuming 'data' is your dataframe and 'b_cluster' is the column with cluster information
# Create a binary variable for the high cluster against the rest
data$high_vs_rest <- ifelse(data$iTAL_cluster == "high", "high", "rest")

# Exclude the first column (sample names) and 'iTAL_cluster' column from the expression matrix
expression_matrix <- data[, -which(names(data) %in% c("b_cluster", "iTAL_cluster", "high_vs_rest"))]
expression_matrix <- expression_matrix[, -1]  # Assuming the first column is the sample names

# Transpose the expression matrix
expression_matrix <- t(expression_matrix)

# Create a design matrix for the comparison of high vs the rest
design <- model.matrix(~ factor(data$high_vs_rest))

# Fit the linear model
fit <- lmFit(expression_matrix, design)

# Apply empirical Bayes smoothing
fit <- eBayes(fit)

# Get the results for the comparison (high vs rest)
results_high_vs_rest <- topTable(fit, coef = 2, number = nrow(expression_matrix))

# Save the results to CSV files
write.csv(results_high_vs_rest, "differential_expression_results_TRIDENT_ital_rest_vs_high.csv")

# Since the comparison of rest vs high is essentially the same but with swapped labels, we don't need a separate analysis
# If you specifically need rest vs high, you can relevel the factor and repeat the analysis

# Relevel the factor for rest vs high comparison (if needed)
data$high_vs_rest <- factor(data$high_vs_rest, levels = c("rest", "high"))
design <- model.matrix(~ factor(data$high_vs_rest))

# Fit the linear model again
fit <- lmFit(expression_matrix, design)

# Apply empirical Bayes smoothing
fit <- eBayes(fit)

# Get the results for the comparison (rest vs high)
results_rest_vs_high <- topTable(fit, coef = 2, number = nrow(expression_matrix))

# Save the results to CSV files
write.csv(results_rest_vs_high, "differential_expression_results_TRIDENT_ital_high_vs_rest.csv")

data$high_vs_rest <- NULL

# Assuming your dataframe is named 'data'
data <- subset(data, iTAL_cluster == 'high')

# Load the limma package
library(limma)

# Assuming 'data' is your dataframe and 'b_cluster' is the column with cluster information
# Create a binary variable for the high cluster against the rest
data$high_vs_rest <- ifelse(data$b_cluster == "high", "high", "rest")

# Exclude the first column (sample names) and 'iTAL_cluster' column from the expression matrix
expression_matrix <- data[, -which(names(data) %in% c("b_cluster", "iTAL_cluster", "high_vs_rest"))]
expression_matrix <- expression_matrix[, -1]  # Assuming the first column is the sample names

# Transpose the expression matrix
expression_matrix <- t(expression_matrix)

# Create a design matrix for the comparison of high vs the rest
design <- model.matrix(~ factor(data$high_vs_rest))

# Fit the linear model
fit <- lmFit(expression_matrix, design)

# Apply empirical Bayes smoothing
fit <- eBayes(fit)

# Get the results for the comparison (high vs rest)
results_high_vs_rest <- topTable(fit, coef = 2, number = nrow(expression_matrix))

# Save the results to CSV files
write.csv(results_high_vs_rest, "differential_expression_results_TRIDENT_b_rest_vs_high.csv")

# Since the comparison of rest vs high is essentially the same but with swapped labels, we don't need a separate analysis
# If you specifically need rest vs high, you can relevel the factor and repeat the analysis

# Relevel the factor for rest vs high comparison (if needed)
data$high_vs_rest <- factor(data$high_vs_rest, levels = c("rest", "high"))
design <- model.matrix(~ factor(data$high_vs_rest))

# Fit the linear model again
fit <- lmFit(expression_matrix, design)

# Apply empirical Bayes smoothing
fit <- eBayes(fit)

# Get the results for the comparison (rest vs high)
results_rest_vs_high <- topTable(fit, coef = 2, number = nrow(expression_matrix))

# Save the results to CSV files
write.csv(results_rest_vs_high, "differential_expression_results_TRIDENT_b_high_vs_rest.csv")



"""iTAL then B Clustering of Tridentproteomics"""

# Read the data
data <- read.csv("/content/plasma_proteomics_trident_clustered_iTAL_then_B.csv")
data <- data[, colSums(is.na(data)) == 0]
data

# Load the limma package
library(limma)

# Assuming 'data' is your dataframe and 'b_cluster' is the column with cluster information
# Create a binary variable for the high cluster against the rest
data$high_vs_rest <- ifelse(data$iTAL_cluster == "high", "high", "rest")

# Exclude the first column (sample names) and 'iTAL_cluster' column from the expression matrix
expression_matrix <- data[, -which(names(data) %in% c("b_cluster", "iTAL_cluster", "high_vs_rest"))]
expression_matrix <- expression_matrix[, -1]  # Assuming the first column is the sample names

# Transpose the expression matrix
expression_matrix <- t(expression_matrix)

# Create a design matrix for the comparison of high vs the rest
design <- model.matrix(~ factor(data$high_vs_rest))

# Fit the linear model
fit <- lmFit(expression_matrix, design)

# Apply empirical Bayes smoothing
fit <- eBayes(fit)

# Get the results for the comparison (high vs rest)
results_high_vs_rest <- topTable(fit, coef = 2, number = nrow(expression_matrix))

# Save the results to CSV files
write.csv(results_high_vs_rest, "differential_expression_results_TRIDENT_plasma_proteomics_ital_rest_vs_high.csv")

# Since the comparison of rest vs high is essentially the same but with swapped labels, we don't need a separate analysis
# If you specifically need rest vs high, you can relevel the factor and repeat the analysis

# Relevel the factor for rest vs high comparison (if needed)
data$high_vs_rest <- factor(data$high_vs_rest, levels = c("rest", "high"))
design <- model.matrix(~ factor(data$high_vs_rest))

# Fit the linear model again
fit <- lmFit(expression_matrix, design)

# Apply empirical Bayes smoothing
fit <- eBayes(fit)

# Get the results for the comparison (rest vs high)
results_rest_vs_high <- topTable(fit, coef = 2, number = nrow(expression_matrix))

# Save the results to CSV files
write.csv(results_rest_vs_high, "differential_expression_results_TRIDENT_plasma_proteomics_ital_high_vs_rest.csv")

data$high_vs_rest <- NULL

# Assuming your dataframe is named 'data'
data <- subset(data, iTAL_cluster == 'high')

# Load the limma package
library(limma)

# Assuming 'data' is your dataframe and 'b_cluster' is the column with cluster information
# Create a binary variable for the high cluster against the rest
data$high_vs_rest <- ifelse(data$b_cluster == "high", "high", "rest")

# Exclude the first column (sample names) and 'iTAL_cluster' column from the expression matrix
expression_matrix <- data[, -which(names(data) %in% c("b_cluster", "iTAL_cluster", "high_vs_rest"))]
expression_matrix <- expression_matrix[, -1]  # Assuming the first column is the sample names

# Transpose the expression matrix
expression_matrix <- t(expression_matrix)

# Create a design matrix for the comparison of high vs the rest
design <- model.matrix(~ factor(data$high_vs_rest))

# Fit the linear model
fit <- lmFit(expression_matrix, design)

# Apply empirical Bayes smoothing
fit <- eBayes(fit)

# Get the results for the comparison (high vs rest)
results_high_vs_rest <- topTable(fit, coef = 2, number = nrow(expression_matrix))

# Save the results to CSV files
write.csv(results_high_vs_rest, "differential_expression_results_TRIDENT_plasma_proteomics_b_rest_vs_high.csv")

# Since the comparison of rest vs high is essentially the same but with swapped labels, we don't need a separate analysis
# If you specifically need rest vs high, you can relevel the factor and repeat the analysis

# Relevel the factor for rest vs high comparison (if needed)
data$high_vs_rest <- factor(data$high_vs_rest, levels = c("rest", "high"))
design <- model.matrix(~ factor(data$high_vs_rest))

# Fit the linear model again
fit <- lmFit(expression_matrix, design)

# Apply empirical Bayes smoothing
fit <- eBayes(fit)

# Get the results for the comparison (rest vs high)
results_rest_vs_high <- topTable(fit, coef = 2, number = nrow(expression_matrix))

# Save the results to CSV files
write.csv(results_rest_vs_high, "differential_expression_results_TRIDENT_plasma_proteomics_b_high_vs_rest.csv")



"""Tissue Proteomics"""

# Read the data
data <- read.csv("/content/tissue_proteomics_clustered_iTAL_then_B.csv")
data <- data[, colSums(is.na(data)) == 0]
data

# Load the limma package
library(limma)

# Assuming 'data' is your dataframe and 'b_cluster' is the column with cluster information
# Create a binary variable for the high cluster against the rest
data$high_vs_rest <- ifelse(data$iTAL_cluster == "high", "high", "rest")

# Exclude the first column (sample names) and 'iTAL_cluster' column from the expression matrix
expression_matrix <- data[, -which(names(data) %in% c("b_cluster", "iTAL_cluster", "high_vs_rest"))]
expression_matrix <- expression_matrix[, -1]  # Assuming the first column is the sample names

# Transpose the expression matrix
expression_matrix <- t(expression_matrix)

# Create a design matrix for the comparison of high vs the rest
design <- model.matrix(~ factor(data$high_vs_rest))

# Fit the linear model
fit <- lmFit(expression_matrix, design)

# Apply empirical Bayes smoothing
fit <- eBayes(fit)

# Get the results for the comparison (high vs rest)
results_high_vs_rest <- topTable(fit, coef = 2, number = nrow(expression_matrix))

# Save the results to CSV files
write.csv(results_high_vs_rest, "differential_expression_results_cortex_tissue_proteomics_ital_rest_vs_high.csv")

# Since the comparison of rest vs high is essentially the same but with swapped labels, we don't need a separate analysis
# If you specifically need rest vs high, you can relevel the factor and repeat the analysis

# Relevel the factor for rest vs high comparison (if needed)
data$high_vs_rest <- factor(data$high_vs_rest, levels = c("rest", "high"))
design <- model.matrix(~ factor(data$high_vs_rest))

# Fit the linear model again
fit <- lmFit(expression_matrix, design)

# Apply empirical Bayes smoothing
fit <- eBayes(fit)

# Get the results for the comparison (rest vs high)
results_rest_vs_high <- topTable(fit, coef = 2, number = nrow(expression_matrix))

# Save the results to CSV files
write.csv(results_rest_vs_high, "differential_expression_results_cortex_tissue_proteomics_ital_high_vs_rest.csv")

data$high_vs_rest <- NULL

# Assuming your dataframe is named 'data'
data <- subset(data, iTAL_cluster == 'high')

# Load the limma package
library(limma)

# Assuming 'data' is your dataframe and 'b_cluster' is the column with cluster information
# Create a binary variable for the high cluster against the rest
data$high_vs_rest <- ifelse(data$b_cluster == "high", "high", "rest")

# Exclude the first column (sample names) and 'iTAL_cluster' column from the expression matrix
expression_matrix <- data[, -which(names(data) %in% c("b_cluster", "iTAL_cluster", "high_vs_rest"))]
expression_matrix <- expression_matrix[, -1]  # Assuming the first column is the sample names

# Transpose the expression matrix
expression_matrix <- t(expression_matrix)

# Create a design matrix for the comparison of high vs the rest
design <- model.matrix(~ factor(data$high_vs_rest))

# Fit the linear model
fit <- lmFit(expression_matrix, design)

# Apply empirical Bayes smoothing
fit <- eBayes(fit)

# Get the results for the comparison (high vs rest)
results_high_vs_rest <- topTable(fit, coef = 2, number = nrow(expression_matrix))

# Save the results to CSV files
write.csv(results_high_vs_rest, "differential_expression_results_cortex_tissue_proteomics_b_rest_vs_high.csv")

# Since the comparison of rest vs high is essentially the same but with swapped labels, we don't need a separate analysis
# If you specifically need rest vs high, you can relevel the factor and repeat the analysis

# Relevel the factor for rest vs high comparison (if needed)
data$high_vs_rest <- factor(data$high_vs_rest, levels = c("rest", "high"))
design <- model.matrix(~ factor(data$high_vs_rest))

# Fit the linear model again
fit <- lmFit(expression_matrix, design)

# Apply empirical Bayes smoothing
fit <- eBayes(fit)

# Get the results for the comparison (rest vs high)
results_rest_vs_high <- topTable(fit, coef = 2, number = nrow(expression_matrix))

# Save the results to CSV files
write.csv(results_rest_vs_high, "differential_expression_results_cortex_tissue_proteomics_b_high_vs_rest.csv")