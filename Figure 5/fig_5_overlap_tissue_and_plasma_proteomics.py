# -*- coding: utf-8 -*-
"""Fig 5 overlap tissue and plasma proteomics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Qf08oxGL9b-7Uy69wep_WfLAhIPW3ZNd
"""

import pandas as pd

overlap=pd.read_csv('/content/significant_iTAL_plasma_tissue_proteomics_overlap.csv')

overlap=overlap.set_index('Unnamed: 0')
overlap

overlap

DM_death=pd.read_csv('/content/DM_death.csv', low_memory=False)
DM_event_ki=pd.read_csv('/content/DM_event_ki.csv', low_memory=False)
HTN_death=pd.read_csv('/content/HTN_death.csv', low_memory=False)
HTN_event_ki=pd.read_csv('/content/HTN_event_ki.csv', low_memory=False)
gft60_death=pd.read_csv('/content/gft60_death.csv', low_memory=False)
gft60_event_ki=pd.read_csv('/content/gft60_event_ki.csv', low_memory=False)
all_event_event_ki=pd.read_csv('/content/3g_event_ki.csv', low_memory=False)

col_r = ["i", 'EntrezGeneSymbol', "Target", 'coef', 'exp(coef)', 'se(coef)', 'exp(coef) lower 95%', 'exp(coef) upper 95%', 'p', 'AUC']
DM_death = DM_death[col_r]
DM_death = DM_death.dropna(subset=['p'])
DM_event_ki = DM_event_ki[col_r]
DM_event_ki = DM_event_ki.dropna(subset=['p'])
HTN_death = HTN_death[col_r]
HTN_death = HTN_death.dropna(subset=['p'])
HTN_event_ki = HTN_event_ki[col_r]
HTN_event_ki = HTN_event_ki.dropna(subset=['p'])
gft60_death = gft60_death[col_r]
gft60_death = gft60_death.dropna(subset=['p'])
gft60_event_ki = gft60_event_ki[col_r]
gft60_event_ki = gft60_event_ki.dropna(subset=['p'])
all_event_event_ki = all_event_event_ki[col_r]
all_event_event_ki = all_event_event_ki.dropna(subset=['p'])

from statsmodels.stats.multitest import multipletests
p_values = DM_death['p'].values
adjusted_p_values = multipletests(p_values, method='fdr_bh')[1]
DM_death['adjusted_p'] = adjusted_p_values

p_values = DM_event_ki['p'].values
adjusted_p_values = multipletests(p_values, method='fdr_bh')[1]
DM_event_ki['adjusted_p'] = adjusted_p_values

p_values = HTN_death['p'].values
adjusted_p_values = multipletests(p_values, method='fdr_bh')[1]
HTN_death['adjusted_p'] = adjusted_p_values

p_values = HTN_event_ki['p'].values
adjusted_p_values = multipletests(p_values, method='fdr_bh')[1]
HTN_event_ki['adjusted_p'] = adjusted_p_values

p_values = gft60_death['p'].values
adjusted_p_values = multipletests(p_values, method='fdr_bh')[1]
gft60_death['adjusted_p'] = adjusted_p_values

p_values = gft60_event_ki['p'].values
adjusted_p_values = multipletests(p_values, method='fdr_bh')[1]
gft60_event_ki['adjusted_p'] = adjusted_p_values

p_values = all_event_event_ki['p'].values
adjusted_p_values = multipletests(p_values, method='fdr_bh')[1]
all_event_event_ki['adjusted_p'] = adjusted_p_values

DM_death=DM_death[DM_death['adjusted_p']<0.05]
DM_death.shape

DM_event_ki=DM_event_ki[DM_event_ki['adjusted_p']<0.05]
DM_event_ki.shape

HTN_death=HTN_death[HTN_death['adjusted_p']<0.05]
HTN_death.shape

HTN_event_ki=HTN_event_ki[HTN_event_ki['adjusted_p']<0.05]
HTN_event_ki.shape

gft60_death=gft60_death[gft60_death['adjusted_p']<0.05]

gft60_death.shape

gft60_event_ki=gft60_event_ki[gft60_event_ki['adjusted_p']<0.05]
gft60_event_ki.shape

all_event_event_ki=all_event_event_ki[all_event_event_ki['adjusted_p']<0.05]
all_event_event_ki.shape

DM_death = DM_death.dropna(subset=['EntrezGeneSymbol'])
DM_event_ki = DM_event_ki.dropna(subset=['EntrezGeneSymbol'])
HTN_death = HTN_death.dropna(subset=['EntrezGeneSymbol'])
HTN_event_ki = HTN_event_ki.dropna(subset=['EntrezGeneSymbol'])
gft60_death = gft60_death.dropna(subset=['EntrezGeneSymbol'])
gft60_event_ki = gft60_event_ki.dropna(subset=['EntrezGeneSymbol'])
all_event_event_ki=all_event_event_ki.dropna(subset=['EntrezGeneSymbol'])

DM_death=DM_death.set_index('EntrezGeneSymbol')
DM_event_ki=DM_event_ki.set_index('EntrezGeneSymbol')
HTN_death=HTN_death.set_index('EntrezGeneSymbol')
HTN_event_ki=HTN_event_ki.set_index('EntrezGeneSymbol')
gft60_death=gft60_death.set_index('EntrezGeneSymbol')
gft60_event_ki=gft60_event_ki.set_index('EntrezGeneSymbol')
all_event_event_ki=all_event_event_ki.set_index('EntrezGeneSymbol')

combined_DM_death = pd.merge(DM_death, overlap, left_index=True, right_index=True, how='inner')
combined_DM_event_ki = pd.merge(DM_event_ki, overlap, left_index=True, right_index=True, how='inner')
combined_HTN_death = pd.merge(HTN_death, overlap, left_index=True, right_index=True, how='inner')
combined_HTN_event_ki = pd.merge(HTN_event_ki, overlap, left_index=True, right_index=True, how='inner')
combined_gft60_death = pd.merge(gft60_death, overlap, left_index=True, right_index=True, how='inner')
combined_gft60_event_ki = pd.merge(gft60_event_ki, overlap, left_index=True, right_index=True, how='inner')
combined_all_event_event_ki = pd.merge(all_event_event_ki, overlap, left_index=True, right_index=True, how='inner')

print(combined_DM_death.shape)
print(combined_DM_event_ki.shape)
print(combined_HTN_death.shape)
print(combined_HTN_event_ki.shape)
print(combined_gft60_death.shape)
print(combined_gft60_event_ki.shape)
print(combined_all_event_event_ki.shape)

print(len(combined_DM_event_ki.index.unique()))
print(len(combined_HTN_event_ki.index.unique()))
print(len(combined_gft60_event_ki.index.unique()))
print(len(combined_all_event_event_ki.index.unique()))

combined_DM_event_ki.to_csv('combined_DM_event_ki_overlap_significant.csv', index=True)

combined_HTN_event_ki.to_csv('combined_HTN_event_ki_overlap_significant.csv', index=True)

combined_gft60_event_ki.to_csv('combined_gft60_event_ki_overlap_significant.csv', index=True)

combined_all_event_event_ki.to_csv('combined_all_event_event_ki.csv', index=True)

combined_DM_event_ki['group']='DM'
combined_HTN_event_ki['group']='HTN'
combined_gft60_event_ki['group']='GFR<60'
combined_all_event_event_ki['group']='All'
combined_DM_event_ki = combined_DM_event_ki.reset_index(drop=False)
combined_HTN_event_ki = combined_HTN_event_ki.reset_index(drop=False)
combined_gft60_event_ki = combined_gft60_event_ki.reset_index(drop=False)
combined_all_event_event_ki=combined_all_event_event_ki.reset_index(drop=False)
combined_gft60_event_ki

#index_DM_death = combined_DM_death.index
index_DM_event_ki = combined_DM_event_ki.index
#index_HTN_death = combined_HTN_death.index
index_HTN_event_ki = combined_HTN_event_ki.index
#index_gft60_death = combined_gft60_death.index
index_gft60_event_ki = combined_gft60_event_ki.index
index_combined_all_event_event_ki=combined_all_event_event_ki.index

# Find the intersection of all indexes
common_indexes = index_DM_event_ki.intersection(index_HTN_event_ki)\
                                .intersection(index_gft60_event_ki)\
                                .intersection(index_combined_all_event_event_ki)

# common_indexes now contains the intersection of all the indexes
print(len(common_indexes))

common_indexes

index_DM_death = combined_DM_death.index
#index_DM_event_ki = combined_DM_event_ki.index
index_HTN_death = combined_HTN_death.index
#index_HTN_event_ki = combined_HTN_event_ki.index
index_gft60_death = combined_gft60_death.index
#index_gft60_event_ki = combined_gft60_event_ki.index

# Find the intersection of all indexes
common_indexes = index_DM_death.intersection(index_HTN_death)\
                                .intersection(index_gft60_death)

# common_indexes now contains the intersection of all the indexes
print(len(common_indexes))

common_indexes

indexes_to_plot=['B2M', 'COL6A3', 'CST3', 'WFDC2', 'TNFRSF19', 'EFEMP1', 'ROR2', 'MMP7', 'SPP1']

subset_combined_DM_event_ki=combined_DM_event_ki[combined_DM_event_ki['EntrezGeneSymbol'].isin(indexes_to_plot)]
subset_combined_HTN_event_ki=combined_HTN_event_ki[combined_HTN_event_ki['EntrezGeneSymbol'].isin(indexes_to_plot)]
subset_combined_gft60_event_ki=combined_gft60_event_ki[combined_gft60_event_ki['EntrezGeneSymbol'].isin(indexes_to_plot)]
subset_combined_all_event_event_ki=combined_all_event_event_ki[combined_all_event_event_ki['EntrezGeneSymbol'].isin(indexes_to_plot)]

subset_combined_DM_event_ki['combined']=subset_combined_DM_event_ki['EntrezGeneSymbol']+' '+subset_combined_DM_event_ki['group']
subset_combined_HTN_event_ki['combined']=subset_combined_HTN_event_ki['EntrezGeneSymbol']+' '+subset_combined_HTN_event_ki['group']
subset_combined_gft60_event_ki['combined']=subset_combined_gft60_event_ki['EntrezGeneSymbol']+' '+subset_combined_gft60_event_ki['group']
subset_combined_all_event_event_ki['combined']=subset_combined_all_event_event_ki['EntrezGeneSymbol']+' '+subset_combined_all_event_event_ki['group']

subset_combined_all_event_event_ki

df = pd.concat([subset_combined_all_event_event_ki,subset_combined_DM_event_ki, subset_combined_HTN_event_ki, subset_combined_gft60_event_ki])

df.shape

df=df[df['i']!='seq.10574.10']
df.shape

import pandas as pd

# Assuming df is already defined in your environment and contains the relevant data

# Define the correct group order
group_order = ['All', 'DM', 'HTN', 'GFR<60']

# Sort the DataFrame first by 'EntrezGeneSymbol' and then by the 'group' to maintain the order of groups
df['group'] = pd.Categorical(df['group'], categories=group_order, ordered=True)
df = df.sort_values(by=['EntrezGeneSymbol', 'group'])

# Insert blank rows after every group of four (All, DM, HTN, GFR<60)
num_rows = len(df)
new_df = []

# Iterate over the DataFrame to insert blank rows after each group of four entries
current_symbol = None
counter = 0
counter2 = 0
for index, row in df.iterrows():
    # Check if the current symbol has changed, indicating a new block of entries
    if row['EntrezGeneSymbol'] != current_symbol:
        current_symbol = row['EntrezGeneSymbol']
        counter = 0  # Reset the counter for each new symbol

    # Append the current row to the new dataframe
    new_df.append(row)

    # Increment counter and insert blank row after four entries (All, DM, HTN, GFR<60)
    counter += 1

    if counter == 4:  # After the four groups (All, DM, HTN, GFR<60), insert a blank row
        blank_row = pd.Series([None] * len(df.columns), index=df.columns)
        blank_row['EntrezGeneSymbol'] = f'Blank+{counter2}'
        blank_row['group'] = f'Blank+{counter2}'
        new_df.append(blank_row)
        counter = 0  # Reset counter for the next group
        counter2=counter2+1

# Convert the list back into a DataFrame
new_df = pd.DataFrame(new_df).reset_index(drop=True)

# Preview the new DataFrame
print(new_df)

new_df

import matplotlib.pyplot as plt
import seaborn as sns

# Define colors
cm = ["#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00", "#FFFF33", "#A65628", "#F781BF"]

# Create a new column that combines EntrezGeneSymbol and group
new_df['symbol_group'] = new_df['EntrezGeneSymbol'] + ' (' + new_df['group'] + ')'

# Create the forest plot
plt.figure(figsize=(6.5, 7))
sns.set(style="whitegrid")

# Plot the data
ax = sns.pointplot(x="exp(coef)", y="symbol_group", hue="group", data=new_df, join=False, palette=cm)

# Add error bars for confidence intervals
for index, row in new_df.iterrows():
    if pd.notna(row['Target']):  # Ensure the row has data
        group_color = cm[new_df['group'].unique().tolist().index(row['group'])]
        plt.plot([row['exp(coef) lower 95%'], row['exp(coef) upper 95%']], [row['symbol_group'], row['symbol_group']], color=group_color, lw=1.5)

# Customize the plot
plt.xscale('linear')
plt.axvline(x=1, color='black', linestyle='--')
plt.xlabel('Hazard Ratio')
plt.ylabel('')
plt.xlim(0, 10)
plt.title('Forest Plot of Kidney Events')

# Remove the grid
sns.despine(left=True, bottom=True)
ax.grid(False)

# Add a black frame around the plot
for spine in ax.spines.values():
    spine.set_visible(True)
    spine.set_edgecolor('black')
    spine.set_linewidth(1.5)

# Customize the legend
legend = ax.legend(frameon=False)

# Save the plot
plt.tight_layout()
plt.savefig("hr_kidney_events_updated.png", bbox_inches='tight', dpi=450)
plt.show()

"""now for the composite outcome with death"""

DM_event=pd.read_csv('/content/DM_event.csv', low_memory=False)
HTN_event=pd.read_csv('/content/HTN_event.csv', low_memory=False)
gft60_event=pd.read_csv('/content/gft60_event.csv', low_memory=False)
all_event=pd.read_csv('/content/3g_event.csv', low_memory=False)

col_r = ["i", 'EntrezGeneSymbol', "Target", 'coef', 'exp(coef)', 'se(coef)', 'exp(coef) lower 95%', 'exp(coef) upper 95%', 'p', 'AUC']
DM_event = DM_event[col_r]
DM_event = DM_event.dropna(subset=['p'])
HTN_event = HTN_event[col_r]
HTN_event = HTN_event.dropna(subset=['p'])
gft60_event = gft60_event[col_r]
gft60_event = gft60_event.dropna(subset=['p'])
all_event = all_event[col_r]
all_event = all_event.dropna(subset=['p'])

from statsmodels.stats.multitest import multipletests
p_values = DM_event['p'].values
adjusted_p_values = multipletests(p_values, method='fdr_bh')[1]
DM_event['adjusted_p'] = adjusted_p_values

p_values = HTN_event['p'].values
adjusted_p_values = multipletests(p_values, method='fdr_bh')[1]
HTN_event['adjusted_p'] = adjusted_p_values

p_values = gft60_event['p'].values
adjusted_p_values = multipletests(p_values, method='fdr_bh')[1]
gft60_event['adjusted_p'] = adjusted_p_values

p_values = all_event['p'].values
adjusted_p_values = multipletests(p_values, method='fdr_bh')[1]
all_event['adjusted_p'] = adjusted_p_values

DM_event=DM_event[DM_event['adjusted_p']<0.05]
DM_event.shape

HTN_event=HTN_event[HTN_event['adjusted_p']<0.05]
HTN_event.shape

gft60_event=gft60_event[gft60_event['adjusted_p']<0.05]
gft60_event.shape

all_event=all_event[all_event['adjusted_p']<0.05]
all_event.shape

DM_event = DM_event.dropna(subset=['EntrezGeneSymbol'])
HTN_event = HTN_event.dropna(subset=['EntrezGeneSymbol'])
gft60_event = gft60_event.dropna(subset=['EntrezGeneSymbol'])
all_event = all_event.dropna(subset=['EntrezGeneSymbol'])

DM_event=DM_event.set_index('EntrezGeneSymbol')
HTN_event=HTN_event.set_index('EntrezGeneSymbol')
gft60_event=gft60_event.set_index('EntrezGeneSymbol')
all_event=all_event.set_index('EntrezGeneSymbol')

combined_DM_event = pd.merge(DM_event, overlap, left_index=True, right_index=True, how='inner')
combined_HTN_event = pd.merge(HTN_event, overlap, left_index=True, right_index=True, how='inner')
combined_gft60_event = pd.merge(gft60_event, overlap, left_index=True, right_index=True, how='inner')
combined_all_event = pd.merge(all_event, overlap, left_index=True, right_index=True, how='inner')

print(combined_DM_event.shape)
print(combined_HTN_event.shape)
print(combined_gft60_event.shape)
print(combined_all_event.shape)

print(len(combined_DM_event.index.unique()))
print(len(combined_HTN_event.index.unique()))
print(len(combined_gft60_event.index.unique()))
print(len(combined_all_event.index.unique()))

index_DM_event = combined_DM_event.index
index_HTN_event = combined_HTN_event.index
index_gft60_event = combined_gft60_event.index
index_combined_all_event = combined_all_event.index
# Find the intersection of all indexes
common_indexes = index_DM_event.intersection(index_HTN_event)\
                                .intersection(index_gft60_event)\
                                .intersection(index_combined_all_event)

# common_indexes now contains the intersection of all the indexes
print(len(common_indexes))

print(common_indexes)

combined_DM_event.to_csv('combined_DM_event_overlap_significant.csv', index=True)

combined_HTN_event.to_csv('combined_HTN_event_overlap_significant.csv', index=True)

combined_gft60_event.to_csv('combined_gft60_event_overlap_significant.csv', index=True)

combined_all_event.to_csv('combined_all_event_overlap_significant.csv', index=True)

combined_DM_event['group']='DM'
combined_HTN_event['group']='HTN'
combined_gft60_event['group']='GFR<60'
combined_all_event['group']='All'
combined_DM_event = combined_DM_event.reset_index(drop=False)
combined_HTN_event = combined_HTN_event.reset_index(drop=False)
combined_gft60_event = combined_gft60_event.reset_index(drop=False)
combined_all_event=combined_all_event.reset_index(drop=False)
combined_gft60_event

indexes_to_plot=['B2M', 'COL6A3', 'CST3', 'WFDC2', 'TNFRSF19', 'EFEMP1', 'ROR2', 'MMP7', 'SPP1']

subset_combined_DM_event=combined_DM_event[combined_DM_event['EntrezGeneSymbol'].isin(indexes_to_plot)]
subset_combined_HTN_event=combined_HTN_event[combined_HTN_event['EntrezGeneSymbol'].isin(indexes_to_plot)]
subset_combined_gft60_event=combined_gft60_event[combined_gft60_event['EntrezGeneSymbol'].isin(indexes_to_plot)]
subset_combined_all_event=combined_all_event[combined_all_event['EntrezGeneSymbol'].isin(indexes_to_plot)]

subset_combined_DM_event['combined']=subset_combined_DM_event['EntrezGeneSymbol']+' '+subset_combined_DM_event['group']
subset_combined_HTN_event['combined']=subset_combined_HTN_event['EntrezGeneSymbol']+' '+subset_combined_HTN_event['group']
subset_combined_gft60_event['combined']=subset_combined_gft60_event['EntrezGeneSymbol']+' '+subset_combined_gft60_event['group']
subset_combined_all_event['combined']=subset_combined_all_event['EntrezGeneSymbol']+' '+subset_combined_all_event['group']

df = pd.concat([subset_combined_all_event,subset_combined_DM_event, subset_combined_HTN_event, subset_combined_gft60_event])

df['combined'].unique()

df.shape

df=df[df['i']!='seq.10574.10']
df.shape

import pandas as pd

# Assuming df is already defined in your environment and contains the relevant data

# Define the correct group order
group_order = ['All', 'DM', 'HTN', 'GFR<60']

# Sort the DataFrame first by 'EntrezGeneSymbol' and then by the 'group' to maintain the order of groups
df['group'] = pd.Categorical(df['group'], categories=group_order, ordered=True)
df = df.sort_values(by=['EntrezGeneSymbol', 'group'])

# Insert blank rows after every group of four (All, DM, HTN, GFR<60)
num_rows = len(df)
new_df = []

# Iterate over the DataFrame to insert blank rows after each group of four entries
current_symbol = None
counter = 0
counter2 = 0
for index, row in df.iterrows():
    # Check if the current symbol has changed, indicating a new block of entries
    if row['EntrezGeneSymbol'] != current_symbol:
        current_symbol = row['EntrezGeneSymbol']
        counter = 0  # Reset the counter for each new symbol

    # Append the current row to the new dataframe
    new_df.append(row)

    # Increment counter and insert blank row after four entries (All, DM, HTN, GFR<60)
    counter += 1

    if counter == 4:  # After the four groups (All, DM, HTN, GFR<60), insert a blank row
        blank_row = pd.Series([None] * len(df.columns), index=df.columns)
        blank_row['EntrezGeneSymbol'] = f'Blank+{counter2}'
        blank_row['group'] = f'Blank+{counter2}'
        new_df.append(blank_row)
        counter = 0  # Reset counter for the next group
        counter2=counter2+1

# Convert the list back into a DataFrame
new_df = pd.DataFrame(new_df).reset_index(drop=True)

# Preview the new DataFrame
print(new_df)

new_df

import matplotlib.pyplot as plt
import seaborn as sns

# Define colors
cm = ["#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00", "#FFFF33", "#A65628", "#F781BF"]

# Create a new column that combines EntrezGeneSymbol and group
new_df['symbol_group'] = new_df['EntrezGeneSymbol'] + ' (' + new_df['group'] + ')'

# Create the forest plot
plt.figure(figsize=(6.5, 7))
sns.set(style="whitegrid")

# Plot the data
ax = sns.pointplot(x="exp(coef)", y="symbol_group", hue="group", data=new_df, join=False, palette=cm)

# Add error bars for confidence intervals
for index, row in new_df.iterrows():
    if pd.notna(row['Target']):  # Ensure the row has data
        group_color = cm[new_df['group'].unique().tolist().index(row['group'])]
        plt.plot([row['exp(coef) lower 95%'], row['exp(coef) upper 95%']], [row['symbol_group'], row['symbol_group']], color=group_color, lw=1.5)

# Customize the plot
plt.xscale('linear')
plt.axvline(x=1, color='black', linestyle='--')
plt.xlabel('Hazard Ratio')
plt.ylabel('')
plt.xlim(0, 10)
plt.title('Forest Plot of All Events')

# Remove the grid
sns.despine(left=True, bottom=True)
ax.grid(False)

# Add a black frame around the plot
for spine in ax.spines.values():
    spine.set_visible(True)
    spine.set_edgecolor('black')
    spine.set_linewidth(1.5)

# Customize the legend
legend = ax.legend(frameon=False)

# Save the plot
plt.tight_layout()
plt.savefig("hr_all_events_updated.png", bbox_inches='tight', dpi=450)
plt.show()















