# -*- coding: utf-8 -*-
"""Figure 5 iTAL HK3035 SPP1 MMP7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ran7FbV6MMhfa_tQ2FzCPJVLpxyTb6VZ
"""

!pip install --quiet scanpy
!pip install --quiet leidenalg
!pip install --quiet squidpy

import csv
import anndata as ad
import gzip
import os
import scipy.io
import scanpy as sc
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import drive
import leidenalg as la
from pathlib import Path
import squidpy as sq
import scipy

adata3= sc.read_h5ad('/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/all_Cosmx_cleaned_neighbored.h5ad')

adata3=adata3[adata3.obs['sample']=='HK3035']

adata3.obs['fov']=adata3.obs['fov'].astype(int)

###lets map SPP1, MMP7, B2M in the same section used for fig. 3
##this is for iPT/iTAL intersection in the HK3035
fov=[6,13,20,28,36,44, 52, 60, 68,76,84]
mask=adata3.obs['fov'].isin(fov)
adata3=adata3[mask]
adata3

adata3.obs['for_plotting_iTAL'] = np.where(adata3.obs['iTAL_subcluster_ME_20um'] == 'iTAL ME 1',
                                      'iTAL ME 1', 'outlier')
print(adata3.obs['for_plotting_iTAL'].value_counts())

color_dict = {
    'iPT ME 4': '#F18C93', # red
    'outlier': '#808080',   # black
    'iTAL ME 1':'#F0B836'
}

sc.pl.umap(adata3, color = 'for_plotting_iTAL', palette=color_dict)

adata= sc.read_h5ad('/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/raw_for_plotting/HK3035_raw.h5ad')

del adata.obsp['50_micron_connectivities']
del adata.obsp['50_micron_distances']

# Convert cell_id columns to sets
cell_ids_in_adata = set(adata.obs["cell_id"].to_list())
cell_ids_in_adata3 = set(adata3.obs["cell_id"].to_list())

# Find the intersection of cell IDs present in both objects
common_cell_ids = cell_ids_in_adata.intersection(cell_ids_in_adata3)

# Print the common cell IDs
#print(common_cell_ids)
mask = adata.obs["cell_id"].isin(common_cell_ids)
adata_subset = adata[mask]
adata_subset

columns_to_map=['for_plotting_iTAL']

for column in columns_to_map:

    #Create a dictionary from adata2 mapping cell_id to immune_cell_neighbor_calling
    immune_calling_map = adata3.obs.set_index('cell_id')[f'{column}'].to_dict()

    # Map immune_cell_neighbor_calling values to adata_subset based on cell_id
    adata_subset.obs[f'mapped_{column}'] = adata_subset.obs['cell_id'].map(immune_calling_map)

sc.pp.normalize_total(adata_subset, inplace=True)
sc.pp.log1p(adata_subset)

gene_list1=['SPP1', 'MMP7', 'B2M']
sc.tl.score_genes(adata_subset, gene_list1, score_name='MMP7SPP1B2M')

print(adata_subset.obs['MMP7SPP1B2M'].max())

adata_subset.obsm['X_umap']=adata3.obsm['X_umap'].copy()
sc.pl.umap(adata_subset, color = "mapped_for_plotting_iTAL", palette=color_dict)

plt.style.use('dark_background')
adata_list = [adata_subset]
for adata in adata_list:
    adata_name = adata.obs["fov"].unique().astype(str)
    for fov in adata.obs['fov'].unique():
        ax = sq.pl.spatial_segment(
            adata,
            color="mapped_for_plotting_iTAL",
            library_key="fov",
            library_id=fov,
            seg_cell_id="cell_ID",
            seg_outline=True,
            img=False,
            title='',
            axis_label='',
            return_ax=True,
            frameon=False,
            vmax = 1.2,
            vmin = 0,
            colorbar=False,
            cmap='plasma'
        )

        # Set the visibility of the spines to False
        for spine in ax.spines.values():
            spine.set_visible(False)

        # Remove the legend, if present
        if ax.get_legend():
            ax.get_legend().remove()

        # Corrected filename construction with string formatting
        filename = f'/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/Figure_6/iTAL_ME1_{fov}_HK3035.png'

        # When saving, also specify the bbox_inches parameter to eliminate any extra white space
        plt.savefig(filename, dpi=450, bbox_inches='tight', pad_inches=0)
        plt.show()

plt.style.use('dark_background')
adata_list = [adata_subset]
for adata in adata_list:
    adata_name = adata.obs["fov"].unique().astype(str)
    for fov in adata.obs['fov'].unique():
        ax = sq.pl.spatial_segment(
            adata,
            color="MMP7SPP1B2M",
            library_key="fov",
            library_id=fov,
            seg_cell_id="cell_ID",
            seg_outline=True,
            img=False,
            title='',
            axis_label='',
            return_ax=True,
            frameon=False,
            vmax = 1.1,
            vmin = 0.1,
            colorbar=False,
            cmap='plasma'
        )

        # Set the visibility of the spines to False
        for spine in ax.spines.values():
            spine.set_visible(False)

        # Remove the legend, if present
        if ax.get_legend():
            ax.get_legend().remove()

        # Corrected filename construction with string formatting
        filename = f'/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/Figure_6/MMP7SPP1B2M_{fov}_HK3035.png'

        # When saving, also specify the bbox_inches parameter to eliminate any extra white space
        plt.savefig(filename, dpi=450, bbox_inches='tight', pad_inches=0)
        plt.show()

plt.style.use('dark_background')
adata_list = [adata_subset]
for adata in adata_list:
    adata_name = adata.obs["fov"].unique().astype(str)
    for fov in adata.obs['fov'].unique():
        ax = sq.pl.spatial_segment(
            adata,
            color="SPP1",
            library_key="fov",
            library_id=fov,
            seg_cell_id="cell_ID",
            seg_outline=True,
            img=False,
            title='',
            axis_label='',
            return_ax=True,
            frameon=False,
            vmax = 3.5,
            vmin = 0.5,
            colorbar=False,
            cmap='plasma'
        )

        # Set the visibility of the spines to False
        for spine in ax.spines.values():
            spine.set_visible(False)

        # Remove the legend, if present
        if ax.get_legend():
            ax.get_legend().remove()

        # Corrected filename construction with string formatting
        #filename = f'/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/Figure_6/SPP1_3.5max_{fov}_HK3035.png'

        # When saving, also specify the bbox_inches parameter to eliminate any extra white space
        #plt.savefig(filename, dpi=450, bbox_inches='tight', pad_inches=0)
        plt.show()

plt.style.use('dark_background')
adata_list = [adata_subset]
for adata in adata_list:
    adata_name = adata.obs["fov"].unique().astype(str)
    for fov in adata.obs['fov'].unique():
        ax = sq.pl.spatial_segment(
            adata,
            color="B2M",
            library_key="fov",
            library_id=fov,
            seg_cell_id="cell_ID",
            seg_outline=True,
            img=False,
            title='',
            axis_label='',
            return_ax=True,
            frameon=False,
            vmax = 2,
            vmin = 0.5,
            colorbar=False,
            cmap='plasma'
        )

        # Set the visibility of the spines to False
        for spine in ax.spines.values():
            spine.set_visible(False)

        # Remove the legend, if present
        if ax.get_legend():
            ax.get_legend().remove()

        # Corrected filename construction with string formatting
        filename = f'/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/Figure_6/B2M_2max_{fov}_HK3035.png'

        # When saving, also specify the bbox_inches parameter to eliminate any extra white space
        plt.savefig(filename, dpi=450, bbox_inches='tight', pad_inches=0)
        plt.show()





adata3=adata3[adata3.obs["sample"]=="HK3063"]

adata3.obs["fov"]=adata3.obs["fov"].astype(int)

#we want to use these FOVs
fov_include = [53, 54, 55, 56, 57, 66, 67, 68, 69, 70, 79, 80, 81, 82, 83, 92, 93, 94, 95, 96, 104, 105, 106, 107, 108, 115, 116, 117, 118, 119, 126, 127, 128, 129, 130]

adata3 = adata3[adata3.obs['fov'].isin(fov_include)]

cell_colors = {'PC': (0.12156862745098039, 0.4666666666666667, 0.7058823529411765),
               'DCT_CNT_IC_PC':(0.12156862745098039, 0.4666666666666667, 0.7058823529411765),
               'CNT': (0.6823529411764706, 0.7803921568627451, 0.9098039215686274),
               'DCT': (1.0, 0.4980392156862745, 0.054901960784313725),
               'DTL_ATL': (1.0, 0.7333333333333333, 0.47058823529411764),
               'EC_DVR': (0.17254901960784313, 0.6274509803921569, 0.17254901960784313),
               'EC_Peritub': (0.596078431372549, 0.8745098039215686, 0.5411764705882353),
               'Endothelium':(0.596078431372549, 0.8745098039215686, 0.5411764705882353),
               'EC_glom': (0.8392156862745098, 0.15294117647058825, 0.1568627450980392),
               'IC A': (1.0, 0.596078431372549, 0.5882352941176471),
               'IC B': (0.5803921568627451, 0.403921568627451, 0.7411764705882353),
               'Immune':  (1.0, 0.647058823529412, 0.0),
               'Podo': (0.5490196078431373, 0.33725490196078434, 0.29411764705882354),
               'Fibroblast': (0.7686274509803922, 0.611764705882353, 0.5803921568627451),
               'PEC': (0.8901960784313725, 0.4666666666666667, 0.7607843137254902),
               'PT': (0.9686274509803922, 0.7137254901960784, 0.8235294117647058),
               'MC1': (0.4980392156862745, 0.4980392156862745, 0.4980392156862745),
               'iPT': (0.7803921568627451, 0.7803921568627451, 0.7803921568627451),
               'iTAL': (0.8588235294117647, 0.8588235294117647, 0.5529411764705883),
               'TAL': (0.09019607843137255, 0.7450980392156863, 0.8117647058823529),
               'VSMC': (0.6196078431372549, 0.8549019607843137, 0.8980392156862745),
               'Stroma':(0.6196078431372549, 0.8549019607843137, 0.8980392156862745),
               'CD4+ T Cells': (0.5529411764705883, 0.8274509803921568, 0.7803921568627451),
                'Baso/Mast':(0.2235, 0.2314, 0.4745),
                'B Cells':(0.7450980392156863, 0.7294117647058823, 0.8549019607843137),
                'CD8+ T Cells':(0.6784, 0.2863, 0.2902),
                'MDC':(0.9921568627450981, 0.7058823529411765, 0.3843137254901961),
                'Neutrophil':(0.9882352941176471, 0.803921568627451, 0.8980392156862745),
                'Mac M2':(0.3, 0.3, 0.3),
                'NK Cells':(0.7372549019607844, 0.5019607843137255, 0.7411764705882353),

}

adata3

print(adata3.obs['iTAL_subcluster_ME_20um'].unique())

adata3.obs['iTAL_subcluster_ME_20um_ME1'] = adata3.obs['iTAL_subcluster_ME_20um'].copy()

# Apply the condition to assign 'outlier' to cells that are not 'iTAL ME 1'
adata3.obs['iTAL_subcluster_ME_20um_ME1'] = adata3.obs['iTAL_subcluster_ME_20um_ME1'].apply(
    lambda x: x if x == 'iTAL ME 1' else 'outlier'
)

adata3.obs['iTAL_subcluster_ME_20um_ME1']=adata3.obs['iTAL_subcluster_ME_20um_ME1'].astype('category')

adata= sc.read_h5ad('/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/raw_for_plotting/HK3063_raw.h5ad')

# Convert cell_id columns to sets
cell_ids_in_adata = set(adata.obs["cell_id"].to_list())
cell_ids_in_adata3 = set(adata3.obs["cell_id"].to_list())

# Find the intersection of cell IDs present in both objects
common_cell_ids = cell_ids_in_adata.intersection(cell_ids_in_adata3)

# Print the common cell IDs
#print(common_cell_ids)
mask = adata.obs["cell_id"].isin(common_cell_ids)
adata_subset = adata[mask]
adata_subset

# Create a dictionary from adata2 mapping cell_id to immune_cell_neighbor_calling
immune_calling_map = adata3.obs.set_index('cell_id')['iTAL_subcluster_ME_20um_ME1'].to_dict()

# Map immune_cell_neighbor_calling values to adata_subset based on cell_id
adata_subset.obs['iTAL_subcluster_ME_20um_ME1'] = adata_subset.obs['cell_id'].map(immune_calling_map)

adata_subset.obs['iTAL_subcluster_ME_20um_ME1'] =adata_subset.obs['iTAL_subcluster_ME_20um_ME1'].astype('category')

sc.pp.log1p(adata_subset)

gene_list1=['HAVCR1', 'MMP7']
sc.tl.score_genes(adata_subset, gene_list1, score_name='KIM1MMP7')

adata_subset.obsm['X_umap']=adata3.obsm['X_umap'].copy()

palette={
    'iPT ME 1': '#A7C8EB',
    'iPT ME 2': '#8CC47A',
    'iPT ME 3': '#C9AFD5',
    'iPT ME 4': '#F18C93',
    'iTAL ME 1': '#F0B836',
    'iTAL ME 2': '#007ABA',
    'iTAL ME 3':'#8F65A8',
    'iTAL ME 4': '#D975AC',
    'outlier':'#808080'
}##'#92D2DF',

sc.pl.umap(adata_subset, color ="iTAL_subcluster_ME_20um_ME1", palette=palette)

sc.pl.umap(adata_subset, color ="KIM1MMP7", palette=palette)

adata_subset.obs["fov"]=adata_subset.obs["fov"].astype(str)

plt.style.use('dark_background')
adata_list = [adata_subset]
for adata in adata_list:
    adata_name = adata.obs["fov"].unique().astype(str)
    for fov in adata.obs['fov'].unique():
        ax = sq.pl.spatial_segment(
            adata,
            color="KIM1MMP7",
            library_key="fov",
            library_id=fov,
            seg_cell_id="cell_ID",
            seg_outline=True,
            img=False,
            title='',
            axis_label='',
            return_ax=True,
            frameon=False,
            vmax = 1.5,
            vmin = 0,
            colorbar=False,
            cmap='plasma'
        )

        # Set the visibility of the spines to False
        for spine in ax.spines.values():
            spine.set_visible(False)

        # Remove the legend, if present
        if ax.get_legend():
            ax.get_legend().remove()

        # Corrected filename construction with string formatting
        filename = f'/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/Figure_6/MMP7_KIM1_{fov}_HK3063.png'

        # When saving, also specify the bbox_inches parameter to eliminate any extra white space
        plt.savefig(filename, dpi=450, bbox_inches='tight', pad_inches=0)
        plt.show()

plt.style.use('dark_background')
adata_list = [adata_subset]
for adata in adata_list:
    adata_name = adata.obs["fov"].unique().astype(str)
    for fov in adata.obs['fov'].unique():
        ax = sq.pl.spatial_segment(
            adata,
            color="iTAL_subcluster_ME_20um_ME1",
            library_key="fov",
            library_id=fov,
            seg_cell_id="cell_ID",
            seg_outline=True,
            img=False,
            title='',
            axis_label='',
            return_ax=True,
            frameon=False,
            vmax = 1.5,
            vmin = 0,
            colorbar=False,
            cmap='plasma'
        )

        # Set the visibility of the spines to False
        for spine in ax.spines.values():
            spine.set_visible(False)

        # Remove the legend, if present
        if ax.get_legend():
            ax.get_legend().remove()

        # Corrected filename construction with string formatting
        filename = f'/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/Figure_6/iTAL_ME1_{fov}_HK3063.png'

        # When saving, also specify the bbox_inches parameter to eliminate any extra white space
        plt.savefig(filename, dpi=450, bbox_inches='tight', pad_inches=0)
        plt.show()

plt.style.use('dark_background')
adata_list = [adata_subset]
for adata in adata_list:
    adata_name = adata.obs["fov"].unique().astype(str)
    for fov in adata.obs['fov'].unique():
        ax = sq.pl.spatial_segment(
            adata,
            color="KIM1MMP7",
            library_key="fov",
            library_id=fov,
            seg_cell_id="cell_ID",
            seg_outline=True,
            img=False,
            title='',
            axis_label='',
            return_ax=True,
            frameon=False,
            vmax = 1.3,
            vmin = 0,
            colorbar=False,
            cmap='plasma'
        )

        # Set the visibility of the spines to False
        for spine in ax.spines.values():
            spine.set_visible(False)

        # Remove the legend, if present
        if ax.get_legend():
            ax.get_legend().remove()

        # Corrected filename construction with string formatting
        filename = f'/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/Figure_6/1.3max_MMP7_KIM1_{fov}_HK3063.png'

        # When saving, also specify the bbox_inches parameter to eliminate any extra white space
        plt.savefig(filename, dpi=450, bbox_inches='tight', pad_inches=0)
        plt.show()

import matplotlib.pyplot as plt
import squidpy as sq

# Apply dark background style
plt.style.use('dark_background')


adata_list = [adata_subset]
fov_include_2 = ['107', '108', '118', '119']

for adata in adata_list:
    adata_name=adata.obs["fov"].unique().astype(str)
    for fov in fov_include_2:
        ax = sq.pl.spatial_segment(
            adata,
            color="KIM1MMP7",
            library_key="fov",
            library_id=fov,
            seg_cell_id="cell_ID",
            seg_outline=True,
            img=False,
            title='',
            axis_label='',
            return_ax=True,
            frameon=False,
            vmax = 1.3,
            vmin = 0,
            colorbar=True,
            cmap='plasma',
            na_color=(0.3000000000001, 0.3000000000001, 0.3000000000001),
        )



        # Corrected filename construction with string formatting
        filename = f'/content/scalebar_HK3063.png'
        plt.savefig(filename, dpi=900, transparent=True)
        plt.show()

import matplotlib.pyplot as plt
import squidpy as sq

# Apply dark background style
plt.style.use('dark_background')

adata_list = [adata_subset]
fov_include_2 = ['107', '108', '118', '119']

for adata in adata_list:
    adata_name = adata.obs["fov"].unique().astype(str)
    for fov in fov_include_2:
        ax = sq.pl.spatial_segment(
            adata,
            color="KIM1MMP7",
            library_key="fov",
            library_id=fov,
            seg_cell_id="cell_ID",
            seg_outline=True,
            img=False,
            title='',
            axis_label='',
            return_ax=True,
            frameon=False,
            vmax=1.3,
            vmin=0,
            scalebar_dx=0.12,
            colorbar=False,  # We will add the colorbar separately
            cmap='plasma',
            na_color=(0.3, 0.3, 0.3),
        )


        # Corrected filename construction with string formatting
        filename = f'/content/scalebar_HK3063.png'
        plt.savefig(filename, dpi=900, bbox_inches='tight', pad_inches=0)
        plt.show()

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import squidpy as sq

# %config InlineBackend.figure_format='retina'
plt.style.use('dark_background')

# Create your spatial segment plot
ax = sq.pl.spatial_segment(
    adata_subset,
    color="immune_cell_neighbor_calling",
    library_key="fov",
    library_id=['118'],
    seg_cell_id="cell_ID",
    seg_outline=True,
    img=False,
    scalebar_dx=0.12,
    scalebar_kwargs={"scale_loc": "bottom", "location": "upper right"},
    legend_fontsize='small',
    return_ax=True
)

# Adjust the current figure to make space for the legend below
plt.gcf().subplots_adjust(bottom=1.2)  # You may need to adjust this value

# Get the handles and labels from the plot
handles, labels = ax.get_legend_handles_labels()

# Create the legend under the plot
ax.legend(handles, labels, loc='upper center', bbox_to_anchor=(0.5, -0.05),
          fancybox=True, shadow=True, ncol=4, frameon=False)  # Adjust ncol as needed
plt.savefig('legend_immune.png', dpi=600)
plt.show()











import matplotlib.pyplot as plt
import squidpy as sq

# Apply dark background style
plt.style.use('dark_background')

# Manually adjust the background color to be transparent for subsequent plots
plt.rcParams['figure.facecolor'] = 'none'  # For the figure background
plt.rcParams['axes.facecolor'] = 'none'  # For the axes background
plt.rcParams['savefig.facecolor'] = 'none'  # For the saved figures

adata_list = [adata_subset]
fov_include_2 = ['1','2','3','11','12','13','22','23','24']

for adata in adata_list:
    adata_name=adata.obs["fov"].unique().astype(str)
    for fov in adata.obs['fov'].unique():
        ax = sq.pl.spatial_segment(
            adata,
            color="immune_coarse",
            library_key="fov",
            library_id=fov,
            seg_cell_id="cell_ID",
            seg_outline=True,
            img=False,
            title='',
            axis_label='',
            return_ax=True,
            frameon=False,
            cmap='plasma',
            vmax = 2,
            vmin = 0,
            na_color=(0.2000000000001, 0.2000000000001, 0.2000000000001),
            scalebar_dx=0.12,
            scalebar_kwargs={"scale_loc": "bottom", "location": "upper right"},
        )

        # Remove the legend, if present
        if ax.get_legend():
            ax.get_legend().remove()

        # Corrected filename construction with string formatting
        filename = f'scale.png'
        plt.savefig(filename, dpi=900, transparent=True)
        plt.show()



adata_subset.obs["fov"]=adata_subset.obs["fov"].astype(str)

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import squidpy as sq

# %config InlineBackend.figure_format='retina'
plt.style.use('dark_background')

# Create your spatial segment plot
ax = sq.pl.spatial_segment(
    adata_subset,
    color="immune_coarse",
    library_key="fov",
    library_id=['1'],
    seg_cell_id="cell_ID",
    seg_outline=True,
    img=False,
    scalebar_dx=0.12,
    scalebar_kwargs={"scale_loc": "bottom", "location": "upper right"},
    legend_fontsize='small',
    return_ax=True
)

# Adjust the current figure to make space for the legend below
plt.gcf().subplots_adjust(bottom=1.2)  # You may need to adjust this value

# Get the handles and labels from the plot
handles, labels = ax.get_legend_handles_labels()

# Create the legend under the plot
ax.legend(handles, labels, loc='upper center', bbox_to_anchor=(0.5, -0.05),
          fancybox=True, shadow=True, ncol=4, frameon=False)  # Adjust ncol as needed
plt.savefig('TLO_legend_immune.png', dpi=600)
plt.show()

sc.pp.normalize_total(adata_subset, inplace=True)
sc.pp.log1p(adata_subset)

from scipy.sparse import issparse
markers = ["LTB"]
markers = [gene for gene in markers if gene in adata_subset.var_names]

# Subset the .X matrix for the markers and convert to a DataFrame
gene_expression_df = pd.DataFrame(
    adata_subset[:, markers].X.toarray() if issparse(adata_subset.X) else adata_subset[:, markers].X,
    index=adata_subset.obs_names,
    columns=markers
)
print(gene_expression_df.head(20))

from sklearn.preprocessing import MinMaxScaler

# Initialize the MinMaxScaler with the desired feature range
scaler = MinMaxScaler(feature_range=(0, 1))

# Select the 'PC' column and scale it
# Note: .values.reshape(-1, 1) converts it from 1D array to 2D array as expected by the scaler
pc_scaled = scaler.fit_transform(gene_expression_df[['LTB']].values.reshape(-1, 1))

# Replace the original 'PC' column with the scaled values
gene_expression_df['LTB_scaled'] = pc_scaled.flatten()
print(gene_expression_df.head(20))

adata_subset.obs["LTB_scaled"]=gene_expression_df['LTB_scaled']

adata_subset.obs["fov"]=adata_subset.obs["fov"].astype(str)

TNFSF13B_scaled

import matplotlib.pyplot as plt
import squidpy as sq

# Apply dark background style
plt.style.use('dark_background')

# Manually adjust the background color to be transparent for subsequent plots
plt.rcParams['figure.facecolor'] = 'none'  # For the figure background
plt.rcParams['axes.facecolor'] = 'none'  # For the axes background
plt.rcParams['savefig.facecolor'] = 'none'  # For the saved figures

adata_list = [adata_subset]
fov_include_2 = ['1','2','3','11','12','13','22','23','24']

for adata in adata_list:
    adata_name=adata.obs["fov"].unique().astype(str)
    for fov in adata.obs['fov'].unique():
        ax = sq.pl.spatial_segment(
            adata,
            color="TNFSF13B_scaled",
            library_key="fov",
            library_id=fov,
            seg_cell_id="cell_ID",
            seg_outline=True,
            img=False,
            title='',
            axis_label='',
            return_ax=True,
            frameon=False,
            na_color=(0.2000000000001, 0.2000000000001, 0.2000000000001),
            cmap='plasma',
            colorbar=False,

        )

        # Remove the legend, if present
        if ax.get_legend():
            ax.get_legend().remove()

        # Corrected filename construction with string formatting
        filename = f'/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/Immune_TLO/Penumbra_TLO/Pictures/TNFSF13B_{fov}_HK2695.png'
        plt.savefig(filename, dpi=900, transparent=True)
        plt.show()

import matplotlib.pyplot as plt
import squidpy as sq

# Apply dark background style
plt.style.use('dark_background')

# Manually adjust the background color to be transparent for subsequent plots
plt.rcParams['figure.facecolor'] = 'none'  # For the figure background
plt.rcParams['axes.facecolor'] = 'none'  # For the axes background
plt.rcParams['savefig.facecolor'] = 'none'  # For the saved figures

adata_list = [adata_subset]
fov_include_2 = ['1','2','3','11','12','13','22','23','24']

for adata in adata_list:
    adata_name=adata.obs["fov"].unique().astype(str)
    for fov in adata.obs['fov'].unique():
        ax = sq.pl.spatial_segment(
            adata,
            color="TNFRSF13C_scaled",
            library_key="fov",
            library_id=fov,
            seg_cell_id="cell_ID",
            seg_outline=True,
            img=False,
            title='',
            axis_label='',
            return_ax=True,
            frameon=False,
            na_color=(0.2000000000001, 0.2000000000001, 0.2000000000001),
            cmap='plasma',
            colorbar=False,

        )

        # Remove the legend, if present
        if ax.get_legend():
            ax.get_legend().remove()

        # Corrected filename construction with string formatting
        filename = f'/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/Immune_TLO/Penumbra_TLO/Pictures/TNFRSF13C_{fov}_HK2695.png'
        plt.savefig(filename, dpi=900, transparent=True)
        plt.show()

from scipy.sparse import issparse
markers = ["CCL21"]
markers = [gene for gene in markers if gene in adata_subset.var_names]

# Subset the .X matrix for the markers and convert to a DataFrame
gene_expression_df = pd.DataFrame(
    adata_subset[:, markers].X.toarray() if issparse(adata_subset.X) else adata_subset[:, markers].X,
    index=adata_subset.obs_names,
    columns=markers
)
print(gene_expression_df.head(20))

from sklearn.preprocessing import MinMaxScaler

# Initialize the MinMaxScaler with the desired feature range
scaler = MinMaxScaler(feature_range=(0, 1))

# Select the 'PC' column and scale it
# Note: .values.reshape(-1, 1) converts it from 1D array to 2D array as expected by the scaler
pc_scaled = scaler.fit_transform(gene_expression_df[['CCL21']].values.reshape(-1, 1))

# Replace the original 'PC' column with the scaled values
gene_expression_df['CCL21_scaled'] = pc_scaled.flatten()
print(gene_expression_df.head(20))

adata_subset.obs["CCL21_scaled"]=gene_expression_df['CCL21_scaled']

import matplotlib.pyplot as plt
import squidpy as sq

# Apply dark background style
plt.style.use('dark_background')

# Manually adjust the background color to be transparent for subsequent plots
plt.rcParams['figure.facecolor'] = 'none'  # For the figure background
plt.rcParams['axes.facecolor'] = 'none'  # For the axes background
plt.rcParams['savefig.facecolor'] = 'none'  # For the saved figures

adata_list = [adata_subset]
fov_include_2 = ['1','2','3','11','12','13','22','23','24']

for adata in adata_list:
    adata_name=adata.obs["fov"].unique().astype(str)
    for fov in adata.obs['fov'].unique():
        ax = sq.pl.spatial_segment(
            adata,
            color="CCL21_scaled",
            library_key="fov",
            library_id=fov,
            seg_cell_id="cell_ID",
            seg_outline=True,
            img=False,
            title='',
            axis_label='',
            return_ax=True,
            frameon=False,
            na_color=(0.2000000000001, 0.2000000000001, 0.2000000000001),
            cmap='plasma',
            colorbar=False,

        )

        # Remove the legend, if present
        if ax.get_legend():
            ax.get_legend().remove()

        # Corrected filename construction with string formatting
        filename = f'/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/Immune_TLO/Penumbra_TLO/Pictures/CCL21_{fov}_HK2695.png'
        plt.savefig(filename, dpi=900, transparent=True)
        plt.show()





import matplotlib.pyplot as plt
import squidpy as sq
import gc

# Apply dark background style
plt.style.use('dark_background')

# Manually adjust the background color to be transparent for subsequent plots
plt.rcParams['figure.facecolor'] = 'none'  # For the figure background
plt.rcParams['axes.facecolor'] = 'none'  # For the axes background
plt.rcParams['savefig.facecolor'] = 'none'  # For the saved figures


for library_id in adata_subset.obs["fov"].unique():
    print(library_id)
    ax = sq.pl.spatial_segment(
        adata_subset,
        color="CCL19_scaled",
        library_key="fov",
        library_id=[library_id],
        seg_cell_id="cell_ID",
        seg_outline=True,
        img=False,
        title='',
        axis_label='',
        return_ax=True,
        frameon=False,
        na_color=(0.2000000000001, 0.2000000000001, 0.2000000000001),
        cmap='plasma',
        colorbar=False
    )

    # Remove the legend, if present
    if ax.get_legend():
        ax.get_legend().remove()
    plt.savefig(f'/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/Spatial_Neighborhoods/ACSM2B_scaled_{library_id}', dpi=600)
    plt.show()
    gc.collect()



adata_subset.obs["fov"]

