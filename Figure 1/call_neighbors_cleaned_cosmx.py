# -*- coding: utf-8 -*-
"""Call neighbors cleaned Cosmx.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HxAeP19RNEYPlZ63AFViqeOP4ccmE9xn
"""

!pip install scanpy
!pip install leidenalg
!pip install squidpy

import csv
import anndata as ad
import gzip
import os
import scipy.io
import scanpy as sc
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import drive
import leidenalg as la
from pathlib import Path
import squidpy as sq

adata = sc.read_h5ad('/content/drive/MyDrive/Bernhard/Cosmx/SCVI/All_Runs/adult_CosMx_postSCVI_round4_Scanvi_fine_with_garbage_5_percent.h5ad')

adata2 = sc.read_h5ad("/content/drive/MyDrive/Bernhard/Cosmx/SCVI/All_Runs/adult_CosMx_Filter_30_annotated.h5ad")

common_cells = adata.obs.index.intersection(adata2.obs.index)

# Step 2: Filter the second AnnData object
# Create a new AnnData object that only includes the common cells
filtered_adata2 = adata2[common_cells]

filtered_adata2

adata_list = []

for i, j in enumerate(filtered_adata2.obs["sample"].unique()):
    adata_sample = filtered_adata2[filtered_adata2.obs["sample"] == j]

    sq.gr.spatial_neighbors(
        adata_sample,
        radius=20/0.12,
        coord_type="generic",
        key_added="20_micron",
        spatial_key = "spatial_fov",
    )
    print(j)
    neighbor_check = []
    for k in range(adata_sample.obsp["20_micron_connectivities"].shape[0]):
        neighbor_check.append(np.sum(adata_sample.obsp["20_micron_connectivities"][k]))
        # total number of neighbors
    plt.hist(neighbor_check, bins = np.arange(0, 50, 1))
    plt.show()

    adata_list.append(adata_sample)

adata_cosmx = ad.concat(adata_list, pairwise = True)

Cosmx_annotated = adata[adata.obs["tech"]=="Cosmx"]

sc.pl.umap(Cosmx_annotated, color = "annotation_post_scanvi70_broad")

# Transfer '20_micron_connectivities'
Cosmx_annotated.obsp['20_micron_connectivities'] = adata_cosmx.obsp['20_micron_connectivities']

# Transfer '20_micron_distances'
Cosmx_annotated.obsp['20_micron_distances'] = adata_cosmx.obsp['20_micron_distances']

Cosmx_annotated.write('/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/all_Cosmx_cleaned_neighbored.h5ad')

Cosmx_annotated

del adata_cosmx
del adata
del adata2

import gc
gc.collect()

adata_list = []

for i, j in enumerate(filtered_adata2.obs["sample"].unique()):
    adata_sample = filtered_adata2[filtered_adata2.obs["sample"] == j]

    sq.gr.spatial_neighbors(
        adata_sample,
        radius=30/0.12,
        coord_type="generic",
        key_added="30_micron",
        spatial_key = "spatial_fov",
    )
    print(j)
    neighbor_check = []
    for k in range(adata_sample.obsp["30_micron_connectivities"].shape[0]):
        neighbor_check.append(np.sum(adata_sample.obsp["30_micron_connectivities"][k]))
        # total number of neighbors
    plt.hist(neighbor_check, bins = np.arange(0, 50, 1))
    plt.show()

    adata_list.append(adata_sample)

adata_cosmx = ad.concat(adata_list, pairwise = True)

gc.collect()

adata_cosmx = sc.read_h5ad('/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/Zwischenspeichern.h5ad')

adata_cosmx

# Transfer '20_micron_connectivities'
Cosmx_annotated.obsp['30_micron_connectivities'] = adata_cosmx.obsp['30_micron_connectivities']

# Transfer '20_micron_distances'
Cosmx_annotated.obsp['30_micron_distances'] = adata_cosmx.obsp['30_micron_distances']

Cosmx_annotated

Cosmx_annotated.write('/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/all_Cosmx_cleaned_neighbored.h5ad')

# List of .obs columns to be deleted
columns_to_delete = [
    'annotation_final_level1', 'annotation_final_level1B', 'annotation_notfinal_level2',
    'subclass.l2', 'C_scANVI', '_scvi_batch', '_scvi_labels', 'mean_distance_scvi_1',
    'leiden_scVI_0_5', 'mean_distance', 'mean_distance_10', 'mean_distance_5',
    'mean_distance_1', 'mean_distance_15', 'annotation_final_level1_scanvi',
    'mean_distance_10_scanvi', 'leiden_scanvi_0_5', 'annotation_post_scanvi50',
    'annotation_post_scanvi50_mapped', 'annotations_fine_for_scanvi',
    'annotation_post_scanvi70_broad_sub'
]

# Drop the columns from the .obs attribute of your AnnData object
# Replace 'adata' with the name of your AnnData object
Cosmx_annotated.obs.drop(columns=columns_to_delete, inplace=True)

# Now adata.obs no longer contains the specified columns

Cosmx_annotated

sc.pl.umap(Cosmx_annotated, color = "annotation_post_scanvi70_broad")

Cosmx_annotated.write('/content/drive/MyDrive/Bernhard/Cosmx/After_Cleaning/all_Cosmx_cleaned_neighbored.h5ad')

